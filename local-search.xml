<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux课程笔记</title>
    <link href="/2021/03/22/linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/03/22/linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="linux课程笔记"><a href="#linux课程笔记" class="headerlink" title="linux课程笔记"></a>linux课程笔记</h1><h1 id="linux访问"><a href="#linux访问" class="headerlink" title="linux访问"></a>linux访问</h1><p>linux使用<code>VFS</code>来访问其他格式文件</p><h2 id="linux文件系统"><a href="#linux文件系统" class="headerlink" title="linux文件系统"></a>linux文件系统</h2><ul><li>bin</li></ul><p>二进制文件，用户命令（一般常用命令）</p><ul><li>sbin</li></ul><p>存放系统命令</p><ul><li>usr</li></ul><p>这下面也有bin和sbin，和用户有关的</p><ul><li>cdrom</li></ul><p>光驱，光盘</p><ul><li>dev</li></ul><p>用设备进行管理，所有的硬件信息</p><p><em>tty是终端</em>，还有很多硬盘的信息也是在这里</p><ul><li>etc</li></ul><p>所有的配置文件</p><ul><li>lib</li></ul><p>库文件</p><ul><li>lost+found</li></ul><p>出错信息</p><ul><li>media</li></ul><p>早期是在<code>mnt</code>上挂在设备，现在是在<code>media</code>，如硬盘，u盘的挂载</p><ul><li>proc</li></ul><p>存放所有的设备的动态信息</p><ul><li>root</li></ul><p>超级用户的主目录</p><ul><li>usr</li></ul><p>第三方软件</p><ul><li>var</li></ul><p>可变的文件，比如日志文件</p><h2 id="boot文件目录"><a href="#boot文件目录" class="headerlink" title="boot文件目录"></a>boot文件目录</h2><p>里面有<code>efi</code>，<code>grub</code>，<strong>其中efi中是引导程序，grub是相应的grub程序</strong></p><p><strong>System.map，vmlinuz，initrd.img</strong>这三个文件是和内核有关（当然还要加上那个版本号），其中initrd.img就是根文件系统的印像（建立了虚拟的根目录文件系统，为了引入真正的文件系统）</p><p>initrd.img主要是编译的模块</p><p>编译内核时的配置文件就是<code>config-版本-generic</code></p><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><p>UEFI -&gt; grub.cfg -&gt; vmlinuz -&gt; initrd.img</p><p>需要编译的文件：vmlinuz -&gt; system.map(映射文件) -&gt; initrd.img -&gt; modules(很多硬件驱动在这里)</p><p>模块(modules)的位置: <code>/lib/modules</code></p><p>最后编译好了之后写<code>grub.cfg</code>(也可以直接<code>update-grub</code>)</p><ul><li>内核功能选项配置：</li></ul><p>[*] 加入到内核功能中<br>[ ] 不加入到内核中<br>[M] 加入到模块中</p><p><code>-jN</code>中的N是选择使用多少个核编译进行编译</p><h3 id="grub目录"><a href="#grub目录" class="headerlink" title="grub目录"></a>grub目录</h3><p>最开始的时候是从<code>sda*</code>文件中的boot程序，而grub.cfg可以设置默认启动项和内核参数，也就是说引导程序最先是在<code>sda*</code>上找程序，然后根据grub.cfg中的配置来进行设置</p><h3 id="更改grub程序"><a href="#更改grub程序" class="headerlink" title="更改grub程序"></a>更改grub程序</h3><p>可以跑到<code>/etc/default/grub</code>这个文件中进行配置，可以看到如下文件内容(<em>只记录非注释信息</em>)</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">GRUB_DEFAULT&#x3D;0GRUB_TIMEOUT_STYLE&#x3D;hiddenGRUB_TIMEOUT&#x3D;10GRUB_DISTRIBUTOR&#x3D;&#96;lsb_release -i -s 2&gt; &#x2F;dev&#x2F;null || echo Debian&#96;GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet splash&quot;GRUB_CMDLINE_LINUX&#x3D;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>同时我们还可以到<code>/etc/grub.d/</code>这个文件目录下设置grub配置</em></p><p>其中<code>10_linux</code>是有写入到grub.cfg的脚本(<em>其实每个文件都是一个脚本，之后会全部写到grub.cfg</em>)</p><h2 id="查看磁盘情况"><a href="#查看磁盘情况" class="headerlink" title="查看磁盘情况"></a>查看磁盘情况</h2><ul><li><code>df -h</code></li></ul><p>可以查看linux文件系统中的磁盘情况</p><ul><li><code>fdisk -l</code></li></ul><p>可以查看所有的磁盘使用情况(<em>整台电脑</em>)</p><h2 id="软件源地址"><a href="#软件源地址" class="headerlink" title="软件源地址"></a>软件源地址</h2><p>软件源 /etc/apt/sources.list</p><h2 id="linux运行环境"><a href="#linux运行环境" class="headerlink" title="linux运行环境"></a>linux运行环境</h2><p>可使用tty4来进入真正的终端</p><p>使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F4</kbd></p><p>使用<code>env</code>或者<code>set</code>得到环境变量（<em><code>set</code>信息更多</em>)</p><h2 id="使用后台方式执行命令"><a href="#使用后台方式执行命令" class="headerlink" title="使用后台方式执行命令"></a>使用后台方式执行命令</h2><p>只需要在要执行的命令之后跟上一个<code>&amp;</code>就可以后台运行了</p><h2 id="浏览文件"><a href="#浏览文件" class="headerlink" title="浏览文件"></a>浏览文件</h2><h3 id="cat和more以及less"><a href="#cat和more以及less" class="headerlink" title="cat和more以及less"></a><code>cat</code>和<code>more</code>以及<code>less</code></h3><p>个人感觉<code>less</code>的体验感最好，因为<code>less</code>的手感用起来像是vim。<br><code>less</code>可以随意地上下移动行，甚至使用<code>/</code>来进行关键字搜索。</p><p><em>当然我们还有<code>head</code>和<code>tail</code></em>(可以使用<code>-n</code>参数来指定浏览行数)</p><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p dir1/dir2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这样就可以在<code>dir1</code>这个文件夹不存在的情况下同时生成<code>dir1</code>和<code>dir2</code>两个文件目录</p><h3 id="cp的更多用法"><a href="#cp的更多用法" class="headerlink" title="cp的更多用法"></a><code>cp</code>的更多用法</h3><p>当我们使用<code>cp</code>来进行一个文件或者是一个目录的复制的时候，很可能我们复制过来的文件的属性发生了变化（<em>比如用户组权限，创建时间等</em>），于是我么可以用<code>cp -a</code>来确保我们复制过来的文件所有的信息都不会改变。</p><p><em><code>-r</code>就可以拷贝目录了。</em></p><p>如果我们需要在执行<code>cp</code>操作时给予一定的响应信息的话，我们可以加上<code>-i</code>参数。(<em>即交互的意思Interactive</em>)</p><h2 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a><code>ln</code>命令</h2><p>使用<code>ln -S</code>产生软链接；使用<code>ln</code>产生硬链接</p><h2 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h2><p>使用<code>tar</code>命令：</p><p><code>tar -xvzf</code>解压缩并解包gz格式压缩包</p><p><code>tar -cvzf</code>打包并压缩为gz格式压缩包</p><div class="table-container"><table><thead><tr><th style="text-align:left">格式</th><th style="text-align:left">命令参数</th></tr></thead><tbody><tr><td style="text-align:left">gz</td><td style="text-align:left">z</td></tr><tr><td style="text-align:left">xz</td><td style="text-align:left">a</td></tr><tr><td style="text-align:left">bz</td><td style="text-align:left">j</td></tr></tbody></table></div><h1 id="系统信息类命令"><a href="#系统信息类命令" class="headerlink" title="系统信息类命令"></a>系统信息类命令</h1><ul><li><p><code>dmesg</code></p></li><li><p><code>df</code></p></li><li><p><code>du</code></p></li><li><p><code>free</code></p></li></ul><p>可查看内存空间情况</p><p>cache: 存在于cpu中，用于cpu计算空间的快速存储</p><p>buffer: 和外设打交道</p><ul><li><p><code>date</code></p></li><li><p>``</p></li></ul><h2 id="进程管理命令"><a href="#进程管理命令" class="headerlink" title="进程管理命令"></a>进程管理命令</h2><p><code>ps aux</code>: 查看所有进程情况</p><p><code>1</code>号进程是所有进程的父进程，<code>2</code>号进程是所有类进程的父进程</p><p><code>S</code>是等待态，<code>D</code>是不可打断的等待态，<code>Z</code>是僵尸态</p><p>父进程没有回收子进程的资源，于是导致子进程变成了僵尸态（杀都杀不死）</p><p>使用<code>ps -ef</code>或者使用<code>pstree</code>(更有结构)来显示进程的父子关系。</p><h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a><code>kill</code>命令</h3><p>使用<code>kill -l</code>查看可发送的所有信号。</p><p>使用<C-c>是发送的第二个信号（INT），使用<C-z>是发送的第十九个信号（STOP）</p><h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a><code>top</code>命令</h3><p>可以动态地显示进程</p><h3 id="其他杂命令"><a href="#其他杂命令" class="headerlink" title="其他杂命令"></a>其他杂命令</h3><p>使用<code>bg</code>命令将任务放在后台运行。</p><p>使用<code>fg</code>命令将任务放到前台运行。</p><p><code>uname</code>命令展示基本的系统信息。</p><p><code>uname -r</code>查看内核信息</p><h2 id="文件系统和磁盘管理"><a href="#文件系统和磁盘管理" class="headerlink" title="文件系统和磁盘管理"></a>文件系统和磁盘管理</h2><p>使用<code>chmod</code>来更改权限</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="用户的基本信息"><a href="#用户的基本信息" class="headerlink" title="用户的基本信息"></a>用户的基本信息</h2><p>在<code>/etc/passwd</code>文件中会有所有用户的信息</p><p>在<code>/etc/shadow</code>文件中存储着所有用户的密码</p><h2 id="切换到超级用户"><a href="#切换到超级用户" class="headerlink" title="切换到超级用户"></a>切换到超级用户</h2><p>最好使用<code>su -</code>来切换到root用户，相比于<code>su</code>这样可以将环境变量也切换过来。</p><h2 id="使用ifconfig"><a href="#使用ifconfig" class="headerlink" title="使用ifconfig"></a>使用<code>ifconfig</code></h2><p>一般还是要安装一下<code>net-tools</code>，然后输入<code>ifconfig</code>就可以查看所有的网卡信息。</p><p>当然在windows下，输入<code>ipconfig</code>也有一样的功能。</p><h2 id="GCC开发"><a href="#GCC开发" class="headerlink" title="GCC开发"></a>GCC开发</h2><blockquote><p>首先GCC和gcc是不一样的，GCC -&gt; GNU Compiler Collection， 而gcc是GCC里面的一个c语言的编译器。</p></blockquote><h3 id="gcc编译过程"><a href="#gcc编译过程" class="headerlink" title="gcc编译过程"></a>gcc编译过程</h3><ul><li>预处理</li><li>编译成汇编代码</li><li>汇编成目标代码</li><li>链接</li></ul><p><strong>使用<code>-l</code>来链接其他的库</strong></p><p>eg:</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -o <span class="token builtin class-name">test</span> test.c -ltest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="使用gdb来调试程序"><a href="#使用gdb来调试程序" class="headerlink" title="使用gdb来调试程序"></a>使用gdb来调试程序</h2><p>通过直接使用<code>gdb file</code>来对编译得到的可执行文件进行调试。</p><h3 id="gdb所用到的命令"><a href="#gdb所用到的命令" class="headerlink" title="gdb所用到的命令"></a><code>gdb</code>所用到的命令</h3><p>如果是输入<code>gdb</code>的话会进入到<code>gdb</code>的命令行界面。（<em>输入<code>quit</code>进行退出</em>）</p><div class="table-container"><table><thead><tr><th style="text-align:left">命令名</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left"></td></tr></tbody></table></div><p><code>gcc -g</code>来编译的时候可以使得可执行文件能够之后反编译出来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vim杂项记录</title>
    <link href="/2021/03/11/Vim%E6%9D%82%E9%A1%B9%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/03/11/Vim%E6%9D%82%E9%A1%B9%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Vim杂项记录"><a href="#Vim杂项记录" class="headerlink" title="Vim杂项记录"></a>Vim杂项记录</h1><blockquote><p>此处记录有关vim写作过程中遇到的问题或踩过的坑。</p></blockquote><h2 id="系统剪切板的通信"><a href="#系统剪切板的通信" class="headerlink" title="系统剪切板的通信"></a>系统剪切板的通信</h2><p>Vim 中的复制、删除的内容都会被存放到默认（未命名）寄存器中，之后可以通过粘贴操作读取默认寄存器中的内容。寄存器是完成这一过程的中转站，Vim 支持的寄存器非常多，其中常用的有 a-z A-Z 0-9 +”。其中：</p><ul><li>0-9：表示数字寄存器，是 Vim 用来保存最近复制、删除等操作的内容，其中 0 号寄存器保存的是最近一次的操作内容。</li></ul><p><em>a-z A-Z：表示用户寄存器，Vim 不会读写这部分寄存器</em></p><ul><li><p>“（单个双引号）：未命名的寄存器，是 Vim 的默认寄存器，例如删除、复制等操作的内容都会被保存到这里。</p></li><li><p>+：剪切板寄存器，关联系统剪切板，保存在这个寄存器中的内容可以被系统其他程序访问，也可以通过这个寄存器访问其他程序保存到剪切板中的内容。</p></li></ul><p>如果想了解更多寄存器内容，可参照<a href="https://link.zhihu.com/?target=http%3A//vimdoc.sourceforge.net/htmldoc/change.html%23registers">官网文档</a></p><p>通过下面命令可以查看所有寄存器中的内容，也可以只查看指定寄存器的内容（将寄存器名称作为参数）</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token keyword">reg</span> <span class="token punctuation">[</span>register_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后你就能愉快地使用<code>&quot;+y</code>来粘贴文本到系统的剪切板了。</p><h3 id="安装clipboard功能"><a href="#安装clipboard功能" class="headerlink" title="安装clipboard功能"></a>安装clipboard功能</h3><blockquote><p>你可能会说，老哥你这个没有用啊！我根本都没看到<code>&quot;+</code>寄存器啊！</p><p>其实我也是这么走过来的……，所以我告诉你，你是没有安装好clipboard的功能。</p></blockquote><ul><li>检查vim是否支持clipboard功能:</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> --version <span class="token operator">|</span> <span class="token function">grep</span> clipboard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>如果有 +clipboard 则跳过这一步; 如果显示的是 -clipboard 说明不支持, 需要</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> vim-gtk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>安装完成之后就可以复制vim文本内容到clipboard了。</p><h2 id="vim按了Ctrl-s后假死的解决办法"><a href="#vim按了Ctrl-s后假死的解决办法" class="headerlink" title="vim按了Ctrl + s后假死的解决办法"></a>vim按了Ctrl + s后假死的解决办法</h2><p>使用vim时，如果你不小心按了 <kbd>Ctrl</kbd> + <kbd>s</kbd>后，你会发现不能输入任何东西了，像死掉了一般，其实vim并没有死掉，这时vim只是停止向终端输出而已，要想退出这种状态，只需按 <kbd>Ctrl</kbd> + <kbd>q</kbd>即可恢复正常。</p><h2 id="vim的宏录制功能"><a href="#vim的宏录制功能" class="headerlink" title="vim的宏录制功能"></a>vim的宏录制功能</h2><blockquote><p>或许我们开始接触vim时会因为vim不能进行多次操作而觉得烦恼（<em>比如我们想要将每一行的<code>a</code>改称<code>b</code></em>），我们会想这时候有多光标就好了（<em>然而vim的使用最好是不用鼠标的</em>）。这时候我们就需要宏了。</p></blockquote><h3 id="宏的简单介绍"><a href="#宏的简单介绍" class="headerlink" title="宏的简单介绍"></a>宏的简单介绍</h3><p>宏的录制</p><p>在 Vim 编辑器中创建新文件或打开现有文件；<br>按 q 并跟上 宏名 开始录制。假设我们想要将宏名命名为 b ，则按 Esc 和 qb 开始录制；<br>文本编辑ing……<br>按 q 停止录制。至此，宏的录制已完成。</p><p>宏的运行</p><p>按 @ 接 宏名 即可运行宏一次，按 次数 接 @宏名 重复运行宏多次。</p>]]></content>
    
    
    <categories>
      
      <category>Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geek</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu使用注意事项</title>
    <link href="/2021/03/10/ubuntu%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2021/03/10/ubuntu%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu使用的所有注意事项"><a href="#ubuntu使用的所有注意事项" class="headerlink" title="ubuntu使用的所有注意事项"></a>ubuntu使用的所有注意事项</h1><h1 id="软件相关"><a href="#软件相关" class="headerlink" title="软件相关"></a>软件相关</h1><h2 id="删除软件"><a href="#删除软件" class="headerlink" title="删除软件"></a>删除软件</h2><blockquote><p>我们都知道使用<code>apt remove apt-name</code>可以很快地删除软件包，<br>但是有时候软件还是会有残留。</p></blockquote><p>删除所有的软件数据残留:</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dpkg -l <span class="token operator">|</span><span class="token function">grep</span> ^rc<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$2</span>&#125;'</span> <span class="token operator">|</span><span class="token function">sudo</span> <span class="token function">xargs</span> dpkg -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="使用wine安装TIM"><a href="#使用wine安装TIM" class="headerlink" title="使用wine安装TIM"></a>使用wine安装TIM</h1><blockquote><p>全是血泪史</p></blockquote><h2 id="安装wine"><a href="#安装wine" class="headerlink" title="安装wine"></a>安装wine</h2><p>wine这个项目的<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu">地址仓库</a></p><p>然后按着文档进行仓库的克隆（<em>如果太慢的话就用<a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git">gitee的库</a></em>）</p><p>安装完成之后记得在终端中运行（授予可执行权限后）：<code>./install.sh</code></p><h2 id="安装TIM"><a href="#安装TIM" class="headerlink" title="安装TIM"></a>安装TIM</h2><blockquote><p>如果按着仓库地址上的说明，去这个地址：<a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/">https://mirrors.aliyun.com/deepin/pool/non-free/d/</a> 那么你就会发现这个镜像中并没有你想要的linux版本QQ之类的。</p></blockquote><p>通过寻找我们可以发现这个镜像链接已经搬到了 <a href="https://packages.deepin.com/deepin/pool/non-free/d/">https://packages.deepin.com/deepin/pool/non-free/d/</a></p><p><strong>接下来就是通过我们下载来的deb包进行安装，完成后就能使用TIM了</strong></p><h2 id="解决图像和下载文件问题"><a href="#解决图像和下载文件问题" class="headerlink" title="解决图像和下载文件问题"></a>解决图像和下载文件问题</h2><blockquote><p>如果你认为这就结束了，就大错特措了。</p></blockquote><p>linux上的TIM因为支持了IPv6，所以下载安装好的TIM并不能下载文件，所以我们还要更改一下网络设置，禁用IPv6（<em>具体可参考<a href="https://zhuanlan.zhihu.com/p/161392558">这篇文章</a></em>）</p><p>在<code>/etc/sysctl.conf</code>中进行编辑,添加以下内容：</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text"># IPv6 disablednet.ipv6.conf.all.disable_ipv6 &#x3D;1net.ipv6.conf.default.disable_ipv6 &#x3D;1net.ipv6.conf.lo.disable_ipv6 &#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="开机设置IPv6"><a href="#开机设置IPv6" class="headerlink" title="开机设置IPv6"></a>开机设置IPv6</h3><p>经过本人的测试，在一些情况下还是会有关闭了IPv6但是重启TIM之后还是无法下载文件的现象。于是我打算进行一个开机执行命令的操作，在每次开机之后就禁用IPv6。</p><ol><li>在/etc/init.d/ 中创建自己的开机运行脚本</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/init.d<span class="token function">sudo</span> <span class="token function">vim</span> /etc/init.d/mystart.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ol><li>然后写入你想要开机执行的命令：</li></ol><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token comment">### BEGIN INIT INFO</span><span class="token comment"># Provides:          RO</span><span class="token comment"># Required-Start:    $local_fs $network</span><span class="token comment"># Required-Stop:     $local_fs</span><span class="token comment"># Default-Start:     2 3 4 5</span><span class="token comment"># Default-Stop:      0 1 6</span><span class="token comment"># Short-Description: self define auto start</span><span class="token comment"># Description:       self define auto start</span><span class="token comment">### END INIT INFO</span><span class="token comment"># 上面的部分也必须写上，后面放上你需要开机执行的命令</span><span class="token function">sudo</span> sysctl -p<span class="token function">sudo</span> <span class="token function">rm</span> -rf ~/.deepinwine/Deepin-TIM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ol><li>修改脚本文件权限</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">755</span> /etc/init.d/mystart.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol><li>加入开机启动</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-rc.d mystart.sh defaults <span class="token number">90</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="TIM文件的存贮"><a href="#TIM文件的存贮" class="headerlink" title="TIM文件的存贮"></a>TIM文件的存贮</h2><blockquote><p>这下好了，我们可以下载文件了。心满意足之后你会想：我的文件到底下到哪里了？</p></blockquote><p>这里直接告诉你文件路径</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/你的用户名/.deepinwine/Deepin-TIM/drive_c/users/你的用户名/My Documents/Tencent Files/你的账号/FileRecv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>可参考<a href="https://blog.csdn.net/qq_33831360/article/details/90611943">这篇文章</a></p><h1 id="ubuntu应用图标的设置"><a href="#ubuntu应用图标的设置" class="headerlink" title="ubuntu应用图标的设置"></a>ubuntu应用图标的设置</h1><blockquote><p>你可能遇到这样的境遇，当我想要安装一个idea的时候，我发现安装好之后App列表竟然没有IDEA出现，咋办？</p></blockquote><p>咱们其实可以在<code>/usr/share/applications</code>目录下看到系统里所有的应用图标（<em>没错，你甚至可以更改系统图标的样式和属性</em>）</p><p>然后我们可以新建一个文件来配置咱们IDEA的图标：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> intellij-idea.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>然后加上相应的配置：</em></p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">[Desktop Entry]Name&#x3D;IntelliJ IDEAComment&#x3D;IntelliJ IDEAExec&#x3D;&#x2F;opt&#x2F;idea-IC-203.7148.57&#x2F;bin&#x2F;idea.shIcon&#x3D;&#x2F;opt&#x2F;idea-IC-203.7148.57&#x2F;bin&#x2F;idea.pngTerminal&#x3D;falseType&#x3D;ApplicationCategories&#x3D;Application;Development;IDE;StartupWMClass&#x3D;jetbrains-idea-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><font color=brown>当然，你必须要将IDEA正确的开启路径配置正确。</font>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#基础注意点</title>
    <link href="/2021/03/03/C-%E5%9F%BA%E7%A1%80%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <url>/2021/03/03/C-%E5%9F%BA%E7%A1%80%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="C-基础注意点"><a href="#C-基础注意点" class="headerlink" title="C#基础注意点"></a>C#基础注意点</h1><blockquote><p>C#和基本C的最大区别估计就在于取消了指针，不过这也让我们变轻松了（不用再管那些令人头疼的内存管理了），像Java那样采用了自动清理的方式。</p></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h2><p>除了我们熟悉的<code>float</code>和<code>double</code>这些浮点数类型（并非是真正的小数类型）外，C#提供了一种更高精度的小数类型——<code>decimal</code>，这种类型通常用于财务和金融计算领域。</p><p><em>ps：小数类型的数据需要使用m或者M作为后缀。</em></p><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p>我们常用的字符类型原来只能表示ascii码，但是C#将其扩展到了Unicode字符集。</p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>在C中，我们通常用0来表示false，非0表示true。但是C#直接将false和true常量化，不能转换成数值（更像是脚本了）。</p><h2 id="Var（js狂喜）"><a href="#Var（js狂喜）" class="headerlink" title="Var（js狂喜）"></a>Var（js狂喜）</h2><p>var关键字估计都很熟悉了，联系js就知道：当一个变量的<strong>类型无法确定时</strong>，我们可以用var来先声明一波（所以到底是静态还是动态语言啊╰(￣ω￣ｏ)）</p><p><em>经常用于foreach的循环语句中</em></p><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><p>我们常用的C系列的输入输出基本上就是scanf，printf，cin/cout了，但是C#作为一款集成项目开发的语言，其输入输出当然基本上就在控制台了。</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Console.WriteLine(&quot;Hello World!&quot;);&#x2F;&#x2F; 于是就输出了Hello World&#x2F;&#x2F; 要是用变量的话就这样格式输出Console.WriteLine(&quot;Day&#x3D;&#123;0&#125;, Month&#x3D;&#123;1&#125;&quot;, d, m);&#x2F;&#x2F; &#123;&#125;中的序号从0开始取后边的变量Console.WriteLine($&quot;Day&#x3D;&#123;d&#125;, Month&#x3D;&#123;m&#125;&quot;);&#x2F;&#x2F; 当然加上$之后就可以直接在括号中写上变量（类似插值表达式）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>一般来说<code>.NET</code>的控制台应用会在执行完项目之后立即结束，所以我们一般都看不到输出。我们可以利用Console的ReadKey方法输入单个字符来间接打断程序，造成程序的滞留。</em></p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Console.WriteLine($&quot;a &#x3D; &#123;a&#125;, b &#x3D; &#123;b&#125;&quot;);Console.ReadKey();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h1 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h1><h2 id="装箱（boxing）"><a href="#装箱（boxing）" class="headerlink" title="装箱（boxing）"></a>装箱（boxing）</h2><p>将值类型隐式地转换成object类型或任何该值类型所执行的接口类型。</p><p><strong>实质：数据在内存中存储方式发生了变换。</strong></p><h2 id="拆箱（unboxing）"><a href="#拆箱（unboxing）" class="headerlink" title="拆箱（unboxing）"></a>拆箱（unboxing）</h2><p>object类型显式地转换成值类型或者把任意接口类型转换成一个执行该接口的值类型。</p><h1 id="方法的注释"><a href="#方法的注释" class="headerlink" title="方法的注释"></a>方法的注释</h1><p>在<code>Main</code>（注意和基本C和Java不同，C#是大写的<code>Main</code>）之外，我们当然可以写一些其他的方法便于调用。但是对方法的描述也是很重要的，我们很希望在调用函数的时候VS就给我们提供关于这个方法的提示信息。于是诞生了方法前的注释。</p><p>通常为了和普通注释相区别，要写上<strong>三个斜杠</strong>(<code>/</code>)：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 对方法的描述&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;第一个形参&quot;&gt;对这个形参的描述&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;第二个形参&quot;&gt;对这个形参的描述&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;对返回值的描述&lt;&#x2F;returns&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="out和params"><a href="#out和params" class="headerlink" title="out和params"></a>out和params</h2><blockquote><p>数值类型数据想要在方法中更改他们的值时，必须要加上<code>ref</code>关键字，这是形参就是一个地址（相当于C++的引用）。</p></blockquote><p>而<code>out</code>和<code>params</code>都是处理多个返回值时的解决方案。</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static void GetSum(int a, out int b)&#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>传递b之后，b就相当于是一个返回值了。<em>而<code>params</code>是传入一个数组：</em></p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static void GetArr(string name, params int[] score)&#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong><code>out</code>是不需要初始化的</strong></p><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><blockquote><p>数组的初始化有4种写法（茴香豆的“茴”字有四种写法，造么？）</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[] arr1;int[] arr2 &#x3D; new int [10];int[] arr3 &#x3D; &#123;12, 24, 45&#125;;int[] arr4 &#x3D; new int[3] &#123;12, 24, 34&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>不得不承认，很像java语法了。</p><p><em>然后二维数组也是这么多种的初始化方式：</em></p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[,] arr1;int[,] arr2 &#x3D; new int[3,4];int[,] arr3 &#x3D; new int[,] &#123;&#123;1&#125;, &#123;1&#125;, &#123;1&#125;&#125;;int[,] arr4 &#x3D; new int[3, 1] &#123;&#123;1&#125;, &#123;1&#125;, &#123;1&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>需要注意的是，<strong>我们可以只声明一个二维数组的第一个维度，而空出第二个维度</strong>（和C的数组相适应）。于是每个二维数组里面的数组可以不同，这样不同的特殊数组成为<strong>锯齿数组</strong>。</p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>如果你只是用等号用一个数组对另一个数组进行赋值：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">arr2 &#x3D; arr1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这样只会让arr2的地址指向arr1（即引用赋值），其中一个变化另一个跟着变。<strong>而这一般不是我们所想要的。</strong>（究其本质是数组是一种引用类型）</p><p>另一种方法：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">arr1.CopyTo(arr2, 0);&#x2F;&#x2F; 第二个参数是从哪个索引号开始拷贝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>这样我们就可以得到一个独立的拷贝数组。</p><h1 id="关于字符串"><a href="#关于字符串" class="headerlink" title="关于字符串"></a>关于字符串</h1><blockquote><p>一定要搞清楚，char数组和字符串不是一种类型的数据！<br>一个是<code>char[]</code>，一个是<code>string</code>！</p></blockquote><p>将字符串变成字符数组：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">char[] arr &#x3D; str.ToCharArray();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>但是将字符数组转化成字符串：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string str &#x3D; new string(arr);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>查找字符的索引使用<code>IndexOf()</code>方法。</em></p><p><em>在索引位置插入字符使用<code>Insert()</code>方法。</em></p><p><em>替换指定字符用<code>Replace()</code>方法。</em></p><p><em>删除指定片段使用<code>Remove()</code>方法。</em></p><p><em>截取指定片段使用<code>Substring()</code>方法。</em></p><p><strong>字符串拼接最好还是用StringBuilder类的方法<code>Append()</code></strong>，而不是用<code>+=</code>。</p><h2 id="赋值-1"><a href="#赋值-1" class="headerlink" title="@赋值"></a>@赋值</h2><p>通常C#中的一个字符串中如果有转义字符的话，C#是会默认转义的，但是用了<code>@</code>之后就不需要转义路径中的特殊字符了。</p><p>eg:</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string str &#x3D; @&quot;\n&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="set和get"><a href="#set和get" class="headerlink" title="set和get"></a>set和get</h2><blockquote><p>记得python和js里面的set和get吧，看来C#偏向脚本化实锤了。</p></blockquote><p>如果我们在类中声明一个私有（<code>private</code>）的属性，就只可以用get和set方法和数据进行联系了。</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private string name;public string Name&#123;    get &#123; return name; &#125; &#x2F;&#x2F; 读操作    set &#123; name &#x3D; value; &#125; &#x2F;&#x2F; 写操作&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>于是产生了自动属性这种东西：</em></p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public char Gender &#123; get; set; &#125;  &#x2F;&#x2F; 自动属性<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这样声明之后，C#会自动帮我们创建并关联一个Gender相关的属性。（<em>通过反编译可以查看到</em>）</p><p><em>ps：按下<kbd>Ctrl</kbd>+<kbd>r</kbd>和<kbd>Ctrl</kbd>+<kbd>e</kbd>可以快速生成set和get方法</em></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p> 因为C#的继承和其他语言不太一样（但是还是C++形式），在此进行区分</p></blockquote><div class="table-container"><table><thead><tr><th>语言</th><th>继承形式</th></tr></thead><tbody><tr><td>C#</td><td>：</td></tr><tr><td>Java</td><td>extends</td></tr><tr><td>python</td><td>()</td></tr></tbody></table></div><h3 id="构造函数部分"><a href="#构造函数部分" class="headerlink" title="构造函数部分"></a>构造函数部分</h3><p>如果是想要在子类构造函数传递参数到父类中，则使用<code>base</code>：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public Student(string name, int age): base(name, age)&#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="sealed-amp-abstract"><a href="#sealed-amp-abstract" class="headerlink" title="sealed &amp; abstract"></a>sealed &amp; abstract</h3><p>很显然被<code>sealed</code>修饰的类是不能被继承的，但是abstract类作为抽象类又是必须被继承，所以两个可以一起记忆。</p><p><em>当然这对方法也同样适用。（被sealed修饰的方法一定是和override一起修饰）</em></p><h2 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h2><blockquote><p>因为java还没学到接口那里，所以暂时写详细一些(类只能单继承，但是接口可以多继承)</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">interface ISpeakabe&#123;    void &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>很多时候，一个接口很像一个抽象类，比如我们还是得去重写接口中的抽象方法。</p><h3 id="接口方法重名"><a href="#接口方法重名" class="headerlink" title="接口方法重名"></a>接口方法重名</h3><p>如果有两个接口，每一个都有一个交func的方法，那Student类继承这两个接口怎么分别去重写这两个方法呢？</p><p>C#采用的方法是像实例对象一样建立一个对应关系，然后这么写：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; 在类中显式实现接口方法public void interface1.func()&#123;&#125;public void interface2.func()&#123;&#125;&#x2F;&#x2F; 这两其实在重写方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="委托-delegate"><a href="#委托-delegate" class="headerlink" title="委托(delegate)"></a>委托(delegate)</h2><blockquote><p>个人感觉委托就像是python中的装饰器（其实不是，其实是类似于C中的函数指针）</p></blockquote><p>但是很怪的是，这种方式又是一种数据类型（类似于一种方法的引用），我们在建立一个委托时必须new一个（其实也可以不new），然后就是将必要的方法委托给委托。</p><p>委托的最大特点是可以使用<code>+=</code>运算符来委托多个方法，然后来决定每个方法的调用的顺序。</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">MyDelegate01 myDelegate01 &#x3D; M1;myDelegate01 +&#x3D; M4;myDelegate01 +&#x3D; M5;myDelegate01 +&#x3D; M6;myDelegate01();&#x2F;&#x2F; 则M1,M4,M5,M6会依次执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>当然我们还可以移除委托的方法，使用<code>-=</code></em></p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><blockquote><p>其实委托最强大的功能不是调用方法，而是配合匿名函数进行委托</p></blockquote><p>有一点ES6基础的同学都知道JS存在一种叫做箭头表达式的东西（好像是这么称呼的吧😶），这个Lambda表达式其实就是箭头表达式。</p><p>匿名函数优势：不用声明函数并为函数取名，直接再委托里面定义函数体和形参。</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">MyDelegate myDelegate &#x3D; new MyDelegate((msg) &#x3D;&gt; &#123;    ...&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="内置委托"><a href="#内置委托" class="headerlink" title="内置委托"></a>内置委托</h3><p>Action：无参数无返回值的委托<br>Action\<T\>:有参数无返回值的委托<br>Func\<T,T>:有参数有返回值的委托</p><p>直接看例子：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Func&lt;int, int&gt; func &#x3D; new Func&lt;int, int&gt;((n) &#x3D;&gt; n);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>个人感觉委托定义到了类中就变成了事件</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li>集合是用来管理多个数据的</li><li>常用集合类：ArrayList，Hashtable，Queue，Stack</li></ul><p>首先是ArrayList：</p><p>添加元素：<code>Add(data)</code>方法，可以添加任意数据类型的数据。然后<strong>只认单个元素</strong>（即如果插入数组，这个数组中的每个元素算一个数据。</p><p>插入元素：<code>Insert(location，data)</code>，</p><p>删除元素：<code>Remove(data)</code>，<code>RemoveAt(location)</code>，<code>RemoveRange(start, stop)</code></p><p>清楚所有元素：<code>Clear()</code></p><p>再说List：（泛型）</p><p>声明一个List：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">List&lt;int&gt; list &#x3D; new List&lt;int&gt;() &#123;1, 2, 3, 4&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>常用方法：<code>Max()</code>,<code>Min()</code>,<code>Average()</code>,<code>Sum()</code></p><p>使用<code>Contains()</code>来判断元素是否在List中（返回一个布尔值）</p><p>使用<code>Where(Lambda())</code>来选择出元素。</p><p>还有Dictionary：（泛型）</p><p>声明一个Dictionary：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Dictionary&lt;string, int&gt; dic &#x3D; new Dictionary&lt;string, int&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>添加数据：<code>Add(key, value)</code></p><p>判断数据是否在Dic内：<code>ContainKey(key)</code></p><p>遍历键：<code>foreach(string item in dic.Keys)</code>，当然还有<code>foreach(int item in dic.Values)</code></p><p>于是就有遍历键值对：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">foreach(KeyValuePair&lt;sting, int&gt; item in dic)&#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="窗体应用"><a href="#窗体应用" class="headerlink" title="窗体应用"></a>窗体应用</h1><p>首先要认知的一点是我们创建的所有控件都是在主窗口中（通常取名为<code>Form1</code>）的，然后我们可以用Program.cs文件来修改当前会运行的窗口程序。</p><h2 id="Form类"><a href="#Form类" class="headerlink" title="Form类"></a>Form类</h2><p>我们创建的窗口都是继承了这个类，其中定义了每个控件的功能，我们可以使用<code>this</code>来指向这个类，然后<code>this.Control</code>就是<strong>当前这个窗口中的所有控件</strong>（也就是说我们可以对<code>this.Control</code>来循环遍历，对每一个控件进行操控。</p><h2 id="列表框（List-Box）"><a href="#列表框（List-Box）" class="headerlink" title="列表框（List Box）"></a>列表框（List Box）</h2><p>常用属性：</p><ul><li>Items：存储列表中的内容。</li><li>SelectedItem：表示所选列表条目的内容</li><li>SelectedIndex：表示所选列表条目的序号</li><li>SelectedIndexChanged：当选择条目发生变化时触发</li></ul><h2 id="组合框（ComboBox）"><a href="#组合框（ComboBox）" class="headerlink" title="组合框（ComboBox）"></a>组合框（ComboBox）</h2><p>常用属性：</p><ul><li>DropDownStyle：确定组合框的显示类型。有三个值可选<ul><li>Simple：无下拉框，可编辑</li><li>DropDown：有下拉框，可编辑</li><li>DropDownList：有下拉框，不可编辑</li></ul></li><li>Items：存储下拉列表中的内容</li><li>SelectedItem：所选下拉列表条目的内容</li><li>SelectedIndex：所选下拉列表条目的序号</li></ul><p>产生一个新窗口（在有多个窗口的程序中）</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Form form2 &#x3D; new Form2();form2.Show();&#x2F;&#x2F; 关闭一个窗口form2.Close();&#x2F;&#x2F; 但是一般不这么关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="连接数据库-MS-SQL-Server"><a href="#连接数据库-MS-SQL-Server" class="headerlink" title="连接数据库(MS SQL Server)"></a>连接数据库(MS SQL Server)</h1><h2 id="数据库连接字符串"><a href="#数据库连接字符串" class="headerlink" title="数据库连接字符串"></a>数据库连接字符串</h2><p>一般格式：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string conStr &#x3D; &quot;Data Source&#x3D;DESKTOP-CC4F3VS;Initial Catalog&#x3D;MyDB01;Integrated Security&#x3D;True&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="使用using："><a href="#使用using：" class="headerlink" title="使用using："></a>使用using：</h2><p>可以使用<code>using</code>来进行暂用资源的创建和销毁（比如数据库的连接）:</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using (SqlConnection conn&#x3D;new SqlConnection(conStr))&#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>使用sql语句的套话：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string sql &#x3D; &quot;select * from table1&quot;;using (SqlCommand cmd &#x3D; new SqlCommand(sql, conn))&#123;    conn.Open();    int n &#x3D; cmd.ExecuteNonQuery();    if (n &gt; 0)&#123;        Console.WriteLine(&quot;成功查询了&#123;0&#125;条数据&quot;, n);    &#125;else&#123;        Console.WriteLine(&quot;查询失败。&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>C#最常见的文件操作就是使用文件流类了<code>FileStream</code>（类似于python）</p><p>eg.</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private void btn_write_Click(object sender, EventArgs e)&#123;    string path &#x3D; tbx_path.Text;    string content &#x3D; tbx_content.Text;    FileStream fsWriter &#x3D; new FileStream(path, FileMode.Create, FileAccess.Write);    byte[] array &#x3D; Encoding.UTF8.GetBytes(content);    fsWrite.Write(array, 0, array.Length);    MessageBox.Show(&quot;文件写入成功!&quot;);    fsWriter.Close();    fsWriter.Dispose();&#125;&#x2F;&#x2F; 这里的项目类型是窗体应用private void btn_read_Click(object sender, EventArgs e)&#123;    string path &#x3D; tbx_path.Text;    using (FileStream fsReader &#x3D; new FileSteam(path, FileMode.Open, FileAccess.Read))    &#123;        byte[] array &#x3D; new byte[1024];        fsReader.Read(array, 0, (int)fsReader.Length);        tbx_content.Text &#x3D; Encoding.UTF8.GetString(array);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java再学注意点</title>
    <link href="/2021/02/27/Java%E5%86%8D%E5%AD%A6%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <url>/2021/02/27/Java%E5%86%8D%E5%AD%A6%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Java再学注意点（持续更新）"><a href="#Java再学注意点（持续更新）" class="headerlink" title="Java再学注意点（持续更新）"></a>Java再学注意点（持续更新）</h1><blockquote><p>为什么要说“再学”？只因本人从大一上开始就断断续续的学习了java基础。但是因为一直没有在实战中使用（都知道代码不敲绝对会忘≡(▔﹏▔)≡），于是在此时决定系统性的认真学习一下。此笔记就成为了再学习的注意点总结<font color=brown>（注意这个笔记并不是Java教学笔记）</font>。（此笔记的参考主要来自和C系列语言的比较）</p></blockquote><h2 id="总体来说"><a href="#总体来说" class="headerlink" title="总体来说"></a>总体来说</h2><p>Java是95年诞生的，同时诞生的还有前端兄弟Javascript（<em>尽管是脚本语言</em>），python就相对早一点，诞生于91年。总体来说Java感觉上就是C系列语言的翻版（<em>毕竟就是静态语言，而且我就只学过C系列</em>），<strong>很多的东西和C是互通的</strong>。但感觉上有一点麻烦的是Java无时无刻不在体现它的<strong>面对对象的思想</strong>，以至于我发现一个简单的函数功能<strong>都必须在一个类中实现</strong>，感觉上是比C更为严格了（<em>不过规范毕竟还是有规范的好处</em>）。</p><h1 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h1><p>和C的“main函数”不同的是，Java直接将main这个程序入口函数<strong>完全整成了一个类的方法</strong>，这个类在一个项目（Project）中通常是叫做App.class（当然我们初学时可以随便起名，随便创建单文件程序）。</p><p><em>不得不说，从一个普通函数变成一个类的方法，Java中的main入口确实规范且生硬。于是乎就会出现这样的Java程序经典开头：</em></p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>其中要是加一句<code>System.out.println(&#39;Hello World!&#39;);</code>就是一个经典输出<code>Hello World</code>程序了。</p><h2 id="javac和java"><a href="#javac和java" class="headerlink" title="javac和java"></a>javac和java</h2><p>我们随便写的一个<code>.java</code>文件要想编译运行的话就得用上标题上的命令：<code>javac</code>和<code>java</code>。通过<code>javac</code>将<code>.java</code>文件编译成<code>.class</code>文件，然后<code>java</code>一波run就运行了这个程序。</p><h2 id="main入口参数"><a href="#main入口参数" class="headerlink" title="main入口参数"></a>main入口参数</h2><p>在学C的时候我们都知道main函数实际上是可以传递参数的（通过终端命令行），同样Java也可以这样，而且是十分显式的（<code>String[] args</code>)。这预示着我们可以传递字符串数组并进行相应的操作。</p><h1 id="IDEA的部分快捷键"><a href="#IDEA的部分快捷键" class="headerlink" title="IDEA的部分快捷键"></a>IDEA的部分快捷键</h1><ul><li><p><code>main</code></p><p>直接补全main方法结构</p></li><li><p><code>sout</code></p><p>补全<code>System.out.println();</code></p></li><li><p><kbd>Ctrl</kbd>+<kbd>w</kbd></p><p>选中word或整行</p></li><li><p><code>new ClassName</code>+<kbd>Alt</kbd>+<kbd>Enter</kbd></p><p>直接补全整个创建对象实例</p></li><li><p><kbd>Alt</kbd>+<kbd>Insert</kbd></p><p>呼出创建新文件的窗口</p></li><li><p><kbd>Alt</kbd>+<kbd>1</kbd></p><p>调出或关闭Project目录</p></li><li><p><kbd>Alt</kbd>+<kbd>4</kbd></p><p>调出或关闭run窗口</p></li></ul><h1 id="Java中的数组"><a href="#Java中的数组" class="headerlink" title="Java中的数组"></a>Java中的数组</h1><blockquote><p>很多人（包括我）学过C之后对Java的数组创建形式不太习惯，于是老是搞混（其实两种在Java中都是对的），还是细说一下比较好。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可以这样直接声明时赋值</span><span class="token comment">// 这样同样有两种方式</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 官方推荐写法</span><span class="token keyword">int</span> n2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// C语法写法</span><span class="token comment">/* 同时下面这一种IDEA还会警告C-style array declaration of local variable 'n2' */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>当然我们还可以先声明：</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 这里写法类似创建对象实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><em>不过这里我们依然还是要指明数组中的元素个数，也就是说无论用以上哪种写法，我们都必须要将数组的分配空间确定下来（或许之后或有一种方法来完成类似C中的动态分配？）</em></p><h1 id="Java中的’函数’"><a href="#Java中的’函数’" class="headerlink" title="Java中的’函数’"></a>Java中的’函数’</h1><blockquote><p>总所周知，Java是没有函数这个说法的，于是就造成了很多的麻烦。比如说在C和Python中可以自定义函数，于是可以随意调用函数实现简单程序的封装。不过，Java还是可以使用‘函数’的思想的。</p></blockquote><p>如果我们在一个类上写了一个静态(static)的方法(<em>当然前提是在一个模块中</em>)，然后我们就可以在这个文件中调用方法，此时完成了类似C或者Python中函数的作用。</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这样调用</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当然得是静态方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><em>你可以理解成这个静态方法是类方法，而不是对象的方法。普通的类方法是需要实例化出一个对象然后通过对象来调用。</em></p><p>当然，既然是类的方法，我在类里面直接调用绝对是可行的：</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在同一个类中，方法调方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 真 - 直接调</span><span class="token punctuation">&#125;</span><span class="token comment">// 同时在一个类中，非静态也可‘真直调’</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 但这种是错的！</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这个是调不了的</span><span class="token punctuation">&#125;</span><span class="token comment">// 因为静态方法的时间周期是和类一样的，但是非静态会迟一些</span><span class="token comment">// 所以调不出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（extends）</h1><p>既然是面向对象，肯定是少不了封装，继承，多态。<br>然而Java中的继承和C++并不相同，Java中类只能单继承，而C++是可以多重继承的。<strong>However，接口是可以多继承的。</strong></p><h2 id="子类的构造器"><a href="#子类的构造器" class="headerlink" title="子类的构造器"></a>子类的构造器</h2><p>当创建一个子类的对象实例时，会自动调用子类相应的构造函数，同时也会自动调用父类的<strong>无参构造函数</strong>（注意，顺序是先父类再子类）。</p><p>如果在这种情况下，你想要手动调用父类的有参构造，就必须将这条代码写到子类构造函数的第一条。</p><p><strong><em>如果定义了有参构造函数，最好是在父类中写上无参构造（或者每个类定义一个无参构造</em></strong></p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ol><li><code>super</code>调用父类的构造方法，必须在构造方法的第一个。</li><li><code>super</code>必须只能出现在子类的方法或者构造方法中。</li><li><code>super</code>和<code>this</code>不能同时调用构造方法！</li></ol><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>当子类继承了父类，子类就可以调用父类的方法了，当然子类还可以重写（override）父类的方法。</p><p><strong><em>此处需要注意的是当要重写的方法是静态（static）方法时，此时并不是重写，而是在子类中声明了一个类方法（静态方法本来就是类方法）。</em></strong></p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// package com.oop.a;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// package com.oop.b;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// import com.oop.b.B;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用的A</span>                <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用的B</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX入门</title>
    <link href="/2021/01/22/LaTeX%E5%85%A5%E9%97%A8/"/>
    <url>/2021/01/22/LaTeX%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="初识-LaTeX"><a href="#初识-LaTeX" class="headerlink" title="初识$\LaTeX$"></a>初识$\LaTeX$</h1><blockquote><p>首先你要知道LaTeX最初是作为<strong>排版工具</strong>被发明出来的</p><p>warning：<strong>标注有<code>*</code>的内容是专有的LaTeX环境，但md环境无法正确显示</strong></p></blockquote><h2 id="安装-LaTeX"><a href="#安装-LaTeX" class="headerlink" title="安装$\LaTeX$"></a>安装$\LaTeX$</h2><blockquote><p>首先LaTeX的安装还是有些麻烦的（主要是要安装编译器和TeX）</p></blockquote><p>这里有一篇推荐教你如何安装的<a href="https://zhuanlan.zhihu.com/p/56982388">知乎文章</a></p><h2 id="关于md支持-LaTeX-的澄清"><a href="#关于md支持-LaTeX-的澄清" class="headerlink" title="关于md支持$\LaTeX$的澄清"></a>关于md支持$\LaTeX$的澄清</h2><p><strong>首先并不是md文本支持$\LaTeX$排版，<u>而是md内置引擎支持$\LaTeX$的数学公式。</u></strong></p><font color=#34b>往细了说，就是md用`$`的书写方式制造的LaTeX其实是LaTeX的`displaymath`的环境（只是众多环境中的一种）。所以也就是说，在`displaymath`环境下能够书写的LaTeX格式，在md中就能展示（也只能展示这种环境）</font><p>所以，打<code>*</code>的地方其实也可以理解为<code>displaymath</code>环境不支持。</p><h2 id="空白距离"><a href="#空白距离" class="headerlink" title="空白距离*"></a>空白距离*</h2><p>空格和制表符等空白字符在LaTeX 中被看作相同的空白距离(space)。<strong>多个连续</strong>的空白字符等同于<strong>一个空白字符</strong>。在句首的空白距离一般会被忽略，单个空行也被认为是一个“空白距离”。</p><p><em>两行文本间的空白行</em>标志着上段的结束和下段的开始。<strong>多</strong>个空白行的作用等同于<strong>一个空白行</strong>。</p><p><em>PS：这里是专有的LaTeX环境下，但是md环境中的渲染引擎<u>无视一切空格</u></em></p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>下面的这些字符是LATEX 中的<strong>保留字符</strong>(reserved characters)，它们或在LATEX 中 有特殊的意义，或不一定存在于所有字库中。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"># $ <span class="token comment">% ^ &amp; _ &#123; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>在这些字符前加上反斜线，它们就可以正常的输出到文档中。(转义)</p><p><em>ps：反斜线<code>\</code>不能通过在其前面加另一个反斜线得到<code>\\</code>；这是一个用来换行的命令</em></p><h2 id="LaTeX命令"><a href="#LaTeX命令" class="headerlink" title="LaTeX命令"></a>LaTeX命令</h2><p>LATEX 命令(commands) 是大小写敏感的，有以下两种格式：</p><ul><li>以一个反斜线(backslash) \ 开始，命令名只由字母组成。命令名后的空格 符、数字或任何非字母的字符都标志着该命令的结束。</li><li>由一个反斜线和非字母的字符组成。</li></ul><p>warning*：LATEX忽略命令之后的空白字符。如果你希望在命令后得到一个空格，可以 在命令后加上<code>&#123;&#125;</code>和一个空格，或加上一个特殊的空格命令。<code>&#123;&#125;</code> 将阻止LATEX吃掉命令后的所有空格。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\TeX</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token function selector">\backslash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><script type="math/tex; mode=display">\TeX{} \backslash</script><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>有些命令需要一个参数(parameter)，该参数用花括号(curly braces) { } 括 住并写在命令的后面。一些命令支持可选参数(optional parameters)，可选参数 可用方括号(square brackets) [ ] 括住。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\textsl</span><span class="token punctuation">&#123;</span>斜体<span class="token punctuation">&#125;</span><span class="token comment">% md无法显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>LaTeX的注释和MATLAB居然都是一样的，都是用<code>%</code>。</p><p><em>符号<code>%</code>也可以用来断开不能含有空白字符或换行符的较长输入内容。</em></p><h1 id="文档布局"><a href="#文档布局" class="headerlink" title="文档布局"></a>文档布局</h1><h2 id="文档类"><a href="#文档类" class="headerlink" title="文档类"></a>文档类</h2><p>当LATEX 处理源文件时，首先需要知道的就是作者所要创建的文档类型。文档类 型可由\documentclass 命令来指定。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>class 指定想要的文档类型。通过options 参数可以定制文档类的属性。</strong>eg：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>11pt,twoside,a4paper<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">article</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这条命令会引导LATEX 使用article 格式、11 磅大小的字体来排版该文档，并得到在A4 纸上双面打印的效果。</p><div class="table-container"><table><thead><tr><th>文档类名（class）</th><th>简单描述</th></tr></thead><tbody><tr><td>article</td><td>排版科学期刊、演示文档、短报告、程序文档、邀请函……</td></tr><tr><td>proc</td><td>一个基于 article 的会议文集类。</td></tr><tr><td>minimal</td><td>非常小的文档类。只设置了页面尺寸和基本字体。主要用来查错。</td></tr><tr><td>report</td><td>排版多章节长报告、短篇书籍、博士论文……</td></tr><tr><td>book</td><td>排版书籍。</td></tr><tr><td>slides</td><td>排版幻灯片。该文档类使用大号 sans serif 字体。也可以选用 FoilTEXa 来得到相同的效果。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>文档类选项（option）</th><th>简单描述</th></tr></thead><tbody><tr><td>10pt, 11pt, 12pt</td><td>设置文档中所使用的字体的大小。如果该项没有指定，默认 使用10pt 字体。</td></tr><tr><td>a4paper, letterpaper, . . .</td><td>定义纸张的尺寸。缺省设置为letterpaper。此 外，还可以使用a5paper, b5paper, executivepaper 以及legalpaper。</td></tr><tr><td>fleqn</td><td>设置行间公式为左对齐，而不是居中对齐。</td></tr><tr><td>leqno</td><td>设置行间公式的编号为左对齐，而不是右对齐。</td></tr><tr><td>titlepage, notitlepage</td><td>指定是否在文档标题(document title) 后另起一 页。article 文档类缺省设置为不开始新页，report 和book 类则相反。</td></tr><tr><td>onecolumn, twocolumn</td><td>LATEX 以单栏(one column) 或双栏(two column) 的 方式来排版文档。</td></tr><tr><td>twoside, oneside</td><td>指定文档为双面或单面打印格式。article 和report 类 为单面(single sided) 格式，book 类缺省为双面(double sided) 格式。</td></tr><tr><td>landscape</td><td>将文档的打印输出布局设置为 landscape 模式。</td></tr><tr><td>openright, openany</td><td>决定新的一章仅在奇数页开始还是在下一页开始。在文 档类型为article 时该选项不起作用，因为该类中没有定义“章” (chapter)。report 类默认在下一页开始新一章而book 类的新一章总是在 奇数页开始。</td></tr></tbody></table></div><h2 id="宏包"><a href="#宏包" class="headerlink" title="宏包"></a>宏包</h2><p>排版文档时，你可能会发现某些时候基本的LATEX 并不能解决你的问题。如果想 插入图形(graphics)、彩色文本(coloured text) 或源代码到你的文档中，你就需要使用宏包来增强LATEX 的功能。可使用如下命令调用宏包</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">package</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这里package 是宏包的名称，options 是用来激活宏包特殊功能的一组关键词。很 多宏包随LATEX 基本发行版一起发布（见下表）</p><div class="table-container"><table><thead><tr><th>宏包名（package）</th><th>简单描述</th></tr></thead><tbody><tr><td>doc</td><td>排版LATEX 的说明文档。</td></tr><tr><td>exscale</td><td>提供了按比例伸缩的数学扩展字体。</td></tr><tr><td>fontenc</td><td>指明使用哪种LATEX 字体编码(font encoding)。</td></tr><tr><td>ifthen</td><td>提供如下形式的命令 ‘if . . . then do . . . otherwise do . . . .’</td></tr><tr><td>latexsym</td><td>提供LATEX 符号字体。</td></tr><tr><td>makeidx</td><td>提供排版索引的命令。</td></tr><tr><td>syntonly</td><td>编译文档而不生成 dvi 文件（常用于查错）。</td></tr><tr><td>inputenc</td><td>指明使用哪种输入编码，如 ASCII, ISO Latin-1, ISO Latin-2…..</td></tr></tbody></table></div><h2 id="页面样式"><a href="#页面样式" class="headerlink" title="页面样式"></a>页面样式</h2><p>LATEX 支持三种预定义的页眉/页脚(header/footer) 样式，称为页面样式(page style)。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\pagestyle</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><div class="table-container"><table><thead><tr><th>页面样式名（style）</th><th>简单描述</th></tr></thead><tbody><tr><td>plain</td><td>在页脚正中显示页码。这是页面样式的缺省设置。</td></tr><tr><td>headings</td><td>在页眉中显示章节名及页码，页脚空白。</td></tr><tr><td>empty</td><td>将页眉页脚都设为空白。</td></tr></tbody></table></div><p> <em>可以通过如下命令来改变<u>当前页面</u>的页面样式：</em></p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\thispagestyle</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="LaTeX文件"><a href="#LaTeX文件" class="headerlink" title="LaTeX文件"></a>LaTeX文件</h2><p>LaTeX有着非常多的不同的扩展名：</p><div class="table-container"><table><thead><tr><th>扩展名</th><th>简单描述</th></tr></thead><tbody><tr><td>.tex</td><td>LATEX 或TEX 源文件。可以使用latex 命令编译。</td></tr><tr><td>.sty</td><td>LATEX 宏包文件。可以使用\usepackage 命令将宏包文件载入到你的LATEX 文档中。</td></tr><tr><td>.dtx</td><td>文档化TEX 文件。这是LATEX 宏包文件的主要发布格式。如果编译.dtx 文 档，将会得到其中包含的LATEX 宏包文件的文档化宏代码。</td></tr><tr><td>.ins</td><td>对应.dtx 文件的安装文件。如果你从网上下载了一个LATEX 的宏包文件， 其中一般会包含一个.dtx 文件和一个.ins 文件。使用LATEX 处理.ins 文 件可以解开.dtx 文件。</td></tr><tr><td>.cls</td><td>定义文档外观形式的类文件，可以通过使用\documentclass 命令选取。</td></tr><tr><td>.fd</td><td>字体描述文件，可以告诉LATEX 有关新字体的信息。</td></tr></tbody></table></div><p>下面是LaTeX编译源文件时产生的文件和扩展名：</p><div class="table-container"><table><thead><tr><th>扩展名</th><th>简单描述</th></tr></thead><tbody><tr><td>.dvi</td><td>设备无关文件。这是运行LATEX 编译的主要结果。你可以使用 DVI 预览器 预览其内容或使用dvips 或其他程序输出到打印机。</td></tr><tr><td>.log</td><td>记录了上次编译时的详细信息。</td></tr><tr><td>.toc</td><td>储存了所有的章节标题。下次编译时将读取该文件并生成目录。</td></tr><tr><td>.lof</td><td>和.toc 文件类似，可生成图形目录。</td></tr><tr><td>.lot</td><td>和.toc 文件类似，可生成表格目录。</td></tr><tr><td>.aux</td><td>用来向下次编译传递信息的辅助文件。主要储存交叉引用的相关信息。</td></tr><tr><td>.idx</td><td>如果文档中包含索引，LATEX 将使用该文件存储所有的索引词条。此文件 需要使用makeindex 处理</td></tr><tr><td>.ind</td><td>处理过的.idx 文件。下次编译时将读入到你的文档中。</td></tr><tr><td>.ilg</td><td>和.log 文件类似，记录了makeindex 命令运行的详细信息。</td></tr></tbody></table></div><h1 id="文本排版"><a href="#文本排版" class="headerlink" title="文本排版"></a>文本排版</h1><h2 id="文本和语言结构"><a href="#文本和语言结构" class="headerlink" title="文本和语言结构"></a>文本和语言结构</h2><p>LATEX 不同于其它排版系统之处在于，你必须告诉它文本的逻辑和语义结构。然后它根据类文件和各种样式文件中给定的“规则”生成相应格式的文本。</p><p>LATEX 最重要的文本单元（印刷术上的）是段落(paragraph)。我们称段落 为“文本单元”，因为段落是连续思想或者观点在排版上的反映。</p><h2 id="断行和分页"><a href="#断行和分页" class="headerlink" title="断行和分页*"></a>断行和分页*</h2><h3 id="对齐段落"><a href="#对齐段落" class="headerlink" title="对齐段落"></a>对齐段落</h3><p>为了优化整个段落的内容，LATEX 在单词之间 插入必要的断行点(line break) 和间隙。如果一行的单词排不下，LATEX 也会进 行必要的断词。段落如何排版依赖于文档类别。通常，每一段的第一行有缩进， 在两段之间没有额外的间隔。</p><p>在特殊情形下，有必要命令LATEX 断行:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token comment">% 另起一行，而不另起一段:</span><span class="token function selector">\\</span> or <span class="token function selector">\newline</span><span class="token comment">% 在强制断行后，还禁止分页:</span><span class="token function selector">\\</span>*<span class="token comment">% 另起一页:</span><span class="token function selector">\newpage</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="断词"><a href="#断词" class="headerlink" title="断词"></a>断词</h3><p>必要时LATEX 就会断词。如果断词算法不能确定正确的断词点，可以使用如下命 令告诉TEX 如何弥补这个缺憾：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\hyphenation</span><span class="token punctuation">&#123;</span>word list<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="内置字符串"><a href="#内置字符串" class="headerlink" title="内置字符串"></a>内置字符串</h2><p>用来排版特殊文本字符串的一些非常简单的LATEX 命令:</p><div class="table-container"><table><thead><tr><th>命令</th><th>显示</th></tr></thead><tbody><tr><td><code>\today</code></td><td>August 2, 2008(*)</td></tr><tr><td><code>\TeX</code></td><td>$\TeX$</td></tr><tr><td><code>\LaTeX</code></td><td>$\LaTeX$</td></tr><tr><td><code>\LaTeXe</code></td><td>$\LaTeX$2ε(*)</td></tr></tbody></table></div><h2 id="特殊字符和符号"><a href="#特殊字符和符号" class="headerlink" title="特殊字符和符号"></a>特殊字符和符号</h2><h3 id="引号"><a href="#引号" class="headerlink" title="引号*"></a>引号*</h3><p>你不能再像在打字机上那样，把” 用作引号(quotation marks)。在印刷中有专门 的左引号和右引号。在LATEX 中，用两个`（重音）产生左引号，用两个（’ 直立引 号）产生右引号。一个‘ 和一个’ 产生一个单引号。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">‘‘Please press the ‘x’ key.’’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><script type="math/tex; mode=display">‘‘Please press the ‘x’ key.’’</script><h3 id="破折号和连字号"><a href="#破折号和连字号" class="headerlink" title="破折号和连字号*"></a>破折号和连字号*</h3><p>LATEX 中有四种短划(dash) 标点符号。连续用不同数目的短划，可以得到其中的 三种。第四个实际不是标点符号，它是数学中的减号：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">daughter-in-law, X-rated<span class="token function selector">\\</span>pages 13--67<span class="token function selector">\\</span>yes---or no? <span class="token function selector">\\</span><span class="token equation string">$0$</span>, <span class="token equation string">$1$</span> and <span class="token equation string">$-1$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">daughter-in-law, X-ratedpages 13–67yes——or no?0, 1 and −1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="波浪号-∼"><a href="#波浪号-∼" class="headerlink" title="波浪号(∼)*"></a>波浪号(∼)*</h3><p>波浪号经常和网址用在一起。它在LATEX 中，可用~ 产生，但其结果：˜ 却不是</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">http://www.rich.edu/<span class="token function selector">\~</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>bush<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">http:&#x2F;&#x2F;www.rich.edu&#x2F;˜bush<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="度的符号-◦"><a href="#度的符号-◦" class="headerlink" title="度的符号(◦)"></a>度的符号(◦)</h3><p>下面的例子演示了在LATEX 中如何排版度的符号(degree symbol)：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">It’s <span class="token equation string">$-30<span class="token equation-command regex">\,</span>^&#123;<span class="token equation-command regex">\circ</span>&#125;<span class="token equation-command regex">\mathrm</span>&#123;C&#125;$</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>It’s $-30\,^{\circ}\mathrm{C}$.</p><p><em>textcomp 宏包里有另外一个度的符号<code>\textcelsius</code>。</em></p><h3 id="省略号"><a href="#省略号" class="headerlink" title="省略号(. . . )"></a>省略号(. . . )</h3><p>在打字机上，逗号(comma) 或句号(period) 占据的空间和其他字母相等。<strong>在书籍印刷中，这些字符仅占据一点儿空间</strong>。所以不 能只键入三个点来输出“省略号”(ellipsis)，因为间隔划分得不对。有一个专门 的命令输出省略号。它被称为:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\ldots</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>效果：$\ldots$</p><h3 id="连字"><a href="#连字" class="headerlink" title="连字*"></a>连字*</h3><p>一些字母组合不是简单键入一个个字母得到得的，而实际上用到了一些特殊符号。</p><p>在两个字母之间插入一个<code>\mbox&#123;&#125;</code>，可以禁止连字。</p><h3 id="注音符号和特殊字符"><a href="#注音符号和特殊字符" class="headerlink" title="注音符号和特殊字符"></a>注音符号和特殊字符</h3><p>LATEX 支持来自许多语言中的注音符号(accent) 和特殊字符(special character)。</p><p><strong>在字母 i 和 j 上标一个注音符号，它的点儿必须去掉。这个可由<code>\i</code> 和<code>\j</code>做 到。</strong></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122135744081.png" alt=""></p><h2 id="标题、章和节"><a href="#标题、章和节" class="headerlink" title="标题、章和节*"></a>标题、章和节*</h2><blockquote><p>为便于读者理解，应该把文档划分为章，节和子节。LATEX 用专门的命令支持 这个工作，这些命令把节的标题作为参量。</p></blockquote><p>对article 风格的文档，有下列分节命令：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">...</span><span class="token punctuation">&#125;</span><span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">...</span><span class="token punctuation">&#125;</span><span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">...</span><span class="token punctuation">&#125;</span><span class="token function selector">\paragraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">...</span><span class="token punctuation">&#125;</span><span class="token function selector">\subparagraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>如果想把文档分成几个部分而且不影响章节编号，你可以使用:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\part</span><span class="token punctuation">&#123;</span><span class="token headline class-name">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>当你使用report 或者book 类的时候，可以用另外一个高层次的分节命令:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\chapter</span><span class="token punctuation">&#123;</span><span class="token headline class-name">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>整篇文档的标题(title) 由命令:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\maketitle</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>标题的内容必须在调用\maketitle 以前，由命令:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\title</span><span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span>, <span class="token function selector">\author</span><span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span> 和可选的<span class="token function selector">\date</span><span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用*"></a>交叉引用*</h2><p>在书籍、报告和论文中，需要对图、表和文本的特殊段落进行交叉引用(crossreferences)。LATEX 提供了如下交叉引用命令:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">marker</span><span class="token punctuation">&#125;</span>, <span class="token function selector">\ref</span><span class="token punctuation">&#123;</span><span class="token keyword">marker</span><span class="token punctuation">&#125;</span> 和<span class="token function selector">\pageref</span><span class="token punctuation">&#123;</span>marker<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>其中marker 是用户选择的标识符。</em></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注*"></a>脚注*</h2><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\footnote</span><span class="token punctuation">&#123;</span>footnote text<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>eg：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">Footnotes<span class="token function selector">\footnote</span><span class="token punctuation">&#123;</span>This is a footnote.<span class="token punctuation">&#125;</span> are often used by people using <span class="token function selector">\LaTeX</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="强调"><a href="#强调" class="headerlink" title="强调*"></a>强调*</h2><p>如果文本是用打字机键入的，<u>用下划线</u>来强调重要的单词。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\underline</span><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>但是在印刷的书中，用一种斜体字体排印要强调的单词。LATEX 提供命令:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\emph</span><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="环境-environment"><a href="#环境-environment" class="headerlink" title="环境(environment)"></a>环境(environment)</h2><p>为了排版专用的文本，LATEX 定义了各种不同格式的环境(environment)：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">environment</span><span class="token punctuation">&#125;</span> text <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">environment</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>其中environment 是环境的名称。只要保持调用顺序，环境可以嵌套。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">aaa</span><span class="token punctuation">&#125;</span>...<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">bbb</span><span class="token punctuation">&#125;</span>...<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">bbb</span><span class="token punctuation">&#125;</span>...<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">aaa</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="Itemize、Enumerate、Description"><a href="#Itemize、Enumerate、Description" class="headerlink" title="Itemize、Enumerate、Description*"></a>Itemize、Enumerate、Description*</h3><p>itemize 环境适用于简单的列表，enumerate 环境适用于有排列序号的列表， 而description 环境用于带描述的列表。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\flushleft</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">enumerate</span><span class="token punctuation">&#125;</span><span class="token function selector">\item</span> You can mix the listenvironments to your taste:<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">itemize</span><span class="token punctuation">&#125;</span><span class="token function selector">\item</span> But it might start tolook silly.<span class="token function selector">\item</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> With a dash.<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">itemize</span><span class="token punctuation">&#125;</span><span class="token function selector">\item</span> Therefore remember:<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">description</span><span class="token punctuation">&#125;</span><span class="token function selector">\item</span><span class="token punctuation">[</span>Stupid<span class="token punctuation">]</span> things will notbecome smart because they arein a list.<span class="token function selector">\item</span><span class="token punctuation">[</span>Smart<span class="token punctuation">]</span> things, though,can be presented beautifullyin a list.<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">description</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">enumerate</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>效果：</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">1. You can mix the list environments to your taste:• But it might start to look silly.- With a dash.2. Therefore remember:Stupid things will not become smart because they are  in a list.Smart things, though, can bepresented beautifully in a list.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="左对齐、右对齐和居中"><a href="#左对齐、右对齐和居中" class="headerlink" title="左对齐、右对齐和居中*"></a>左对齐、右对齐和居中*</h3><p>flushleft 和flushright 环境分别产生左对齐(left-aligned) 和右对齐(rightaligned) 的段落。center 环境产生居中的文本。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">flushleft</span><span class="token punctuation">&#125;</span>This text is<span class="token function selector">\\</span> left-aligned.<span class="token function selector">\LaTeX</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> is not trying to makeeach line the same length.<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">flushleft</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">flushright</span><span class="token punctuation">&#125;</span>This text is right-<span class="token function selector">\\</span>aligned.<span class="token function selector">\LaTeX</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> is not trying to makeeach line the same length.<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">flushright</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span>At the centre<span class="token function selector">\\</span>of the earth<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="引用、语录和韵文"><a href="#引用、语录和韵文" class="headerlink" title="引用、语录和韵文*"></a>引用、语录和韵文*</h3><p>quote 环境可以用于引文、语录和例子:</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">A typographical rule of thumbfor the line length is:<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">quote</span><span class="token punctuation">&#125;</span>On average, no line shouldbe longer than 66 characters.<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">quote</span><span class="token punctuation">&#125;</span>This is why <span class="token function selector">\LaTeX</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> pages havesuch large borders by defaultand also why multicolumn printis used in newspapers.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>有两个类似的环境：quotation 和verse 环境。quotation 环境用于超过 几段的较长引用，因为它对段落进行缩进。verse 环境用于诗歌，在诗歌中断行 很重要。在一行的末尾用<code>\\</code> 断行，在每一段后留一空行。</em></p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要*"></a>摘要*</h3><p>一般abstract 用于 article 类文档。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">abstract</span><span class="token punctuation">&#125;</span>The abstract abstract.<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">abstract</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><blockquote><p>在这里才是$\TeX$真正强大的地方。</p></blockquote><p>LATEX 使用一种特有的模式来排版数学(mathematics) 公式。数学公式允许以 行间形式排版在一个段落之中，也可以以独立形式排版，此时段落可能会被拆 开。处于段内的数学文本要放在<code>\(</code> 与<code>\)</code> 之间，$ 与$ 之间，或者<code>\begin&#123;math&#125;</code>与<code>\end&#123;math&#125;</code> 之间。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">Add <span class="token equation string">$a$</span> squared and <span class="token equation string">$b$</span> squaredto get <span class="token equation string">$c$</span> squared. Or, usinga more mathematical approach:<span class="token equation string">$c^&#123;2&#125;=a^&#123;2&#125;+b^&#123;2&#125;$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>Add $a$ squared and $b$ squared to get $c$ squared. Or, using a more mathematical approach: $c^{2}=a^{2}+b^{2}$</p><p>当你希望把自己的一些较长的数学方程或是公式单独的放在段落之外的时 候，那么你最好显示 (display) 它们，而不要拆开此段落。为此，你可以把它们 放在<code>\[</code>与<code>\]</code>之间，或者<code>\begin&#123;displaymath&#125;</code> 与<code>\end&#123;displaymath&#125;</code> 之间。(<em><font color=brown>md默认块就是<code>displaymath</code>环境</font></em>)</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">Add <span class="token equation string">$a$</span> squared and <span class="token equation string">$b$</span> squaredto get <span class="token equation string">$c$</span> squared. Or, usinga more mathematical approach:<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span>c^<span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span>=a^<span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span>+b^<span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span>or you can type less with:<span class="token equation string">\[a+b=c\]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>如果你希望LATEX 给你的方程编上号，你可以使用equation 环境。然后你 就可以用\label 来给一个方程加上标签并在文中的某处用\ref 或amsmath 宏 包中的\eqref 命令来引用它。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">equation</span><span class="token punctuation">&#125;</span><span class="token equation string"> <span class="token equation-command regex">\label</span>&#123;eq:eps&#125;<span class="token equation-command regex">\epsilon</span> > 0</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">equation</span><span class="token punctuation">&#125;</span>From (<span class="token function selector">\ref</span><span class="token punctuation">&#123;</span><span class="token keyword">eq:eps</span><span class="token punctuation">&#125;</span>), we gather<span class="token function selector">\ldots</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>From <span class="token function selector">\eqref</span><span class="token punctuation">&#123;</span>eq:eps<span class="token punctuation">&#125;</span> wedo the same.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>注意一下公式排版样式的不同，<code>$</code>是行间式样，<code>\begin&#123;displaymath&#125;</code>是显示式样。</p><h2 id="数学模式的群组"><a href="#数学模式的群组" class="headerlink" title="数学模式的群组"></a>数学模式的群组</h2><p>大部分数学模式的命令只对其后的一个字符有效，因此，如果你希望一个命令对 多个字符起作用，你必须把它们放在一个群组中，使用花括号：{…}.</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">equation</span><span class="token punctuation">&#125;</span><span class="token equation string">a^x+y <span class="token equation-command regex">\neq</span> a^&#123;x+y&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">equation</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="数学公式的基本元素"><a href="#数学公式的基本元素" class="headerlink" title="数学公式的基本元素(!)"></a>数学公式的基本元素(!)</h2><blockquote><p><strong>即将介绍数学排版中的<u>最重要的一些命令</u></strong>，也是md中最重要的</p><p>你可以先记住<code>\</code>是一个神奇的符号</p></blockquote><p><strong>小写希腊字母</strong> (Greek letters) 的输入为<code>\alpha</code>、<code>\beta</code>、<code>\gamma</code>……，大 写字母的输入为<code>\Gamma</code>、<code>\Delta</code>…….</p><p><strong>指数和下标</strong>可以能过使用<code>^</code> 和<code>_</code>两个符号来指定。</p><p><strong>平方根</strong> (square root) 输入用<code>\sqrt</code>；n 次根用<code>\sqrt[n]</code> 来得到。根号的大小由LATEX自动决定。如果仅仅需要根号，可以用<code>\surd</code> 得到。</p><p>命令<code>\overline</code> 和<code>\underline</code> 产生<strong>水平线</strong>，它们会被放在表达式的正上方 或是正下方。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$<span class="token equation-command regex">\overline</span>&#123;m+n&#125;$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><script type="math/tex; mode=display">\overline{m+n}</script><p>命令<code>\overbrace</code> 和<code>\underbrace</code>可以在一个表达式的上方或下方生成<strong>水平括号</strong></p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$<span class="token equation-command regex">\underbrace</span>&#123;a+b+<span class="token equation-command regex">\cdots</span>+z&#125;_&#123;26&#125;$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><script type="math/tex; mode=display">\underbrace{a+b+\cdots+z}_{26}</script><p>为了给变量增加数学重音符号，如小箭头或是˜(tilde)，可以用之后的命令。覆盖多个字符的宽“帽子”和宽˜号，可以由<code>\widehat</code> 和<code>\widetilde</code> 得到。<code>’</code>符号则给出了一个撇号(prime)。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span>y=x^<span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span><span class="token function selector">\qquad</span> y’=2x<span class="token function selector">\qquad</span> y’’=2<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">y=x^{2}\qquad y’=2x\qquad y’’=2</script><p><strong>向量</strong>可以通过在一个变量上方添加小箭头(arrow symbols) 来指定。为此， 使用<code>\vec</code> 命令即可。<code>\overrightarrow</code> 和<code>\overleftarrow</code> 这两个命令可以用来表示一个从 A 到 B 的向量。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token function selector">\vec</span> a<span class="token function selector">\quad</span><span class="token function selector">\overrightarrow</span><span class="token punctuation">&#123;</span>AB<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\vec a\quad\overrightarrow{AB}</script><p>通常你没有必要打出一个明显的<strong>点号</strong>(用来表示乘法)来表明乘法运算；但是有时候也需要它来帮助读者分清一个公式。在这些情况下，你应该使用<code>\cdot</code> 命令。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span>v = <span class="token punctuation">&#123;</span><span class="token function selector">\sigma</span><span class="token punctuation">&#125;</span>_1 <span class="token function selector">\cdot</span> <span class="token punctuation">&#123;</span><span class="token function selector">\sigma</span><span class="token punctuation">&#125;</span>_2<span class="token punctuation">&#123;</span><span class="token function selector">\tau</span><span class="token punctuation">&#125;</span>_1 <span class="token function selector">\cdot</span> <span class="token punctuation">&#123;</span><span class="token function selector">\tau</span><span class="token punctuation">&#125;</span>_2<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">v = {\sigma}_1 \cdot {\sigma}_2{\tau}_1 \cdot {\tau}_2</script><p>log 等类似的函数名通常是用直立字体，而不是如同变量一样用斜体，因 此LATEX 提供了以下的命令来排版这些最重要的函数名：</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122202026918.png" alt=""></p><p>eg：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\lim</span>_<span class="token punctuation">&#123;</span>x <span class="token function selector">\rightarrow</span> 0<span class="token punctuation">&#125;</span><span class="token function selector">\frac</span><span class="token punctuation">&#123;</span><span class="token function selector">\sin</span> x<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span>=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\lim_{x \rightarrow 0}\frac{\sin x}{x}=1</script><p>对于<strong>取模函数</strong>(modulo function)，有两个命令：<code>\bmod</code> 用于二元运算“<code>a mod b</code>”，而<code>\pmod</code> 则用于表达式如“<code>x ≡ a (mod b)</code>”。</p><p>一个上下的<strong>分式</strong>(fraction) 可用<code>\frac</code>{…}{…} 命令得到。而其倾斜形式如 1/2，有时是更好的选择，因为对于简短的分子分母来说，这看上去更美观。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token function selector">\frac</span><span class="token punctuation">&#123;</span> x^<span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> k+1 <span class="token punctuation">&#125;</span><span class="token function selector">\qquad</span>x^<span class="token punctuation">&#123;</span> <span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>k+1<span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token function selector">\qquad</span>x^<span class="token punctuation">&#123;</span> 1/2 <span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\frac{ x^{2} }{ k+1 }\qquadx^{ \frac{2}{k+1} }\qquadx^{ 1/2 }</script><p>排版<strong>二项式系数</strong>或类似的结构，你可以使用amsmath 宏包中的<code>\binom</code> 命 令。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token function selector">\binom</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span><span class="token function selector">\qquad</span><span class="token function selector">\mathrm</span><span class="token punctuation">&#123;</span>C<span class="token punctuation">&#125;</span>_n^k<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\binom{n}{k}\qquad\mathrm{C}_n^k</script><p>有时候你需要把符号互相堆积起来。<code>\stackrel</code>命令会把其第一个参数中的符号以上标大小放在第二个上面，而第二个符号则以正常的位置摆放。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token function selector">\int</span> f_N(x) <span class="token function selector">\stackrel</span><span class="token punctuation">&#123;</span>!<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>=<span class="token punctuation">&#125;</span> 1<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\int f_N(x) \stackrel{!}{=} 1</script><p><strong>积分号</strong> (integral operator) 可以用<code>\int</code> 产生，<strong>求和号</strong> (sum operator) 用<code>\sum</code> 命令，而<strong>乘积号</strong> (product operator) 要用<code>\prod</code> 命令。上限和下限用<code>^</code> 和<code>_</code>来指定，如同上标与下标一样</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token function selector">\sum</span>_<span class="token punctuation">&#123;</span>i=1<span class="token punctuation">&#125;</span>^<span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span> <span class="token function selector">\qquad</span><span class="token function selector">\int</span>_<span class="token punctuation">&#123;</span>0<span class="token punctuation">&#125;</span>^<span class="token punctuation">&#123;</span><span class="token function selector">\frac</span><span class="token punctuation">&#123;</span><span class="token function selector">\pi</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token function selector">\qquad</span><span class="token function selector">\prod</span>_<span class="token function selector">\epsilon</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\sum_{i=1}^{n} \qquad\int_{0}^{\frac{\pi}{2}} \qquad\prod_\epsilon</script><p>为了更好的控制一个复杂表达式中指标的放置，amsmath 提供了两个额外 的工具：<code>\substack</code> 命令和<code>subarray</code> 环境：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token function selector">\sum</span>_<span class="token punctuation">&#123;</span><span class="token function selector">\substack</span><span class="token punctuation">&#123;</span>0&lt;i&lt;n <span class="token function selector">\\</span> 1&lt;j&lt;m<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>P(i,j) =<span class="token function selector">\sum</span>_<span class="token punctuation">&#123;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">subarray</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">&#125;</span>i<span class="token function selector">\in</span> I<span class="token function selector">\\</span>1&lt;j&lt;m<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">subarray</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> Q(i,j)<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\sum_{\substack{0<i<n \\ 1<j<m}}P(i,j) =\sum_{\begin{subarray}{l}i\in I\\1<j<m\end{subarray}} Q(i,j)</script><p>TEX提供了各种各样的符号来得到括号 (braces) 和其他定界符(delimiters)。<strong>圆括号和方括号可以由对应的键直接输入而花括号要用<code>\&#123;</code>，</strong>但是所有其它的定界符都要用一定的命令(如：\updownarrow) 生成。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a,b,c<span class="token punctuation">&#125;</span><span class="token function selector">\neq</span><span class="token function selector">\&#123;</span>a,b,c<span class="token function selector">\&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">{a,b,c}\neq\{a,b,c\}</script><p>如果你在某个左定界符前放一个<code>\left</code> 命令或是在某个右定界符前放一 个<code>\right</code> 命令，TEX 将会自动决定这对定界符的大小。<strong>请注意，你必须为每个<code>\left</code> 命令配对相应的<code>\right</code> 命令</strong>，而且只有在左右定界符被排版在同一行时才会获得正确的大小尺寸。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span>1 + <span class="token function selector">\left</span>( <span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>1<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> 1-x^<span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token function selector">\right</span>) ^3<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">1 + \left( \frac{1}{ 1-x^{2} } \right) ^3</script><p>有些情况下，有必要手工指定一个数学定界符的正确尺寸，这可以使 用<code>\big</code>，<code>\Big</code>，<code>\bigg</code> 和<code>\Bigg</code> 命令，大多数情况下你只需把它们放在定界符 命令的前面</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$<span class="token equation-command regex">\Big</span>( (x+1) (x-1) <span class="token equation-command regex">\Big</span>) ^&#123;2&#125;$</span><span class="token function selector">\\</span><span class="token equation string">$<span class="token equation-command regex">\big</span>(<span class="token equation-command regex">\Big</span>(<span class="token equation-command regex">\bigg</span>(<span class="token equation-command regex">\Bigg</span>($</span><span class="token function selector">\quad</span><span class="token equation string">$<span class="token equation-command regex">\big</span><span class="token equation-command regex">\&#125;</span><span class="token equation-command regex">\Big</span><span class="token equation-command regex">\&#125;</span><span class="token equation-command regex">\bigg</span><span class="token equation-command regex">\&#125;</span><span class="token equation-command regex">\Bigg</span><span class="token equation-command regex">\&#125;</span>$</span><span class="token function selector">\quad</span><span class="token equation string">$<span class="token equation-command regex">\big</span><span class="token equation-command regex">\|</span><span class="token equation-command regex">\Big</span><span class="token equation-command regex">\|</span><span class="token equation-command regex">\bigg</span><span class="token equation-command regex">\|</span><span class="token equation-command regex">\Bigg</span><span class="token equation-command regex">\|</span>$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\Big( (x+1) (x-1) \Big) ^{2}\\\big(\Big(\bigg(\Bigg(\quad\big\}\Big\}\bigg\}\Bigg\}\quad\big\|\Big\|\bigg\|\Bigg\|</script><p>有很多命令可以实现在公式中插入<strong>三点列</strong> (three dots)。\ldots 得到在基 线上的点列而\cdots 是上下居中的点列。另外，还有\vdots 命令产生竖直的点 列，\ddots 产生对角线的点列。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span>x_<span class="token punctuation">&#123;</span>1<span class="token punctuation">&#125;</span>,<span class="token function selector">\ldots</span>,x_<span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span> <span class="token function selector">\qquad</span>x_<span class="token punctuation">&#123;</span>1<span class="token punctuation">&#125;</span>+<span class="token function selector">\cdots</span>+x_<span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">x_{1},\ldots,x_{n} \qquadx_{1}+\cdots+x_{n}</script><h2 id="数学空格"><a href="#数学空格" class="headerlink" title="数学空格"></a>数学空格</h2><p>可以通过插入一些特殊的空格控制命令来调整自定义空格</p><div class="table-container"><table><thead><tr><th>命令</th><th>空格大小</th></tr></thead><tbody><tr><td><code>\,</code></td><td>$\frac{3}{18}$ quad</td></tr><tr><td><code>\:</code></td><td>$\frac{4}{18}$ quad</td></tr><tr><td><code>\</code></td><td>中等大小</td></tr><tr><td><code>\;</code></td><td>$\frac{5}{18}$ quad</td></tr><tr><td><code>\quad</code></td><td>1 quad</td></tr><tr><td><code>\qquad</code></td><td>2 quad</td></tr><tr><td><code>\!</code></td><td>-$\frac{3}{18}$ quad</td></tr></tbody></table></div><h2 id="垂直取齐"><a href="#垂直取齐" class="headerlink" title="垂直取齐"></a>垂直取齐</h2><p>要排版数组，使用<code>array</code> 环境。它的使用与<code>tabular</code> 环境有些类似。<code>\\</code> 命令可用来断行。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token function selector">\mathbf</span><span class="token punctuation">&#123;</span>X<span class="token punctuation">&#125;</span> =<span class="token function selector">\left</span>( <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>ccc<span class="token punctuation">&#125;</span>x_<span class="token punctuation">&#123;</span>11<span class="token punctuation">&#125;</span> <span class="token punctuation">&amp;</span> x_<span class="token punctuation">&#123;</span>12<span class="token punctuation">&#125;</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\ldots</span> <span class="token function selector">\\</span>x_<span class="token punctuation">&#123;</span>21<span class="token punctuation">&#125;</span> <span class="token punctuation">&amp;</span> x_<span class="token punctuation">&#123;</span>22<span class="token punctuation">&#125;</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\ldots</span> <span class="token function selector">\\</span><span class="token function selector">\vdots</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\vdots</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\ddots</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span> <span class="token function selector">\right</span>)<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\mathbf{X} =\left( \begin{array}{ccc}x_{11} & x_{12} & \ldots \\x_{21} & x_{22} & \ldots \\\vdots & \vdots & \ddots\end{array} \right)</script><p><code>array</code> 环境也可以用来排版这样的表达式，表达式中使用一个“<code>.</code>” 作为其隐 藏的<code>\right</code> 定界符。</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span>y = <span class="token function selector">\left</span><span class="token function selector">\&#123;</span> <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>ll<span class="token punctuation">&#125;</span>a <span class="token punctuation">&amp;</span> <span class="token function selector">\textrm</span><span class="token punctuation">&#123;</span>if <span class="token equation string">$d>c$</span><span class="token punctuation">&#125;</span><span class="token function selector">\\</span>b+x <span class="token punctuation">&amp;</span> <span class="token function selector">\textrm</span><span class="token punctuation">&#123;</span>in the morning<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>l <span class="token punctuation">&amp;</span> <span class="token function selector">\textrm</span><span class="token punctuation">&#123;</span>all day long<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span> <span class="token function selector">\right</span>.<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">y = \left\{ \begin{array}{ll}a & \textrm{if $d>c$}\\b+x & \textrm{in the morning}\\l & \textrm{all day long}\end{array} \right.</script><h2 id="虚位"><a href="#虚位" class="headerlink" title="虚位"></a>虚位</h2><p>我们看不见虚位（phantom，也有幻影的意思），但是在许多人的头脑中它们依然 占有一定的位置。</p><p>使用<code>\phantom</code> 命令你可以给不在最终输出中显示的字符保留位置。<em>理解此意的最 好方法是看下面的例子。</em></p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>^<span class="token punctuation">&#123;</span>12<span class="token punctuation">&#125;</span>_<span class="token punctuation">&#123;</span><span class="token function selector">\phantom</span><span class="token punctuation">&#123;</span>1<span class="token punctuation">&#125;</span>6<span class="token punctuation">&#125;</span><span class="token function selector">\textrm</span><span class="token punctuation">&#123;</span>C<span class="token punctuation">&#125;</span><span class="token function selector">\qquad</span> <span class="token function selector">\textrm</span><span class="token punctuation">&#123;</span>versus<span class="token punctuation">&#125;</span> <span class="token function selector">\qquad</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>^<span class="token punctuation">&#123;</span>12<span class="token punctuation">&#125;</span>_<span class="token punctuation">&#123;</span>6<span class="token punctuation">&#125;</span><span class="token function selector">\textrm</span><span class="token punctuation">&#123;</span>C<span class="token punctuation">&#125;</span><span class="token function selector">\\</span><span class="token function selector">\Gamma</span>_<span class="token punctuation">&#123;</span>ij<span class="token punctuation">&#125;</span>^<span class="token punctuation">&#123;</span><span class="token function selector">\phantom</span><span class="token punctuation">&#123;</span>ij<span class="token punctuation">&#125;</span>k<span class="token punctuation">&#125;</span><span class="token function selector">\qquad</span> <span class="token function selector">\textrm</span><span class="token punctuation">&#123;</span>versus<span class="token punctuation">&#125;</span> <span class="token function selector">\qquad</span><span class="token function selector">\Gamma</span>_<span class="token punctuation">&#123;</span>ij<span class="token punctuation">&#125;</span>^<span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">{}^{12}_{\phantom{1}6}\textrm{C}\qquad \textrm{versus} \qquad{}^{12}_{6}\textrm{C}\\\Gamma_{ij}^{\phantom{ij}k}\qquad \textrm{versus} \qquad\Gamma_{ij}^{k}</script><h2 id="数学符号表"><a href="#数学符号表" class="headerlink" title="数学符号表"></a>数学符号表</h2><blockquote><p>LaTeX中的数学符号实在太多了，所以列出表就很有必要</p></blockquote><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214338604.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214447774.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214528455.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214600423.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214626029.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214649923.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214716485.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214737897.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214802646.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214846090.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122214932841.png" alt=""></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210122215008432.png" alt=""></p><h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>本教程基于<a href="https://pan.baidu.com/s/1kVhKR4G1vtzDWJ1ex8GYgQ">这本书</a> (<em>提取码：2nw4</em>)</p>]]></content>
    
    
    
    <tags>
      
      <tag>MCM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MATLAB学习</title>
    <link href="/2021/01/19/MATLAB%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/19/MATLAB%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="MATLAB学习"><a href="#MATLAB学习" class="headerlink" title="MATLAB学习"></a>MATLAB学习</h1><h2 id="先来软件的操作界面"><a href="#先来软件的操作界面" class="headerlink" title="先来软件的操作界面"></a>先来软件的操作界面</h2><p>首先分为几个区域：</p><ul><li>当前文件夹：显示当前的文件目录，及根目录下的文件和目录。</li><li>编辑器：初始时没有这个界面，用于编辑matlab文件（<code>.m</code>文件），如果没有打开任何脚本文件就不会出现这个界面。有点击一个脚本才会显示。</li><li>命令行窗口：用来执行一些快捷的指令，可看成脚本的指令化。</li><li>工作区：主要显示变量和对应值（<em>基本运算后会自动生成<code>ans</code>变量</em>）。</li></ul><h2 id="清除历史和注释"><a href="#清除历史和注释" class="headerlink" title="清除历史和注释"></a>清除历史和注释</h2><p><strong>清除的两种方式：</strong></p><ul><li><strong>用<code>clc</code>命令可清除命令行窗口的历史记录</strong></li><li><strong>用<code>clear all</code>指令可以清空工作区中的所有变量（但没有<code>clc</code>的功能）</strong></li></ul><p>注释一般出现在脚本中：</p><p>​        <strong>用<code>%</code>之后可写注释行</strong></p><p>​        <strong>用<code>%%</code><u>可隔开代码段</u></strong></p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear all  <span class="token comment">% 清除workspace中的所有变量</span>clc  <span class="token comment">%清除Command Window中所有命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><blockquote><p>数字，字符串，矩阵</p></blockquote><p><strong><code>class()</code>函数可以查询到变量的类型，类似于python中的<code>type()</code></strong></p><h3 id="数字和字符串"><a href="#数字和字符串" class="headerlink" title="数字和字符串"></a>数字和字符串</h3><p>和python类似，还是直接赋值，eg：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">age <span class="token operator">=</span> <span class="token number">12</span>gender <span class="token operator">=</span> <span class="token string">'male'</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token comment">% abs()是指绝对值函数没问题，但是它同时还可以转化字符为ascii码</span><span class="token function">char</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token comment">% 转化数字为对应ascii码的字符</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token comment">% 转化数字为字符串</span>describ <span class="token operator">=</span> <span class="token string">'I Love MATLAB'</span><span class="token function">length</span><span class="token punctuation">(</span>describ<span class="token punctuation">)</span><span class="token comment">% 计算字符串的字符个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><blockquote><p>矩阵在matlab中的赋值非常的简单，类似于python中的列表和元组的复合</p></blockquote><p>基本矩阵建立：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span> A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>A <span class="token operator">=</span>     <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>     <span class="token number">4</span>     <span class="token number">5</span>     <span class="token number">6</span>     <span class="token number">7</span>     <span class="token number">8</span>     <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>很容易看出矩阵的每个元素是用<code>,</code>来分隔的（<em>你可以只用<code>,</code>或空格</em>），每一行是用<code>;</code>分隔的。</p><h4 id="矩阵的变换和运算"><a href="#矩阵的变换和运算" class="headerlink" title="矩阵的变换和运算"></a>矩阵的变换和运算</h4><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">B <span class="token operator">=</span> A<span class="token operator">'</span><span class="token comment">% B变成A的转置矩阵</span>C <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token comment">% 将矩阵A拉伸为一列（按列拉）</span>D <span class="token operator">=</span> <span class="token function">inv</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">% 求逆矩阵（注意需要是方阵）</span>E <span class="token operator">=</span> <span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">% 生成一个3*3的单位矩阵</span>F <span class="token operator">=</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">% 生成一个5阶幻方</span><span class="token comment">%%</span>E <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">% 创建一个共3个维度的10行5列的零矩阵</span><span class="token comment">% 每个维度可以这样表示或得到</span><span class="token function">E</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">% 这是一维，以此类推</span><span class="token function">E</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token function">E</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="重要函数"><a href="#重要函数" class="headerlink" title="重要函数"></a>重要函数</h2><h3 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h3><p><code>rand()</code>生成<u>均匀分布</u>的伪随机数，分布在<strong>（0 ~ 1）之间</strong>，eg：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">% 生成10行5列的均匀分布的伪随机数矩阵</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'double'</span><span class="token punctuation">)</span><span class="token comment">% 'double'这里是指令的精度类型（双精度），可选值还有'single'</span><span class="token function">rand</span><span class="token punctuation">(</span>RandStream<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">% RandStream是随机种子</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><code>randn()</code>生成<strong>标准正态分布</strong>的伪随机数（均值μ为0， 方差σ为1），用法和<code>rand()</code>类似</p><p><code>randi()</code>生成的是<strong>伪随机<u>整数</u></strong>，eg：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">randi</span><span class="token punctuation">(</span>iMax<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment">% 在区间(0, iMax)生成随机矩阵</span><span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span>iMin<span class="token punctuation">,</span> iMax<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment">% 在区间(iMin, iMax)生成随机矩阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><em>ps：这三个函数都可以单独使用，调用后生成一个随机数。</em></p><h2 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h2><h3 id="元胞数组"><a href="#元胞数组" class="headerlink" title="元胞数组"></a>元胞数组</h3><blockquote><p>元胞数组是matlab中特有的一种数据类型，是数组的一种。内部可以是属于不同数据类型的数据，有点类似于C的结构体或者python的字典。<br>它的特性给人一种查询数据的感觉，可以一直追踪到所有变量都被翻译成基本的数据信息。其<code>class()</code>返回值为<code>cell</code>。</p></blockquote><p>建立类型：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token function">cell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">% 建立一个1行6列的元胞数组</span>A<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">% 获取到元胞数组中的第二个元素，和其他语言数组不一样(用[])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><blockquote><p>matlab的结构体并不是C中的结构体，而更像是python中的字典类型</p></blockquote><p>举个栗子：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">books <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">'Vue Framework'</span><span class="token punctuation">,</span> <span class="token string">'Big Data'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">% 就是一个键值对</span>books<span class="token punctuation">.</span>name<span class="token comment">% 这就得到了books的name属性</span>books<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">% 这里取出name的第一个</span>books<span class="token punctuation">.</span>name<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">% 注意()取出的是cell，&#123;&#125;取出的才是值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong><font color=#34b>你会注意到这里的键值对全是用<code>,</code>隔开的，而且字符串用<code>&#123;&#125;</code>，数字用<code>[]</code></font></strong></p><h2 id="矩阵扩展"><a href="#矩阵扩展" class="headerlink" title="矩阵扩展"></a>矩阵扩展</h2><p>先前已经说过矩阵可以用<code>[]</code>来构造，然后还有其他构造方法：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">]</span>A <span class="token operator">=</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这样我们生成一个一行矩阵，这一行中范围是1 ~ 9，步长是2。</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> B <span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>B <span class="token operator">=</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token operator">></span><span class="token operator">></span> C <span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>C <span class="token operator">=</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>repmat()</code>函数显而易见是一个重复构造的函数，重复构造m行n列</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> D <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>D <span class="token operator">=</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span>     <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>ones()</code>即生成m行n列的全一矩阵</p><h3 id="矩阵四则运算"><a href="#矩阵四则运算" class="headerlink" title="矩阵四则运算"></a>矩阵四则运算</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span>B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span>C <span class="token operator">=</span> A <span class="token operator">+</span> B <span class="token comment">% 矩阵的加法</span>D <span class="token operator">=</span> A <span class="token operator">-</span> B <span class="token comment">% 矩阵的减法</span>E <span class="token operator">=</span> A <span class="token operator">*</span> B<span class="token operator">'</span><span class="token comment">% 乘法，注意这里需要转置</span>F <span class="token operator">=</span> A <span class="token operator">.*</span> B <span class="token comment">% 对应项相乘，不是矩阵乘法(.都是代表对应项)</span>G <span class="token operator">=</span> A <span class="token operator">/</span> B <span class="token comment">% 这相当于A * inv(B)</span>H <span class="token operator">=</span> A <span class="token operator">./</span>B <span class="token comment">% 对应项相除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="矩阵下标"><a href="#矩阵下标" class="headerlink" title="矩阵下标"></a>矩阵下标</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>B <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">% 取到2行3列的元素</span>C <span class="token operator">=</span> <span class="token function">A</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token comment">% 取出第3行所有元素(即取出第三行)</span><span class="token punctuation">[</span>m<span class="token punctuation">,</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>A <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">% 这里是找到的元素的索引值放到m和n中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="循环和分支结构"><a href="#循环和分支结构" class="headerlink" title="循环和分支结构"></a>循环和分支结构</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>直接看例子：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 求1到5的平方和</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> n <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span>sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这里<code>n = 1:5</code>是从1循环到5，中间默认步长为1（也就是说还可以写一个<code>1:1:5</code>）不管是哪种结构，都是要写<code>end</code>的。<strong>注意在脚本中一个语句还是要写<code>;</code></strong></p><p>再来一个嵌套结构：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 实现1到5的阶乘和</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span>p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span>p <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">j</span><span class="token punctuation">;</span><span class="token keyword">end</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> p<span class="token punctuation">;</span><span class="token keyword">end</span>sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>注意这里嵌套之后出现了类似python的缩进结构，这是matlab在嵌套结构中必须具备的（否则出错），<u>但是建议没有嵌套时还是保持缩进结构</u>（良好的规范）</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 1到10的求和</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> n <span class="token operator">&lt;=</span> <span class="token number">10</span>s <span class="token operator">=</span> s <span class="token operator">+</span> n<span class="token punctuation">;</span>n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>老规矩，直接上代码：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">if</span> a <span class="token operator">></span> b<span class="token string">'成立语句'</span><span class="token punctuation">;</span><span class="token keyword">elseif</span> a <span class="token operator">&lt;</span> b<span class="token string">'成立语句'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token string">'不成立语句'</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">switch</span> 表达式<span class="token punctuation">(</span>数值或字符串<span class="token punctuation">)</span><span class="token keyword">case</span> 数值或字符串语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">case</span> 数值或字符串语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">otherwise</span>语句n<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="二维平面绘图"><a href="#二维平面绘图" class="headerlink" title="二维平面绘图"></a>二维平面绘图</h2><blockquote><p>对于matlab的绘图，既然matlab是科学计算软件，则肯定是根据函数来画图。于是就要先有函数：f(x)</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token number">0.01</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">pi</span><span class="token comment">% 很明显这里的x是离散型的</span>y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">% 建立了函数</span>figure<span class="token comment">% 建立一个幕布（就理解成canvas算了）</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment">% 绘制图形，类似python中的matplotlib用法</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'y = sin(x)'</span><span class="token punctuation">)</span><span class="token comment">% 给图加个标题</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token comment">% 指定x轴标示</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'sin(x)'</span><span class="token punctuation">)</span><span class="token comment">% 指定y轴标示</span><span class="token function">xlim</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">% 限定x定义域范围为(0, 2Π)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>颜色选项表</p><div class="table-container"><table><thead><tr><th>颜色</th><th>字符</th></tr></thead><tbody><tr><td>红</td><td>r</td></tr><tr><td>绿</td><td>g</td></tr><tr><td>蓝</td><td>b</td></tr><tr><td>黄</td><td>y</td></tr><tr><td>粉红</td><td>m</td></tr><tr><td>青</td><td>c</td></tr><tr><td>白</td><td>w</td></tr><tr><td>黑</td><td>k</td></tr></tbody></table></div><p>线型选项表</p><div class="table-container"><table><thead><tr><th>线型</th><th>符号</th></tr></thead><tbody><tr><td>实线</td><td>-</td></tr><tr><td>虚线</td><td>—</td></tr><tr><td>冒号线</td><td>:</td></tr><tr><td>点画线</td><td>-.</td></tr></tbody></table></div><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210119141858659.png" alt=""></p><h3 id="绘图高级"><a href="#绘图高级" class="headerlink" title="绘图高级"></a>绘图高级</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token number">0.01</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">;</span>y1 <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.05</span> <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">.*</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>y2 <span class="token operator">=</span> <span class="token number">0.8</span> <span class="token operator">*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">.*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">[</span>AX<span class="token punctuation">,</span> H1<span class="token punctuation">,</span> H2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">plotyy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token string">'plot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 这里的plogyy是表示两个函数y1,y2共用一个坐标系，然后画出图形</span><span class="token comment">% 画图的类型为'plot'</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">AX</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Ylabel'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'String'</span><span class="token punctuation">,</span> <span class="token string">'Slow Decay'</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">AX</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Ylabel'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'String'</span><span class="token punctuation">,</span> <span class="token string">'Fast Decay'</span><span class="token punctuation">)</span><span class="token comment">% 这两句是设置每个函数的因变量名</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Time (\musec)'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Multiple Decay Rates'</span><span class="token punctuation">)</span><span class="token comment">% 下面两句就是对两个函数线型的设置</span><span class="token function">set</span><span class="token punctuation">(</span>H1<span class="token punctuation">,</span> <span class="token string">'LineStyle'</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>H2<span class="token punctuation">,</span> <span class="token string">'LineStyle'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/clip_image002.png" alt=""></p><h2 id="三维立体绘图"><a href="#三维立体绘图" class="headerlink" title="三维立体绘图"></a>三维立体绘图</h2><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">t <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">50</span><span class="token operator">:</span> <span class="token number">10</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span><span class="token comment">% 记住二维绘图是plot，三维就是plot3</span><span class="token function">plot3</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'sin(t)'</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'cos(t)'</span><span class="token punctuation">)</span><span class="token function">zlabel</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span>grid on<span class="token comment">% 在图像中加入网格线</span>axis square<span class="token comment">% 将网格变成正方形</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>如果要暂时保存图形，继续绘制就用<code>hold on</code></p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">hold on<span class="token punctuation">...</span><span class="token comment">% 其他图形代码</span>hold off <span class="token comment">% 关闭图形的hold on状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="稍微引入双峰函数"><a href="#稍微引入双峰函数" class="headerlink" title="稍微引入双峰函数"></a>稍微引入双峰函数</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mesh</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>grid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>可以给论文平添一点高大上。</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20210119161703693.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aticle</tag>
      
      <tag>MCM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毛概复习笔记</title>
    <link href="/2021/01/01/%E6%AF%9B%E6%A6%82%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/01/01/%E6%AF%9B%E6%A6%82%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>新民主主义革命的动力，新民主主义时期社会阶级构成：<br>无产阶级（工人阶级），农民阶级，城市小资产阶级（其他小资产阶级），民族资产阶级。</p><hr><p>新民主主义革命道路的提出：<br>更正了初期把重点放在城市，领导工人阶级开展工人运动的错误。经过毛泽东在井冈山的探索，确立了先占乡村，后去城市，最后夺取全国胜利的革命道路（农村包围城市）。</p><hr><p>“一化三改”：<br>社会主义工业化；<br>个体农业，手工业，资本主义工商业的社会主义改造。</p><hr><p>“三个主体，三个补充”：<br>国家经济和集体经济是工商业主体，个体经济为补充；<br>计划生产是工农业生产的主体，自由生产为补充；<br>国家市场是主体，自由市场是补充。</p><hr><p>社会主义本质：解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。</p><hr><p>社会主义市场经济理论：<br>一是计划经济和市场经济不是划分社会制度的标志；<br>二是计划和市场都是经济手段，各有优势和长处，社会主义实行市场经济要把两者结合起来；<br>三是市场经济作为资源配的一种方式本身不具有制度属性。</p><hr><p>“和平统一，一国两制”</p><hr><p>理顺分配关系，调整和规范国家，企业和个体的分配关系。确立劳动，资本，技术和管理等生产要素按贡献参与分配的原则，完善按劳分配为主体，多种分配方式并存的分配制度。</p><hr><p>我党最大政治优势：密切联系群众；<br>执政后最大危险：脱离群众</p><hr><p>科学发展观内涵：</p><ul><li>第一要义：发展</li><li>核心立场：以人为本</li><li>基本要求：全面协调可持续</li><li>根本方法：统筹兼顾</li></ul><p>科学发展观主要内容：</p><ol><li>加快转变经济发展方式</li><li>发展社会主义民主政治</li><li>推进社会主义文化强国建设</li><li>构建社会主义和谐社会</li><li>推进生态文明建设</li><li>全面提高党的建设科学化水平</li></ol><hr><p>我国社会主要矛盾已经转化为人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾。</p><hr><p>14个坚持：</p><ul><li>坚持全面深化改革</li><li>坚持全面从严治党</li><li>坚持全面依法治国</li><li>坚持以人民为中心</li><li>坚持人民当家作主</li><li>坚持新发展理念</li><li>坚持在发展中保障和改善民生</li><li>坚持总体国家安全观</li><li>坚持社会主义核心价值体系</li><li>坚持人与自然和谐共生</li><li>坚持党对人民军队的绝对领导</li><li>坚持党对一切工作的领导</li><li>坚持“一国两制”和推进祖国统一</li><li>坚持推动构建人类命运共同体</li></ul><hr><p>中华民族的昨天：“雄关漫道真如铁”<br>中华民族的今天：“人间正道是沧桑”<br>中华民族的明天：“长风破浪会有时”</p><hr><p>习近平新时代中国特色社会主义思想是：</p><ul><li>党和国家必须长期坚持的指导思想</li><li>全党全国各族人民团结奋斗的共同思想基础</li><li>决胜全面建成小康社会，建设社会主义现代化强国，实现中华民族伟大复兴中国梦的行动纲领</li></ul><hr><p>中国梦是 <strong>家国情怀</strong>，<strong>民族情怀</strong>，<strong>人民情怀</strong>相统一的梦。</p><p>中国梦的最大特点就是把国家，民族和个人作为一个命运共同体，把国家利益，民族利益和每个人的具体利益紧紧联系在一起，体现中华民族“家国天下”的情怀。</p><hr><p>实现中国梦必须走中国道路，弘扬中国精神，凝聚中国力量。</p><p>中国精神：以爱国主义为核心的民族精神和以改革创新为核心的时代精神。</p><hr><p>两个一百年：</p><ul><li>建党一百年：基本建成小康社会</li><li>建国一百年：基本实现社会主义现代化</li></ul><p>“两步走”战略：</p><ul><li>2020 ~ 2035：基本实现社会主义现代化的目标</li><li>2035 ~ 本世纪中叶：建成社会主义现代化强国</li></ul><hr><p>五大发展理念：<strong>创新，开放，协调，绿色，共享</strong>的新发展理念</p><p>共享四方面：</p><ol><li>全民共享</li><li>全面共享</li><li>共建共享</li><li>渐进共享</li></ol><hr><p>全面贯彻党的宗教工作基本方针，坚持我国宗教的中国化方向，积极引导宗教与社会主义社会相适应。</p><hr><p>掌握意识形态工作领导权，要落实好意识形态工作责任制。</p><hr><p>培育和践行社会主义核心价值观，还必须发扬中国人民在长期奋斗中的<strong>伟大民族精神</strong>。</p><p>习近平在十三大一次会议中的四种精神：</p><ul><li>伟大创造精神</li><li>伟大奋斗精神</li><li>伟大团结精神</li><li>伟大梦想精神</li></ul><hr><p>提高保障和改善民生水平：</p><ol><li>优先发展教育事业</li><li>提高就业质量和人民收入水平</li><li>加强社会保障体系建设</li><li>坚决打赢脱贫攻坚战</li><li>实施健康中国战略</li></ol><hr><p>坚持总体国家安全观：</p><ol><li>完善国家安全体系</li><li>健全公共安全体系</li><li>推进平安中国建设</li><li>加强国家安全能力建设</li><li>加强国家安全教育（<strong>每年4月15日为“全民国家安全教育日”</strong>）</li></ol><p><em>建设社会主义和谐社会，是一项极具复杂的系统工程，需要全党全社会长期坚持不懈的努力。</em> <strong>党和政府应加强和创新对建设社会主义和谐社会各项工作的领导，把改善民生，创新社会治理和坚持总体国家安全观作为社会建设的根本任务。</strong></p><hr><p>树立<strong>尊重自然，顺应自然，保护自然</strong>的生态文明理念</p><hr><p>加快生态文明体制改革：</p><ol><li>推进绿色发展</li><li>着力解决突出环境问题</li><li>加大生态系统保护力度</li><li>改革生态环境监管体制</li></ol><hr><p>全面小康：更高标准，更丰富内涵，更全面要求，即</p><ul><li>经济更加发展</li><li>民主更加健全</li><li>科教更加进步</li><li>文化更加繁荣</li><li>社会更加和谐</li><li>人民生活更加殷实</li></ul><hr><p>决胜全面建成小康社会</p><ol><li><p>坚决打好防范化解重大风险攻坚战</p></li><li><p>坚决打好精准脱贫攻坚战</p><p>“三位一体”扶贫格局：</p><ul><li>专项扶贫</li><li>行业扶贫</li><li>社会扶贫</li></ul></li><li><p>坚决打好污染防止攻坚战</p></li><li><p>确保经济社会秩序健康发展</p></li></ol><hr><p>依法治国目标：建设特色社会主义法治体系，建设社会主义法治国家</p><p>依法治国重点：</p><ul><li>必须坚持厉行法治</li><li>推进科学立法，严格执法，公正司法，全民守法</li><li>推进中国特色社会主义法治体系建设</li></ul><hr><p>习近平在纽约联合国总部讲话指出：<br>我们要继承和弘扬联合国宪章的宗旨和原则，构建以合作共赢为核心的新型国际关系，打造人类命运共同体。</p><hr><p>增强党的执政本领——八个增强：</p><ol><li>增强学习本领</li><li>增强政治领导本领</li><li>增强改革创新本领</li><li>增强科学发展本领</li><li>增强依法执政本领</li><li>增强群众工作本领</li><li>增强狠抓落实本领</li><li>增强驾驭风险本领</li></ol><hr><p>五位一体总体布局：<br>经济，政治，文化，社会，生态</p><hr><p>六个体系，一个体制：<br>产业，市场，分配，区域，环境，全面；<br>充分发挥市场作用，更好发挥政府作用的经济体制。</p>]]></content>
    
    
    <categories>
      
      <category>politics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编复习笔记(也可作为进阶篇)</title>
    <link href="/2020/12/31/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/12/31/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机中的数"><a href="#计算机中的数" class="headerlink" title="计算机中的数"></a>计算机中的数</h1><h2 id="二进制的补码"><a href="#二进制的补码" class="headerlink" title="二进制的补码"></a>二进制的补码</h2><p>对于8位的二进制来说，+0和-0的补码都是00000000（只有一种表示）</p><p>但是按道理来说10000000是表示-0的，这个二进制就用来表示-128。<em>同理100000000用来表示-256</em><br><strong>所以对于8位的补码表示的数的范围为-128 ~ +127</strong></p><h2 id="补码的符号扩展"><a href="#补码的符号扩展" class="headerlink" title="补码的符号扩展"></a>补码的符号扩展</h2><p>比如16位补码（一字节）扩展为32位补码（双字）：<u>正数高位补零，负数高位补一</u></p><h2 id="字节，节，页"><a href="#字节，节，页" class="headerlink" title="字节，节，页"></a>字节，节，页</h2><p>256个字节 = 16个节 = 1个页</p><h1 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h1><h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>我们除了数据存入寄存器中，其他的数据就是存在内存中的，内存中以字节为单位存储信息。<strong>内存中的数据存入方式是由低地址到高地址。</strong></p><p>但是当要存储的数据由多个字节组成（如双字数据）时，我们要遵守<strong>大大小小原则</strong>，<u>即低位字节存入低地址，高位字节存入高地址</u></p><h2 id="地址的分段"><a href="#地址的分段" class="headerlink" title="地址的分段"></a>地址的分段</h2><p><strong>80的地址总线宽度是20位，也就是说寻址空间正好是2²⁰ = 1M的空间大小。</strong></p><p>于是我们用实模式的两种地址来表示实际的逻辑地址：<strong>段地址左移一位 + 偏移地址</strong>（<em>正好就是5位的16进制数</em>）</p><h1 id="部分指令详解"><a href="#部分指令详解" class="headerlink" title="部分指令详解"></a>部分指令详解</h1><blockquote><p>在指令部分，我其实已经有写过（其实是搬运）<a href="https://docs.rogerskelamen.cn/#/study-notes/asm/instruction">一篇文章</a>来记录所有基本的指令，这里我只是挑一些进行详细解读</p></blockquote><h2 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h2><p>cbw（convert byte to word）———- 字节转字</p><p>cwd（convert word to double word）———- 字转双字</p><p><em>ps：</em><br><strong>cbw较为常用，其中前者默认是将AL中内容扩展到AX，</strong>后者默认是AX扩展到DX : AX中的双字（<em>所以有DX代表双字的说法</em>）</p><h2 id="加减1指令"><a href="#加减1指令" class="headerlink" title="加减1指令"></a>加减1指令</h2><p>这俩指令用的很多，平时却有点记不住，特在此记下：</p><p>inc（increment）——— 加一操作</p><p>dec（decrement）———- 减一操作</p><p><em>因为neg（求补）和dec是在一起的，也在此说明一下：</em><br>neg（negate）——— <strong>单纯就是将操作数按位求反后加一</strong></p><h2 id="逻辑指令"><a href="#逻辑指令" class="headerlink" title="逻辑指令"></a>逻辑指令</h2><p>and ——— 逻辑与<br>or  ————  逻辑或<br>not  ———-  逻辑非<br>xor（exclusive or）———   异或<br>test ———  测试</p><p>这些指令都是后接两个操作数，结果保存到前一个操作数，<u>除了test</u></p><p><strong>test两个操作数相与的结果不保存，只根据其特征置条件码：利用ZF改变，存放结果</strong></p><h2 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h2><p>shl（shift logical left）——-  逻辑左移<br>sal（shift arithmetic left）—— 算术左移<br>shr（shift logical right）—— 逻辑右移<br>sar（shift arithmetic right）—— 算术右移<br>rol（rotate left）———— 循环左移<br>ror（rotate right）————- 循环右移<br>rcl（rotate left through carry）——- 带进位循环左移<br>rcr（rotate right through carry）——- 带进位循环右移</p><p>逻辑和算术移位都是缺位补零，进位送CF。（算术右移是将其自身填入空缺位）<br>循环移位是循环移位一次，进位给CF。</p><h2 id="方向标志改变指令"><a href="#方向标志改变指令" class="headerlink" title="方向标志改变指令"></a>方向标志改变指令</h2><p>CLD（clear direction flag）——- 使DF = 0</p><p>STD（set derection flag）———- 使DF = 1</p><h1 id="汇编程序基本格式"><a href="#汇编程序基本格式" class="headerlink" title="汇编程序基本格式"></a>汇编程序基本格式</h1><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">datas SEGMENT    ...datas ENDSstacks SEGMENT    db 100 dup(0)stacks ENDScodes SEGMENT    assume cs:codes,ds:datas,ss:stacksstart:    mov ax,datas    mov ds,ax    ...    mov ah,4ch    int 21hcodes ENDSend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="伪操作"><a href="#伪操作" class="headerlink" title="伪操作"></a>伪操作</h1><h2 id="assume"><a href="#assume" class="headerlink" title="assume"></a>assume</h2><p>用来明确段和段寄存器之间的关系，我们通常会这么写：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">assume cs:codes,ds:datas,ss:stacks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>但是如果我们要取消前面的指定可以用：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">assume nothing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><blockquote><p>同一个变量可以具有不同的类型属性</p></blockquote><p>eg：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">oper1 db 1,2mov ax,oper1+1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>显然这个表达是错的（会报错），oper1的类型是字节，而ax的类型是字，类型不匹配。</p><h3 id="ptr"><a href="#ptr" class="headerlink" title="ptr"></a>ptr</h3><p>我们用ptr可以把oper1的类型转换成字：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov ax,word ptr oper1+1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这样就不会有类型的报错了，<strong>同时<code>word</code>这里还可以是<code>byte</code>，<code>dword</code>等多个类型</strong></p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><blockquote><p>除了<code>ptr</code>的转换，我们还可以用<code>label</code>(相当于是取别名)</p></blockquote><p>对于oper1数据我们可以在定义时：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">oper1_word label wordoper1 db 1,2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>这样我们用<code>oper1_word</code>进行字的操作，用<code>oper1</code>来进行字节的操作。<strong>但是它们指向的是同一个内存空间。</strong></p><h2 id="EQU"><a href="#EQU" class="headerlink" title="EQU"></a>EQU</h2><p>可以用EQU(equal?)来给一个表达式赋予一个名字（这是一个赋值伪操作），eg：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">data equ var+2 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>ps：<code>equ</code>不允许重复定义，同时<code>equ</code>伪操作不占用内存空间</em></p><p><strong>warning：<code>=</code>也可以错位赋值伪操作使用（<code>=</code>可以重复使用），但是两者不能同时使用</strong></p><h2 id="地址计数器"><a href="#地址计数器" class="headerlink" title="地址计数器"></a>地址计数器</h2><p>在汇编中<script type="math/tex">`作为地址计数器使用，`</script>表示当前指令的地址（偏移地址）。</p><p><strong>每处理一条指令，地址计数器就增加一个值</strong>。</p><h3 id="org伪操作"><a href="#org伪操作" class="headerlink" title="org伪操作"></a>org伪操作</h3><p>此伪操作用来设置当前地址计数器的值，eg：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">org 10 ;此时偏移地址为10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="基数控制伪操作"><a href="#基数控制伪操作" class="headerlink" title="基数控制伪操作"></a>基数控制伪操作</h2><p><strong>warning：汇编程序默认的数为十进制数</strong></p><p><code>.radix</code>伪操作可以把默认的基数改变成2 ~ 16的任何基数，eg：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.radix 16mov bx,0ff;16进制就不用写hmov bx,178d;10进制就要写d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="数值回送操作符"><a href="#数值回送操作符" class="headerlink" title="数值回送操作符"></a>数值回送操作符</h2><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>如果之后的表达式是一个变量，则汇编程序返回该变量的以字节数表示的类型：db为1，dw为2，dd为4。</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">array dw 1,2,3mov si,type array;等同于mov si,2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><ul><li>对于变量使用<code>dup</code>的情况，程序返回分配该变量的单元数（<strong>只看第一个<code>dup</code></strong>）</li><li>对于其他情况<u>一概返回</u>1</li></ul><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">fee dw 100 dup(0)mov cx,length fee;等同于mov cx,100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>程序返回伪操作之后变量的<strong>type值与length值的乘积</strong>，比如之前的fee变量：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov cx,size fee;相当于mov cx,200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="seg"><a href="#seg" class="headerlink" title="seg"></a>seg</h3><p>程序会返回变量或者标号的<strong>段地址值</strong></p><p>比如如果<code>datas</code>是地址为05000h的数据段段名，oper1是该段中第一个变量名：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov bx,seg oper1;相当于是mov bx,05000h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>review</tag>
      
      <tag>masm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oh-My-Zsh美化终端</title>
    <link href="/2020/12/23/Oh-My-Zsh%E7%BE%8E%E5%8C%96%E7%BB%88%E7%AB%AF/"/>
    <url>/2020/12/23/Oh-My-Zsh%E7%BE%8E%E5%8C%96%E7%BB%88%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Oh-My-Zsh美化终端"><a href="#Oh-My-Zsh美化终端" class="headerlink" title="Oh-My-Zsh美化终端"></a>Oh-My-Zsh美化终端</h1><blockquote><p>看着Linux的黑白终端（无GUI的mini版）很快就会感到厌烦，然后就想要弃坑，估计很多人第一次接触Linux都是这种感觉（我反正是这样🥱）。所以有一个漂亮的终端美化方案就是我们开始敲命令行的前提：毕竟咱们技术虽然不咋滴，但是逼格还是要起来的o(<em>￣▽￣</em>)ブ。</p></blockquote><h1 id="引入zsh"><a href="#引入zsh" class="headerlink" title="引入zsh"></a>引入zsh</h1><blockquote><p>我这个教程相当于是用<a href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh</a>来简单配置美化终端的，所以最开始的<a href="https://github.com/zsh-users/zsh">zsh</a>还是要有的。啥，你没听说过<a href="https://github.com/zsh-users/zsh">zsh</a>？讲真我也不知道zsh能干啥，据说巨佬可以通过复杂的配置来使得zsh成为超强的shell (p≧w≦q) 。但是我这种菜鸟当然不知道怎么配置这么“高级”的shell，不过不用担心，咱们有<a href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh</a>，根据大佬的项目我这种菜鸟也可以简单的配置zsh了。</p><p>噢对了，你要是想要追求更酷炫的，可以去试试<a href="https://github.com/fish-shell/fish-shell">fish</a>以及它的配套项目<a href="https://github.com/oh-my-fish/oh-my-fish">oh-my-fish</a>。fish的酷炫是舍弃了旧版shell脚本语法作为代价，所以你要是想要酷炫而且非常爱折腾值得试一试。</p></blockquote><p>安装必要的软件：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> git-core <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>就是下一个git和zsh，如无特殊说明以下都是以ubuntu系统为例</em></p><p><strong>然后你就在<code>/etc/shells</code>中可以看到出现了咱们安装的zsh：</strong></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201223122514830.png" alt="image-20201223122514830"></p><p>看到咱们的zsh已经出现了，就可以将zsh设为默认shell了：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>看看是否生效了，查看当前shell：</em></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>要是没生效<u>还是bash的话</u>，重启一下就好了。</strong></p><h1 id="安装Oh-My-Zsh"><a href="#安装Oh-My-Zsh" class="headerlink" title="安装Oh-My-Zsh"></a>安装Oh-My-Zsh</h1><p>用官方提供的脚本安装oh-my-zsh：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后不出所料你会连接失败，这时候我们就只能用git从github上把项目拉下来：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>当然你要是觉得github还是太慢，就用<a href="https://gitee.com/mirrors/oh-my-zsh">gitee上的镜像仓库</a>（每天更新一次）：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/mirrors/oh-my-zsh.git ~/.oh-my-zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>拉下来之后记得创建.zshrc配置文件：</strong></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>ps：这时候应该是配置好了会有变化的，要是没变化source一下（或重启）即可</em></p><h1 id="配置Oh-My-Zsh"><a href="#配置Oh-My-Zsh" class="headerlink" title="配置Oh-My-Zsh"></a>配置Oh-My-Zsh</h1><p><em>首先安装Powerline字体来显示图标：</em></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> fonts-powerline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后就是重头戏了，打开<code>.zshrc</code>配置文件：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>找到主题配置的那一项，将主题改为<code>agnoster</code>（或者也可以是别的，<code>random</code>就是每次打开主题都不一样）：</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">ZSH_THEME&#x3D;&quot;agnoster&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>出去之后source一下就可以变过来了：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>我们看到agnoster主题会显示主机名和用户名，我们可以在<code>.oh-my-zsh</code>的主题文件夹中配置一下去掉：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.oh-my-zsh/themes/agnoster.zsh-theme<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>找到<code>prompt_context</code>配置（在<code>build_prompt</code>函数中），然后将其注释掉：</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201223132752082.png" alt=""></p><p><em>首先你得会用vim的搜索方法。。</em></p><p>然后再source一波就会生效了：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="Oh-My-Zsh的使用"><a href="#Oh-My-Zsh的使用" class="headerlink" title="Oh-My-Zsh的使用"></a>Oh-My-Zsh的使用</h1><h2 id="目录历史"><a href="#目录历史" class="headerlink" title="目录历史"></a>目录历史</h2><p>Zsh会自动记住您访问过的最后20个目录。您可以使用<code>dirs -v</code>或<code>d</code>来按时间顺序列出历史记录。</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201223201855441.png" alt="image-20201223201855441"></p><p>然后可以使用<code>cd +1</code>转到上一个目录，依此类推，如下图我们还可以直接输入数字进行跳转到对应的目录，目录管理功能非常强大。</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201223202028242.png" alt="image-20201223202028242"></p><p><strong>快速进入常用目录</strong>：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/ -<span class="token operator">></span> <span class="token builtin class-name">cd</span> /~ -<span class="token operator">></span> <span class="token builtin class-name">cd</span> ~<span class="token punctuation">..</span> -<span class="token operator">></span> <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token punctuation">..</span>. -<span class="token operator">></span> <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> -<span class="token operator">></span> <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong><code>take</code>命令使用：</strong></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">take test_folder <span class="token comment"># 创建一个文件夹并进入这个文件夹，效果和下面类似</span><span class="token function">mkdir</span> test_folder <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> test_folder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><blockquote><p>当然这些使用都还是zsh的冰山一角，你可以在网上找一些关于zsh的教程来学习。</p></blockquote><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">upgrade_oh_my_zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uninstall_oh_my_zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="为Zsh安装插件"><a href="#为Zsh安装插件" class="headerlink" title="为Zsh安装插件"></a>为Zsh安装插件</h1><blockquote><p>oh-my-zsh中本身就有很多的插件，你可以直接在<code>~/.oh-my-zsh/plugins</code>目录中看到各种各样的插件（比如pip，vscode，sublime啥的）</p></blockquote><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201223190203237.png" alt="image-20201223190203237"></p><h2 id="安装自带插件"><a href="#安装自带插件" class="headerlink" title="安装自带插件"></a>安装自带插件</h2><p><strong>直接去<code>.zshrc</code>文件中进行配置，找到<code>plugins=(git)</code>这里（默认给你装了git），然后直接进行添加就行：</strong></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201223191214895.png" alt="image-20201223191214895"></p><p><strong>推荐几个自带的好用的插件</strong>：</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a><strong>git</strong></h3><p>可以使用git命令的各种缩写，eg：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> --all <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span> gaa<span class="token function">git</span> commit -m <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span> gcmsg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>查看所有的git命令缩写：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.oh-my-zsh/plugins/git/git.plugin.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>ps：其实很多的插件文档都可以在插件目录下找到</em></p><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a><strong>extract</strong></h3><p>就是解压压缩文件用的，只需要一个<code>x</code>就可以解压任意格式的压缩包，再也不用担心<code>tar</code>的那些参数记不住了。</p><p>使用：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">x filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="colored-man-pages"><a href="#colored-man-pages" class="headerlink" title="colored-man-pages"></a><strong>colored-man-pages</strong></h3><p>将你输入<code>man</code>指令之后的指令文档变得有色彩（<em>有高亮区分显示</em>），用于美化</p><h2 id="安装额外插件"><a href="#安装额外插件" class="headerlink" title="安装额外插件"></a>安装额外插件</h2><blockquote><p> 当然，有些其他的很好的插件我们可以自定义（custom）安装到<code>~/.oh-my-zsh/custom/plugins</code>这个文件夹中，而且很多很好用的插件都是需要另外安装的</p></blockquote><p><strong>推荐安装插件：</strong></p><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></h3><p><strong>另一个很棒的插件是shell的语法高亮。除此之外，此插件还能够验证命令的正确性（如果不正确则红色显示）</strong></p><p>安装：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.oh-my-zsh/custom/plugins<span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>然后将zsh-syntax-highlighting配置到<code>.zshrc</code>配置文件中（之后安装将不再强调）</p><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><a href="https://github.com/zsh-users/zsh-autosuggestions.git">zsh-autosuggestions</a></h3><p>它根据您的命令历史记录建议命令。按一下<kbd>→</kbd>就可以选中之前输入过的历史命令。</p><p>安装：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a><a href="https://github.com/wting/autojump.git">autojump</a></h3><p><strong>只需要按一个<code>j</code>就可以快速跳转到目标目录</strong>（之前进入过的目录）</p><p>安装：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/wting/autojump.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>还需要额外配置一下，进入克隆下来的仓库目录，执行（你得先装python）：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./install.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>最后把以下代码加入到<code>.zshrc</code>：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> -s ~/.autojump/etc/profile.d/autojump.sh <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> ~/.autojump/etc/profile.d/autojump.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>使用</strong>：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">j <span class="token function">dirname</span><span class="token comment"># 注意不是路径名而是文件夹名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>ps：这里的<code>dirname</code>不用写全也可以（可以只是一部分），tql！😈</em></p><p>删除无效路径：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">j --purge 无效路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="个人的插件目录"><a href="#个人的插件目录" class="headerlink" title="个人的插件目录"></a>个人的插件目录</h2><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">plugins&#x3D;(        git        extract        colored-man-pages        autojump        zsh-syntax-highlighting        zsh-autosuggestions        )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>zsh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>geek</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim入门笔记</title>
    <link href="/2020/12/21/vim%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/12/21/vim%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Vim入门笔记"><a href="#Vim入门笔记" class="headerlink" title="Vim入门笔记"></a>Vim入门笔记</h1><blockquote><p>啥都不说，献上键位表示</p></blockquote><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/1608523318696.jpg" alt=""></p><h1 id="键位简化"><a href="#键位简化" class="headerlink" title="键位简化"></a>键位简化</h1><blockquote><p>将以上复杂的键位入门化</p></blockquote><div class="table-container"><table><thead><tr><th>按键</th><th>单词表示</th><th>作用</th></tr></thead><tbody><tr><td><kbd>w</kbd></td><td>word</td><td>向后一个词</td></tr><tr><td><kbd>b</kbd></td><td>back</td><td>向前一个词</td></tr><tr><td><kbd>a</kbd></td><td>append</td><td>在这个字符后写入</td></tr><tr><td><kbd>A</kbd></td><td>同上</td><td>在本行末开始写入</td></tr><tr><td><kbd>i</kbd></td><td>insert</td><td>在光标位置插入</td></tr><tr><td><kbd>I</kbd></td><td>同上</td><td>在本行首开始写入</td></tr><tr><td><kbd>o</kbd></td><td>open</td><td>创建下一空行并写入</td></tr><tr><td><kbd>O</kbd></td><td>同上</td><td>创建上一空行并写入</td></tr><tr><td><kbd>y</kbd></td><td>yank</td><td>复制当前字符</td></tr><tr><td><kbd>c</kbd></td><td>change</td><td>删除当前字符并写入</td></tr><tr><td><kbd>d</kbd></td><td>delete</td><td><u>剪切</u>当前字符</td></tr><tr><td><kbd>p</kbd></td><td>paste</td><td>将剪切板上的内容粘贴</td></tr><tr><td><kbd>f</kbd></td><td>find</td><td>将光标移至“f”按键之后的字符（就近原则）</td></tr><tr><td><kbd>g</kbd></td><td>go</td><td>将光标移动到一个位置（动作键）</td></tr></tbody></table></div><font size=4>**常用键位组合**：</font><p><kbd>dd</kbd>：删除当前行<br><kbd>gg</kbd>：跳转到<u>文本</u>首行<br><kbd>G</kbd>：跳转到<u>文本</u>末尾行<br><kbd>ciw</kbd>：更改光标所在单词的内容（change in word）<br><kbd>ci”</kbd>：删除光标所在双引号中的内容并写入<br><kbd>yi”</kbd>：类比上面的，有复制光标所在双引号中的内容<br><kbd>zz</kbd>：使视野居中<br><kbd>df*</kbd>：找到指定字符并从光标处一直删除到那个字符（*为任意字符）<br><kbd>ggvG=</kbd>：格式化文档（对你没听错）<br><kbd>Ctrl</kbd>+<kbd>o</kbd>：回到上一次更改的位置（<u><strong>可跨文件</strong></u>）<br><kbd>Ctrl</kbd>+<kbd>i</kbd>：回到回到后上次更改的位置（<u><strong>可跨文件</strong></u>）<br><kbd>gf</kbd>：直接用vim打开光标所在的这个目录文件<br><kbd>Ctrl</kbd>+<kbd>a</kbd>：若当前字符是数字，这个数字加1<br><kbd>Ctrl</kbd>+<kbd>x</kbd>：若当前字符是数字，这个数字减1</p><h1 id="vim指令"><a href="#vim指令" class="headerlink" title="vim指令"></a>vim指令</h1><blockquote><p>在normal模式（普通模式）下，我们可以先输入<code>:</code>然后就可以输入vim的指令了。利用vim指令可以实现更多的操作功能。</p></blockquote><h2 id="保存和退出"><a href="#保存和退出" class="headerlink" title="保存和退出"></a>保存和退出</h2><p>最基本的操作，<code>w</code> for <code>write</code>，<code>q</code> for <code>quit</code>：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token keyword">wq</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>ps：<code>:</code>之后的指令可以连在一起写多个，这里的wq就是‘写入’和‘退出’</em></p><p><strong><em>按<code>!</code>之后是强制执行，如<code>q!</code>就是强制退出</em></strong></p><p>这个我们配置一下后就用<kbd>S</kbd>保存，<kbd>Q</kbd>退出：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">map S <span class="token punctuation">:</span><span class="token keyword">w</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map Q <span class="token punctuation">:</span><span class="token keyword">q</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="vim内打开文件"><a href="#vim内打开文件" class="headerlink" title="vim内打开文件"></a>vim内打开文件</h2><p><code>e</code> for <code>edit</code>，eg：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token keyword">e</span> ~<span class="token operator">/</span>program<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后就会出现一个分屏窗口（一个简易的文件管理UI），进行文件的选择，最后选择（按回车）后就会出现这个文件的分屏</p><h2 id="vim内执行shell命令"><a href="#vim内执行shell命令" class="headerlink" title="vim内执行shell命令"></a>vim内执行shell命令</h2><p>直接上例子（用<code>!</code>来告诉vim之后的指令是shell指令）：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token operator">!</span> <span class="token keyword">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这样就会使终端回到shell中执行命令并可看得到结果</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201231150654053.png" alt="image-20201231150654053"></p><p><em>然后vim会提示你按回车回到vim</em></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><blockquote><p> 你要是想要用shell执行多个命令然后回到vim，还可以这么操作：</p></blockquote><ol><li>先按<kbd>Ctrl</kbd>+<kbd>z</kbd>然后就会退出vim来到shell，同时vim会后台程序中</li><li>我们再输入我们要执行的shell指令</li><li>最后用<code>fg</code>命令回到vim</li></ol><h1 id="本人的-vimrc配置"><a href="#本人的-vimrc配置" class="headerlink" title="本人的.vimrc配置"></a>本人的.vimrc配置</h1><h2 id="有注释版"><a href="#有注释版" class="headerlink" title="有注释版"></a>有注释版</h2><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">"------------------------------</span><span class="token comment">"设置leader映射,空格为leader键</span><span class="token comment">"------------------------------</span><span class="token keyword">let</span> mapleader<span class="token operator">=</span><span class="token string">" "</span><span class="token builtin">noremap</span> <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token operator">&lt;</span>CR<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">nohlsearch</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token builtin">noremap</span> <span class="token operator">&lt;</span>LEADER<span class="token operator">></span>S <span class="token punctuation">:</span><span class="token keyword">split</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token builtin">noremap</span> <span class="token operator">&lt;</span>LEADER<span class="token operator">></span>V <span class="token punctuation">:</span><span class="token keyword">vsplit</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token comment">" leader加上方向键控制分屏移动</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">l</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">l</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">k</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">k</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">h</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">h</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">j</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">j</span><span class="token comment">"按两次空格之后跳到下一格&lt;++>然后写入 </span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token operator">&lt;</span>LEADER<span class="token operator">></span> <span class="token operator">&lt;</span>Esc<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">+</span><span class="token operator">+</span><span class="token operator">></span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token punctuation">:</span><span class="token keyword">nohlsearch</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>c4i<span class="token comment">"----------------------------</span><span class="token comment">"普通键位映射</span><span class="token comment">"----------------------------</span>map S <span class="token punctuation">:</span><span class="token keyword">w</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map Q <span class="token punctuation">:</span><span class="token keyword">q</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token builtin">noremap</span> H 5h<span class="token builtin">noremap</span> J 5j<span class="token builtin">noremap</span> K 5k<span class="token builtin">noremap</span> L 5l<span class="token comment">" 方向键控制分屏大小</span>map <span class="token operator">&lt;</span><span class="token keyword">up</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">res</span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span>down<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">res</span> <span class="token operator">+</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span><span class="token keyword">left</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">vertical</span> <span class="token keyword">resize</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span><span class="token keyword">right</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">vertical</span> <span class="token keyword">resize</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token keyword">th</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token keyword">tabnext</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token keyword">tl</span> <span class="token punctuation">:</span><span class="token operator">+</span><span class="token keyword">tabnext</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token keyword">tu</span> <span class="token punctuation">:</span><span class="token keyword">tabe</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">j</span><span class="token comment">" w通过s加v/j来更改分屏布局</span>map <span class="token keyword">sv</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">t</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span>Hmap <span class="token builtin">sj</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">t</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span>K<span class="token comment">"切换拼写错误的检验</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token builtin">sc</span> <span class="token punctuation">:</span><span class="token keyword">set</span> <span class="token builtin">spell</span><span class="token operator">!</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token comment">"----------------------------</span><span class="token comment">"全局的部分配置</span><span class="token comment">"----------------------------</span><span class="token keyword">set</span> <span class="token builtin">enc</span><span class="token operator">=</span>utf8<span class="token keyword">set</span> <span class="token builtin">fencs</span><span class="token operator">=</span>utf8<span class="token punctuation">,</span>gbk<span class="token punctuation">,</span>gb2312<span class="token punctuation">,</span>gb1803<span class="token keyword">set</span> <span class="token builtin">nocompatible</span><span class="token comment">"设置兼容</span><span class="token keyword">filetype</span> <span class="token keyword">on</span><span class="token comment">"以下都是相关文件类型配置</span><span class="token keyword">filetype</span> indent <span class="token keyword">on</span><span class="token keyword">filetype</span> plugin <span class="token keyword">on</span><span class="token keyword">filetype</span> plugin indent <span class="token keyword">on</span><span class="token keyword">set</span> <span class="token builtin">mouse</span><span class="token operator">=</span>a<span class="token comment">"你可以在vim中使用鼠标</span><span class="token keyword">set</span> <span class="token builtin">encoding</span><span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token keyword">let</span> &amp;<span class="token builtin">t_ut</span><span class="token operator">=</span><span class="token string">''</span><span class="token keyword">set</span> <span class="token builtin">scrolloff</span><span class="token operator">=</span><span class="token number">5</span><span class="token comment">"使得时刻可以在开头和末尾有五行显示</span><span class="token keyword">set</span> <span class="token builtin">autochdir</span><span class="token comment">"设置当前文件目录下执行命令</span><span class="token comment">" 按leader键和w清除所有的行尾空格</span><span class="token builtin">noremap</span> <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">w</span> <span class="token punctuation">:</span><span class="token operator">%</span>s<span class="token operator">/</span>\s\<span class="token operator">+</span>$<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token keyword">let</span> @<span class="token operator">/</span><span class="token operator">=</span><span class="token string">''</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token comment">"记住上一次打开的光标位置</span>au BufReadPost <span class="token operator">*</span> <span class="token keyword">if</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">"'\""</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">"'\""</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span> | exe <span class="token string">"normal! g'\""</span> | <span class="token keyword">endif</span><span class="token comment">"------------------------------</span><span class="token comment">" Vim UI</span><span class="token comment">"------------------------------</span><span class="token keyword">set</span> <span class="token keyword">number</span><span class="token comment">"显示行号</span><span class="token keyword">set</span> relativenumber<span class="token comment">"相对地显示行号</span><span class="token keyword">set</span> <span class="token builtin">cursorline</span><span class="token comment">"展示当前行下划线</span><span class="token keyword">set</span> <span class="token builtin">wrap</span><span class="token comment">"一行内容超出换行</span><span class="token keyword">set</span> <span class="token builtin">wildmenu</span><span class="token comment">"在指令模式下有Tab提示</span><span class="token keyword">set</span> <span class="token builtin">showcmd</span><span class="token comment">"显示按下的按键</span><span class="token comment">"-------------------------------------</span><span class="token comment">" text searching/matching</span><span class="token comment">"-------------------------------------</span><span class="token keyword">set</span> <span class="token builtin">hlsearch</span><span class="token comment">"搜索(/)高亮</span>exec <span class="token string">"nohlsearch"</span><span class="token comment">"进入文件后删除搜索历史</span><span class="token keyword">set</span> <span class="token builtin">incsearch</span><span class="token comment">"实时显示搜索高亮</span><span class="token keyword">set</span> <span class="token builtin">ignorecase</span><span class="token comment">"搜索忽略大小写</span><span class="token keyword">set</span> <span class="token builtin">smartcase</span><span class="token comment">"开启智能大小写</span><span class="token builtin">noremap</span> _ nzz<span class="token comment">"下一个搜索匹配</span><span class="token builtin">noremap</span> <span class="token operator">+</span> Nzz<span class="token comment">"上一个搜索匹配</span><span class="token comment">"-------------------------------------</span><span class="token comment">" text formatting/layout</span><span class="token comment">"-------------------------------------</span><span class="token keyword">set</span> <span class="token builtin">tabstop</span><span class="token operator">=</span><span class="token number">4</span><span class="token comment">"tab键宽度</span><span class="token keyword">set</span> <span class="token builtin">shiftwidth</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">softtabstop</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">expandtab</span><span class="token comment">"实际使用tab字符，不要用空格字符替换</span><span class="token keyword">set</span> <span class="token builtin">autoindent</span><span class="token comment">"继承前一行的缩进方式</span><span class="token keyword">set</span> <span class="token builtin">tw</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">set</span> <span class="token builtin">indentexpr</span><span class="token operator">=</span><span class="token keyword">set</span> <span class="token builtin">backspace</span><span class="token operator">=</span>indent<span class="token punctuation">,</span><span class="token builtin">eol</span><span class="token punctuation">,</span>start<span class="token keyword">set</span> <span class="token builtin">foldmethod</span><span class="token operator">=</span>indent<span class="token keyword">set</span> <span class="token builtin">foldlevel</span><span class="token operator">=</span><span class="token number">99</span><span class="token keyword">set</span> <span class="token keyword">list</span><span class="token comment">"显示行尾是否有空格，用$表示结束</span><span class="token builtin">syntax</span> <span class="token keyword">on</span><span class="token comment">"语法高亮</span><span class="token keyword">colorscheme</span> slate<span class="token comment">"主题设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>ps：leader键就相当于windows中的super键</em></p><h2 id="无注释版"><a href="#无注释版" class="headerlink" title="无注释版"></a>无注释版</h2><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">"------------------------------</span><span class="token comment">"设置leader映射,空格为leader键</span><span class="token comment">"------------------------------</span><span class="token keyword">let</span> mapleader<span class="token operator">=</span><span class="token string">" "</span><span class="token builtin">noremap</span> <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token operator">&lt;</span>CR<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">nohlsearch</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token builtin">noremap</span> <span class="token operator">&lt;</span>LEADER<span class="token operator">></span>S <span class="token punctuation">:</span><span class="token keyword">split</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token builtin">noremap</span> <span class="token operator">&lt;</span>LEADER<span class="token operator">></span>V <span class="token punctuation">:</span><span class="token keyword">vsplit</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">l</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">l</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">k</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">k</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">h</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">h</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">j</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">j</span><span class="token comment">" map &lt;LEADER>&lt;LEADER> &lt;Esc>/&lt;++>&lt;CR>:nohlsearch&lt;CR>c4i</span><span class="token comment">"----------------------------</span><span class="token comment">"普通键位映射</span><span class="token comment">"----------------------------</span>map S <span class="token punctuation">:</span><span class="token keyword">w</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map Q <span class="token punctuation">:</span><span class="token keyword">q</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token builtin">noremap</span> H 5h<span class="token builtin">noremap</span> J 5j<span class="token builtin">noremap</span> K 5k<span class="token builtin">noremap</span> L 5lmap <span class="token operator">&lt;</span><span class="token keyword">up</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">res</span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span>down<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">res</span> <span class="token operator">+</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span><span class="token keyword">left</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">vertical</span> <span class="token keyword">resize</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span><span class="token keyword">right</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">vertical</span> <span class="token keyword">resize</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token keyword">th</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token keyword">tabnext</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token keyword">tl</span> <span class="token punctuation">:</span><span class="token operator">+</span><span class="token keyword">tabnext</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token keyword">tu</span> <span class="token punctuation">:</span><span class="token keyword">tabe</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">j</span>map <span class="token keyword">sv</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">t</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span>Hmap <span class="token builtin">sj</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">t</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span>Kmap <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token builtin">sc</span> <span class="token punctuation">:</span><span class="token keyword">set</span> <span class="token builtin">spell</span><span class="token operator">!</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">y</span><span class="token operator">></span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">r</span><span class="token operator">></span>map <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">c</span><span class="token operator">></span> <span class="token string">"+y       "</span>设置复制到系统剪切板上<span class="token comment">"----------------------------</span><span class="token comment">"全局的部分配置</span><span class="token comment">"----------------------------</span><span class="token keyword">set</span> <span class="token builtin">enc</span><span class="token operator">=</span>utf8<span class="token keyword">set</span> <span class="token builtin">fencs</span><span class="token operator">=</span>utf8<span class="token punctuation">,</span>gbk<span class="token punctuation">,</span>gb2312<span class="token punctuation">,</span>gb1803<span class="token keyword">set</span> <span class="token builtin">nocompatible</span><span class="token keyword">filetype</span> <span class="token keyword">on</span><span class="token keyword">filetype</span> indent <span class="token keyword">on</span><span class="token keyword">filetype</span> plugin <span class="token keyword">on</span><span class="token keyword">filetype</span> plugin indent <span class="token keyword">on</span><span class="token string">" set mouse=a       "</span> 设置是否可用鼠标<span class="token keyword">set</span> <span class="token builtin">encoding</span><span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token keyword">let</span> &amp;<span class="token builtin">t_ut</span><span class="token operator">=</span><span class="token string">''</span><span class="token keyword">set</span> <span class="token builtin">scrolloff</span><span class="token operator">=</span><span class="token number">5</span><span class="token keyword">set</span> <span class="token builtin">autochdir</span><span class="token builtin">noremap</span> <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">w</span> <span class="token punctuation">:</span><span class="token operator">%</span>s<span class="token operator">/</span>\s\<span class="token operator">+</span>$<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token keyword">let</span> @<span class="token operator">/</span><span class="token operator">=</span><span class="token string">''</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>au BufReadPost <span class="token operator">*</span> <span class="token keyword">if</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">"'\""</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">"'\""</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span> | exe <span class="token string">"normal! g'\""</span> | <span class="token keyword">endif</span><span class="token comment">"------------------------------</span><span class="token comment">" Vim UI</span><span class="token comment">"------------------------------</span><span class="token keyword">set</span> <span class="token keyword">number</span><span class="token keyword">set</span> relativenumber<span class="token keyword">set</span> <span class="token builtin">cursorline</span><span class="token keyword">set</span> <span class="token builtin">wrap</span><span class="token keyword">set</span> <span class="token builtin">wildmenu</span><span class="token keyword">set</span> <span class="token builtin">showcmd</span><span class="token comment">"-------------------------------------</span><span class="token comment">" text searching/matching</span><span class="token comment">"-------------------------------------</span><span class="token keyword">set</span> <span class="token builtin">hlsearch</span>exec <span class="token string">"nohlsearch"</span><span class="token keyword">set</span> <span class="token builtin">incsearch</span><span class="token keyword">set</span> <span class="token builtin">ignorecase</span><span class="token keyword">set</span> <span class="token builtin">smartcase</span><span class="token builtin">noremap</span> _ nzz<span class="token builtin">noremap</span> <span class="token operator">+</span> Nzz<span class="token comment">"-------------------------------------</span><span class="token comment">" text formatting/layout</span><span class="token comment">"-------------------------------------</span><span class="token string">"set paste  "</span> 设置是否自动注释<span class="token keyword">set</span> <span class="token builtin">tabstop</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">shiftwidth</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">softtabstop</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">expandtab</span><span class="token keyword">set</span> <span class="token builtin">autoindent</span><span class="token keyword">set</span> <span class="token builtin">tw</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">set</span> <span class="token builtin">indentexpr</span><span class="token operator">=</span><span class="token keyword">set</span> <span class="token builtin">backspace</span><span class="token operator">=</span>indent<span class="token punctuation">,</span><span class="token builtin">eol</span><span class="token punctuation">,</span>start<span class="token keyword">set</span> <span class="token builtin">foldmethod</span><span class="token operator">=</span>indent<span class="token keyword">set</span> <span class="token builtin">foldlevel</span><span class="token operator">=</span><span class="token number">99</span><span class="token builtin">syntax</span> <span class="token keyword">on</span><span class="token comment">" 配色方案</span><span class="token keyword">colorscheme</span> monokai<span class="token string">"set background=dark "</span> <span class="token keyword">for</span> the dark <span class="token keyword">version</span><span class="token string">"set background=light "</span> <span class="token keyword">for</span> the light <span class="token keyword">version</span><span class="token comment">" 设置背景透明度</span><span class="token builtin">hi</span> Normal ctermfg<span class="token operator">=</span><span class="token number">252</span> ctermbg<span class="token operator">=</span>none<span class="token comment">" =========================================</span><span class="token comment">" 光标设置</span><span class="token string">" "</span>Mode Settings<span class="token string">"let &amp;t_SI.="</span>\<span class="token keyword">e</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token keyword">q</span><span class="token string">" "</span>SI <span class="token operator">=</span> INSERT <span class="token keyword">mode</span><span class="token string">"let &amp;t_SR.="</span>\<span class="token keyword">e</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token keyword">q</span><span class="token string">" "</span>SR <span class="token operator">=</span> REPLACE <span class="token keyword">mode</span><span class="token string">"let &amp;t_EI.="</span>\<span class="token keyword">e</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">q</span><span class="token string">" "</span>EI <span class="token operator">=</span> NORMAL <span class="token keyword">mode</span> <span class="token punctuation">(</span>ELSE<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"autocmd"</span><span class="token punctuation">)</span>  au VimEnter<span class="token punctuation">,</span>InsertLeave <span class="token operator">*</span> <span class="token keyword">silent</span> execute <span class="token string">'!echo -ne "\e[1 q"'</span> | <span class="token keyword">redraw</span><span class="token operator">!</span>  au InsertEnter<span class="token punctuation">,</span>InsertChange <span class="token operator">*</span>    \ <span class="token keyword">if</span> v<span class="token punctuation">:</span><span class="token builtin">insertmode</span> <span class="token operator">==</span> <span class="token string">'i'</span> |     \   <span class="token keyword">silent</span> execute <span class="token string">'!echo -ne "\e[5 q"'</span> | <span class="token keyword">redraw</span><span class="token operator">!</span> |    \ <span class="token keyword">elseif</span> v<span class="token punctuation">:</span><span class="token builtin">insertmode</span> <span class="token operator">==</span> <span class="token string">'r'</span> |    \   <span class="token keyword">silent</span> execute <span class="token string">'!echo -ne "\e[3 q"'</span> | <span class="token keyword">redraw</span><span class="token operator">!</span> |    \ <span class="token keyword">endif</span>  au VimLeave <span class="token operator">*</span> <span class="token keyword">silent</span> execute <span class="token string">'!echo -ne "\e[ q"'</span> | <span class="token keyword">redraw</span><span class="token operator">!</span><span class="token keyword">endif</span><span class="token comment">"Cursor settings:</span><span class="token comment">"  1 -> blinking block</span><span class="token comment">"  2 -> solid block</span><span class="token comment">"  3 -> blinking underscore</span><span class="token comment">"  4 -> solid underscore</span><span class="token comment">"  5 -> blinking vertical bar</span><span class="token comment">"  6 -> solid vertical bar</span><span class="token comment">"=============================================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="可视模式（Visual）"><a href="#可视模式（Visual）" class="headerlink" title="可视模式（Visual）"></a>可视模式（Visual）</h1><blockquote><p>可视模式又可以理解为“块模式”</p></blockquote><h2 id="普通可视模式"><a href="#普通可视模式" class="headerlink" title="普通可视模式"></a>普通可视模式</h2><p>相当于是鼠标按住拖动的操作（选中）</p><p><strong>进入模式方式：按<kbd>v</kbd></strong>（小写）</p><p><em>在这种模式中普通的动作（motion）也是生效的，eg：<kbd>d</kbd>剪切选中内容、<kbd>y</kbd>复制选中内容</em></p><h2 id="可视行模式"><a href="#可视行模式" class="headerlink" title="可视行模式"></a>可视行模式</h2><p>顾名思义，一行行选中（效率很高，很快啊🐱‍🏍）</p><p><strong>进入模式方式：按<kbd>V</kbd></strong>（大写）</p><h2 id="可视模式下的命令"><a href="#可视模式下的命令" class="headerlink" title="可视模式下的命令"></a>可视模式下的命令</h2><blockquote><p>其实上两种模式都可以进入指令模式，这里单独拎出来只因为这个太强了。</p></blockquote><p><strong>进入方式：在前两种状态下，按<kbd>:</kbd>，然后写入命令</strong></p><p>使用：eg：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token string">'&lt;,'</span><span class="token operator">></span>normal Isomething<span class="token operator">-</span>I<span class="token operator">-</span><span class="token keyword">write</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><font color=#34b>**输入`normal `然后这之后的内容就会转化为我们在普通模式下的指令，你输入的啥，vim就会执行啥。**</font><p><em>ps：<code>&#39;&lt;,&#39;&gt;</code>是我们按下冒号之后自动生成的，之后的内容才是我们想写入的</em></p><h2 id="可视块模式"><a href="#可视块模式" class="headerlink" title="可视块模式"></a>可视块模式</h2><blockquote><p> 这个模式是最强的。块，其实就是矩形。vim在这个模式下允许你进行矩形区域的选中，这是非常快捷方便的（操作中就能感受到）</p></blockquote><p><strong>进入模式方式：按下<kbd>Ctrl</kbd>+<kbd>v</kbd></strong></p><p><em>更高级的玩法：</em></p><font color=brown>在可视块模式下并有选中的情况下，按下任意能进入写入模式的按键（如c），然后写入并退出到普通模式，然后这些行会全部被写入。</font><h1 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li><strong>先<code>:</code>指令模式，然后就是<code>split</code></strong></li><li><strong>如果是按<code>vsplit</code>就是左右分屏</strong></li></ul><p><u><strong>分屏切换的主要按键就是<kbd>Ctrl</kbd>+<kbd>w</kbd>，然后按方向键（hjkl），或者再按一个w就可以转到下一个分屏</strong></u></p><p><em>但是这显然就太麻烦了，我们可以去配置一下按键映射：</em></p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">l</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">l</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">k</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">k</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">h</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">h</span>map <span class="token operator">&lt;</span>LEADER<span class="token operator">></span><span class="token keyword">j</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">j</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="上下分屏和左右分屏的切换"><a href="#上下分屏和左右分屏的切换" class="headerlink" title="上下分屏和左右分屏的切换"></a>上下分屏和左右分屏的切换</h2><blockquote><p>直接上配置</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">map <span class="token keyword">sv</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">t</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span>Hmap <span class="token builtin">sj</span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span><span class="token keyword">t</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span>K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>然后按<kbd>s</kbd>+<kbd>v</kbd>就可以改左右分屏了，同时<kbd>s</kbd>+<kbd>j</kbd>可以改上下分屏。</p><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><blockquote><p>当你在搞一个项目时，肯定是想要多个文件在分屏中展示，然后分别编辑的，这时候就要用edit指令了</p></blockquote><p><code>e</code>指令：（也可以敲<code>edit</code>）</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token keyword">e</span> ~<span class="token operator">/</span>myprogram<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>于是它就打开了myprogram这个文件夹，<u>并关闭当前窗口</u>，然后你就可以在这个简易的UI中选中你想要打开的文件。</em></p><h2 id="更改分屏大小"><a href="#更改分屏大小" class="headerlink" title="更改分屏大小"></a>更改分屏大小</h2><blockquote><p>使用<code>resize</code>指令</p></blockquote><p>eg：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token keyword">resize</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">vertical</span> <span class="token keyword">resize</span><span class="token operator">-</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>第一条指令是让上下分屏减小5个单位（具体是什么单位不知道），第二条就是左右分屏了。(<code>reszie</code>可简写为<code>res</code>)</p><p>当然，这样做也是贼麻烦，我们还是映射一波：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">map <span class="token operator">&lt;</span><span class="token keyword">up</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">res</span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span>down<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">res</span> <span class="token operator">+</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span><span class="token keyword">left</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">vertical</span> <span class="token keyword">resize</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span><span class="token keyword">right</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">vertical</span> <span class="token keyword">resize</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="使用标签页"><a href="#使用标签页" class="headerlink" title="使用标签页"></a>使用标签页</h1><blockquote><p>这个玩意应该熟悉，就是编辑器上面的标签选项</p></blockquote><h2 id="创建新的标签"><a href="#创建新的标签" class="headerlink" title="创建新的标签"></a>创建新的标签</h2><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token keyword">tabe</span> <span class="token punctuation">[</span>标签名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>输入这条指令之后vim就会创建一个新的标签页并覆盖掉原有的标签页(<em>然后你就会看到第一行上出现了一个简易的标签页展示UI</em>)</p><p>还是照例配置一下，免得得输入指令：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">map <span class="token keyword">tu</span> <span class="token punctuation">:</span><span class="token keyword">tabe</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="移动标签"><a href="#移动标签" class="headerlink" title="移动标签"></a>移动标签</h2><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token operator">-</span><span class="token keyword">tabnext</span><span class="token punctuation">:</span><span class="token operator">+</span><span class="token keyword">tabnext</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>第一条指令是移到左边标签，相应的<code>+</code>就是移到右边。</p><p>配置：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">map <span class="token keyword">th</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token keyword">tabnext</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token keyword">tl</span> <span class="token punctuation">:</span><span class="token operator">+</span><span class="token keyword">tabnext</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h1 id="vim-plug"><a href="#vim-plug" class="headerlink" title="vim-plug"></a>vim-plug</h1><blockquote><p><a href="https://github.com/junegunn/vim-plug">vim-plug</a>是一个插件管理器，能够下载并管理vim上的插件。当然有人说还有<a href="https://github.com/VundleVim/Vundle.vim">Vundle.vim</a>，好吧，但是这东西我觉得坑太多。</p></blockquote><h2 id="简单安装"><a href="#简单安装" class="headerlink" title="简单安装"></a>简单安装</h2><p><strong>咱们看到官方文档中怎么说：</strong></p><ul><li>Unix</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fLo ~/.vim/autoload/plug.vim --create-dirs <span class="token punctuation">\</span>    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>Windows(PowerShell)</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim <span class="token operator">|</span>`    ni <span class="token environment constant">$HOME</span>/vimfiles/autoload/plug.vim -Force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><em>然后不出所料你会收到以下 报错信息：</em></p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Failed <span class="token keyword">to</span> connect <span class="token keyword">to</span> raw<span class="token operator">.</span>githubusercontent<span class="token operator">.</span><span class="token builtin">com</span> port <span class="token number">443</span><span class="token punctuation">:</span> Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>可以尝试以下解决方法：</strong></p><p><strong>第一种：</strong></p><p><em>用RO我搭建好的文件链接再运行：</em></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fLo ~/.vim/autoload/plug.vim --create-dirs <span class="token punctuation">\</span>    http://39.98.122.169:3000/plug.vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><strong>第二种：</strong></p><ol><li>打开hosts</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol><li>在hosts里面<u>添加</u>下列内容</li></ol><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token number">199.232</span><span class="token operator">.</span><span class="token number">28.133</span> raw<span class="token operator">.</span>githubusercontent<span class="token operator">.</span><span class="token builtin">com</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><blockquote><p>在 vim 配置文件 <code>~/.vimrc</code> 或 Neovim 配置文件 <code>~/.config/nvim/init.vim</code> 中增加 vim-plug 配置项（就是我之前展示的配置文件）</p></blockquote><ul><li>开始部分<code>call plug#begin()</code>，括号里面写入的是vim的插件安装到哪里，因为我们安装的vim-plug是在<code>.vim</code>中，而<code>.vim</code>中有一个<code>plugged</code>文件夹就是专门存放vim插件的。</li><li>结束部分<code>call plug#end()</code>。</li><li>中间列出要安装的插件，都要以<code>Plug</code>开头</li></ul><p>结果就是这样的：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">call</span> plug#<span class="token function">begin</span><span class="token punctuation">(</span><span class="token string">'~/.vim/plugged'</span><span class="token punctuation">)</span>Plug <span class="token string">'vim-airline/vim-airline'</span>Plug <span class="token string">'connorholyday/vim-snazzy'</span><span class="token keyword">call</span> plug#<span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后重新打开<code>.vimrc</code>，输入命令<code>:PlugInstall</code>，就会自动加载安装插件（很快啊🐱‍🏍）</p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>PlugInstall [name ...] [#threads]</code></td><td style="text-align:left">安装插件</td></tr><tr><td style="text-align:left"><code>PlugUpdate [name ...] [#threads]</code></td><td style="text-align:left">安装或更新插件</td></tr><tr><td style="text-align:left"><code>PlugClean[!]</code></td><td style="text-align:left">清除不常用目录</td></tr><tr><td style="text-align:left"><code>PlugUpgrade</code></td><td style="text-align:left">更新 vim-plug 自身</td></tr><tr><td style="text-align:left"><code>PlugStatus</code></td><td style="text-align:left">检查插件状态</td></tr><tr><td style="text-align:left"><code>PlugDiff</code></td><td style="text-align:left">检查上次更新和挂起更新的修改</td></tr><tr><td style="text-align:left"><code>PlugSnapshot[!] [output path]</code></td><td style="text-align:left">生成插件快照</td></tr></tbody></table></div><p><em>每个指令都要加<code>:</code>就不用说了吧</em></p><h2 id="插件按需加载"><a href="#插件按需加载" class="headerlink" title="插件按需加载"></a>插件按需加载</h2><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" NERD tree 在 NERDTreeToggle 第一调用时加载</span>Plug <span class="token string">'scrooloose/nerdtree'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'on'</span><span class="token punctuation">:</span> <span class="token string">'NERDTreeToggle'</span> <span class="token punctuation">&#125;</span><span class="token comment">" 多命令</span>Plug <span class="token string">'junegunn/vim-github-dashboard'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'on'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'GHDashboard'</span><span class="token punctuation">,</span> <span class="token string">'GHActivity'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token comment">" 当 clojure 文件打开时加载</span>Plug <span class="token string">'tpope/vim-fireplace'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token string">'clojure'</span> <span class="token punctuation">&#125;</span><span class="token comment">" 多文件类型</span>Plug <span class="token string">'kovisoft/paredit'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'clojure'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token comment">" 两种情况下都可以按需加载</span>Plug <span class="token string">'junegunn/vader.vim'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token string">'on'</span><span class="token punctuation">:</span> <span class="token string">'Vader'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token string">'vader'</span> <span class="token punctuation">&#125;</span><span class="token comment">" 插件按需加载时执行代码</span>Plug <span class="token string">'junegunn/goyo.vim'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token string">'markdown'</span> <span class="token punctuation">&#125;</span><span class="token builtin">autocmd</span><span class="token operator">!</span> User goyo<span class="token operator">.</span><span class="token keyword">vim</span> <span class="token keyword">echom</span> <span class="token string">'Goyo is now loaded!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>for</code> 选项通常是不需要的，因为大多数特定文件类型的插件通常代码不是很多</p><h2 id="推荐的插件"><a href="#推荐的插件" class="headerlink" title="推荐的插件"></a>推荐的插件</h2><h3 id="NERDTree"><a href="#NERDTree" class="headerlink" title="NERDTree"></a><font size=5><a href="https://github.com/preservim/nerdtree">NERDTree</a></font></h3><p>可以在分屏中显示文件管理（有简易UI），在打开多个文件的情况下是非常有用的。</p><p>安装方式：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'preservim/nerdtree'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>添加的配置：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" 设置NerdTree</span>map <span class="token operator">&lt;</span>F3<span class="token operator">></span> <span class="token punctuation">:</span>NERDTreeMirror<span class="token operator">&lt;</span>CR<span class="token operator">></span>map <span class="token operator">&lt;</span>F3<span class="token operator">></span> <span class="token punctuation">:</span>NERDTreeToggle<span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="airline"><a href="#airline" class="headerlink" title="airline"></a><a href="https://github.com/vim-airline/vim-airline"><font size=5>airline</font></a></h3><p>安装方式：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'vim-airline/vim-airline'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>可以在vim下方显示状态栏的插件</p><h3 id="vim-snazzy"><a href="#vim-snazzy" class="headerlink" title="vim-snazzy"></a><a href="https://github.com/connorholyday/vim-snazzy"><font size=5>vim-snazzy</font></a></h3><p>单纯为了美化，设置一个新的主题snazzy</p><p>安装方式：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'connorholyday/vim-snazzy'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这时就可以将之前的slate主题换成snazzy了，还可以设置背景透明（可能因为终端不同而无法显示：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">"snazzy主题的配置项</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>SnazzyTransparent <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="vim-rainbow"><a href="#vim-rainbow" class="headerlink" title="vim-rainbow"></a><a href="https://github.com/frazrepo/vim-rainbow"><font size=5>vim-rainbow</font></a></h3><p>可以将多级的大括号进行颜色区分</p><p>安装方式：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'frazrepo/vim-rainbow'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>添加的配置：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">"rainbow的配置项</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>rainbow_active <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="auto-pairs"><a href="#auto-pairs" class="headerlink" title="auto-pairs"></a><a href="https://github.com/jiangmiao/auto-pairs"><font size=5>auto-pairs</font></a></h3><p>顾名思义，就是在你写了或删了一个括号时自动同步另一个括号。</p><p>安装方式：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'jiangmiao/auto-pairs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>添加的配置：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">"auto-pairs的配置项</span>au Filetype FILETYPE <span class="token keyword">let</span> <span class="token keyword">b</span><span class="token punctuation">:</span>AutoPairs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"("</span><span class="token punctuation">:</span> <span class="token string">")"</span><span class="token punctuation">&#125;</span>au FileType php      <span class="token keyword">let</span> <span class="token keyword">b</span><span class="token punctuation">:</span>AutoPairs <span class="token operator">=</span> <span class="token function">AutoPairsDefine</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'&lt;?'</span> <span class="token punctuation">:</span> <span class="token string">'?>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;?php'</span><span class="token punctuation">:</span> <span class="token string">'?>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="NerdCommenter"><a href="#NerdCommenter" class="headerlink" title="NerdCommenter"></a><font size=5><a href="https://github.com/preservim/nerdcommenter">NerdCommenter</a></font></h3><blockquote><p>所有程序员编写的代码都会产生难以调试的问题，导致他们决定注释掉或撤消代码，NERD Commenter的用处就来了，选择代码，点击Leader+cc，你的代码就会被注释掉；点击Leader+cn，你的代码将被取消注释。对于大多数文件类型，NERD Commenter都能使用正确的注释字符。</p></blockquote><p>安装方式：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'preservim/nerdcommenter'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="tagbar"><a href="#tagbar" class="headerlink" title="tagbar"></a><font size=5><a href="https://github.com/preservim/tagbar">tagbar</a></font></h3><p>在右边显示函数列表</p><p>安装方式：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'preservim/tagbar'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>添加配置：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">nmap <span class="token operator">&lt;</span>F8<span class="token operator">></span> <span class="token punctuation">:</span>TagbarToggle<span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>然后你就可以直接按<kbd>F8</kbd>来显示函数列表了。</em></p><h3 id="MarkdownPreview"><a href="#MarkdownPreview" class="headerlink" title="MarkdownPreview"></a><font size=5><a href="https://github.com/iamcco/markdown-preview.nvim">MarkdownPreview</a></font></h3><p>还是顾名思义，是可以在vim正在编辑的情况下实时查看md文档（在web浏览器中）的插件</p><p>安装方式：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'iamcco/markdown-preview.nvim'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'do'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">-</span><span class="token operator">></span> mkdp#util#<span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'markdown'</span><span class="token punctuation">,</span> <span class="token string">'vim-plug'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>命令：</strong></p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">MarkdownPreview<span class="token comment">" 在打开 markdown 文件后，使用该命令可以打开预览窗口</span>MarkdownPreviewStop<span class="token comment">" 关闭 markdown 预览窗口，并停止开启的服务进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>添加配置：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">let</span> g<span class="token punctuation">:</span>mkdp_browser <span class="token operator">=</span> <span class="token string">'chromium'</span><span class="token builtin">autocmd</span> Filetype markdown <span class="token builtin">noremap</span> <span class="token punctuation">,</span>v <span class="token punctuation">:</span>MarkdownPreview<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token builtin">autocmd</span> Filetype markdown <span class="token builtin">noremap</span> <span class="token punctuation">,</span><span class="token keyword">vs</span> <span class="token punctuation">:</span>MarkdownPreviewStop<span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><ul><li>上面的第一句是将预览的默认浏览器设置为 chromium (可选，如果不指定则使用系统的默认浏览器打开)</li><li>后两句开始的 <code>autocmd Filetype markdown</code> 声明只有在文件类型为 markdown 时这两个快捷键才会生效</li><li>第二句是将 <code>:MarkdownPreview</code> 命令绑定到 <code>,v</code> 组合键上</li><li>第三句是将 <code>:MarkdownPreviewStop</code> 绑定到 <code>,vs</code> 组合键上</li></ul><p><strong>继续配置相应常用样式快捷键</strong>：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token builtin">autocmd</span> Filetype markdown <span class="token builtin">noremap</span> <span class="token punctuation">,</span><span class="token keyword">b</span> i<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">&lt;</span>Esc<span class="token operator">></span><span class="token builtin">hi</span><span class="token builtin">autocmd</span> Filetype markdown <span class="token builtin">noremap</span> <span class="token punctuation">,</span>i i<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">&lt;</span>Esc<span class="token operator">></span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="leaderF"><a href="#leaderF" class="headerlink" title="leaderF"></a><font size=5><a href="https://github.com/Yggdroot/LeaderF">leaderF</a></font></h3><p>LeaderF是一个用Python写的vim插件，可以在成千上万数十万个文件中，通过模糊查找的方式，快速找到目标文件。</p><p>安装：</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'Yggdroot/LeaderF'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'do'</span><span class="token punctuation">:</span> <span class="token string">':LeaderfInstallCExtension'</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>常用指令：</p><div class="table-container"><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td>:LeaderfFile</td><td>搜索当前目录下的文件</td></tr><tr><td>:LeaderfMru</td><td>搜索最近使用过的文件( most recently used files)</td></tr><tr><td>:LeaderfLine</td><td>搜索当前文件中有的某个单词</td></tr><tr><td>:LeaderfFunction</td><td>搜索当前文件的函数</td></tr><tr><td>:LeaderfBuffer</td><td>搜索当前的Buffer</td></tr></tbody></table></div><h3 id="coc-nvim"><a href="#coc-nvim" class="headerlink" title="coc.nvim"></a><font size=5><a href="https://github.com/neoclide/coc.nvim">coc.nvim</a></font></h3><p>作为IDE，必不可少的就是代码智能补全，coc.nvim就是<u>坑比较少</u>的一种智能补全插件。</p><p>安装(得先安装nodejs)：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -sL install-node.now.sh/lts <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'neoclide/coc.nvim'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'branch'</span><span class="token punctuation">:</span> <span class="token string">'release'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>添加配置：</p><p><strong><u>coc.nvim只是一个平台</u>，它能够允许你安装各种语言插件，达到不同语言的补全效果。因此我们只有安装了对应的语言插件才能实现补全。以C/C++为例：</strong></p><p>通过在vim内的命令模式输入:CocConfig来配置coc.nvim的配置文件coc-settings.json</p><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">&#123;</span><span class="token string">"languageserver"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"clangd"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"command"</span><span class="token punctuation">:</span> <span class="token string">"clangd"</span><span class="token punctuation">,</span>      <span class="token string">"rootPatterns"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"compile_flags.txt"</span><span class="token punctuation">,</span> <span class="token string">"compile_commands.json"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"filetypes"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span> <span class="token string">"c++"</span><span class="token punctuation">,</span> <span class="token string">"objc"</span><span class="token punctuation">,</span> <span class="token string">"objcpp"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>Ps: 这种配置模式下，coc主要是依赖clangd进行代码自动化补全，所以需要事先安装好clangd。</em></p><blockquote><p>对更多其他语言的支持可以参考: <a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers#supported-features">https://github.com/neoclide/coc.nvim/wiki/Language-servers#supported-features</a></p></blockquote><p>当然你要是不想要这么麻烦，coc.nvim本身作为一个平台，其自身就包含各种扩展，可通过各种指令来安装高阶的扩展插件。（之前的C补全就可以用扩展插件实现）</p><div class="table-container"><table><thead><tr><th>命令</th><th>命令名</th></tr></thead><tbody><tr><td>安装命令</td><td>:CocInstall 插件名</td></tr><tr><td>移除命令</td><td>:CocUninstall 插件名</td></tr><tr><td>查看已安装</td><td>:CocList extensions</td></tr><tr><td>更新命令</td><td>:CocUpdate</td></tr></tbody></table></div><blockquote><p>coc的扩展插件可参考: <a href="https://github.com/neoclide/coc.nvim">https://github.com/neoclide/coc.nvim</a></p></blockquote><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><h2 id="figlet"><a href="#figlet" class="headerlink" title="figlet"></a><a href="https://github.com/cmatsuoka/figlet">figlet</a></h2><blockquote><p>当我们想要生成大号字符的ascii图形时，可以用<a href="https://github.com/cmatsuoka/figlet">figlet</a>帮助我们快速生成。(因为是用C编译的，得装gcc编译器)</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> ftp://ftp.figlet.org/pub/figlet/program/unix/figlet-2.2.5.tar.gzx figlet-2.2.5.tar.gz<span class="token builtin class-name">cd</span> figlet-2.2.5<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">figlet <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>结果</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">       ___   _<span class="token punctuation">(</span>_<span class="token punctuation">)</span>_ __ ___<span class="token punctuation">\</span> <span class="token punctuation">\</span> / / <span class="token operator">|</span> '_ ` _ <span class="token punctuation">\</span> <span class="token punctuation">\</span> V /<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">\</span>_/ <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">figlet -f smslant <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>结果</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">       _ _  __<span class="token punctuation">(</span>_<span class="token punctuation">)</span>_ _<span class="token operator">|</span> <span class="token operator">|</span>/ / /  ' <span class="token punctuation">\</span><span class="token operator">|</span>___/_/_/_/_/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="文件类型转换"><a href="#文件类型转换" class="headerlink" title="文件类型转换"></a>文件类型转换</h2><blockquote><p>我们可以利用vim来将当前文件来转化为<code>html</code>或者是<code>pdf</code></p></blockquote><p>转html：</p><p><code>``vim:%TOhtml</code></p>]]></content>
    
    
    <categories>
      
      <category>Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geek</tag>
      
      <tag>IDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>express入门</title>
    <link href="/2020/11/27/express%E5%85%A5%E9%97%A8/"/>
    <url>/2020/11/27/express%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="express入门"><a href="#express入门" class="headerlink" title="express入门"></a>express入门</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>众所周知，node.js使得JavaScript从前端老大哥变成了前后端都能用的开发神器（利用native-react，js也可以做出<strong>真实</strong>app了）。而具体在开发中，js怎么实现后端们的工作咧，这就要用到express框架（当然也有很多其他的框架，比如koa）</p></blockquote><p>照例搬上<a href="https://www.expressjs.com.cn/">express的中文官网</a></p><p><em>这里面的npm都可以且建议换成cnpm，如果你配置了淘宝镜像的话。当然你想要配置淘宝镜像的话<a href="https://developer.aliyun.com/mirror/NPM">点击这里</a></em></p><h1 id="用npm开始"><a href="#用npm开始" class="headerlink" title="用npm开始"></a>用npm开始</h1><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i express-cli --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="顺便说一个npm脚手架开发的基本流程"><a href="#顺便说一个npm脚手架开发的基本流程" class="headerlink" title="顺便说一个npm脚手架开发的基本流程"></a>顺便说一个npm脚手架开发的基本流程</h2><ol><li><p>首先创建一个装项目的文件夹</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>进到里面去</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>初始化脚手架</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>进行一系列的选项选择</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201127211201258.png" alt=""></p><p><strong>然后它会把这个信息写到文件夹下的package.json文件中</strong></p></li></ol><h2 id="写入基本的代码"><a href="#写入基本的代码" class="headerlink" title="写入基本的代码"></a>写入基本的代码</h2><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The example app is listening on port 3000!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后你通过用node运行这个app.js文件，就可以在本地创建一个服务器了</p><p><em>接着你可以通过localhost:3000来访问这个本地服务器，可以看到web页面中出现了hello world字样</em></p><h2 id="继续科普npm"><a href="#继续科普npm" class="headerlink" title="继续科普npm"></a>继续科普npm</h2><blockquote><p>你其实可以修改package.json文件的内容（它并不是只保存了依赖项等信息来npm install），这样你可以自定义一些指令</p></blockquote><p>eg：我这里express项目生成的package.json文件如下</p><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"express-test"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"express-cli"</span><span class="token operator">:</span> <span class="token string">"^0.0.1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>scripts</code>中的数据就是可以用指令执行的快捷命令，你不妨把<code>scripts</code>中的<code>test</code>进行一下修改（其实是直接删了）：</p><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node app.js"</span>    <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><strong><font color=#34b>这样我们就不用每次敲node来执行，而是用npm start就能执行了</font></strong>（好像没怎么方便啊）</p><h1 id="Express应用生成器"><a href="#Express应用生成器" class="headerlink" title="Express应用生成器"></a>Express应用生成器</h1><blockquote><p>在我们做项目开发的时候只是自己写express的代码开发效率肯定是不高的（就像我们做vue项目时用vue-cli一样），于是我们就要借助于生成器express-generator。</p></blockquote><h2 id="Get-Start"><a href="#Get-Start" class="headerlink" title="Get Start"></a>Get Start</h2><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express-generator -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>这里为啥要用<code>-g</code>呢，其实就是以免以后的项目中要用到生成器，方便快速生成。</strong></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">express --view<span class="token operator">=</span>ejs blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>这里的<code>view=ejs</code>意思是模板引擎是用的ejs（views中的文件）</em></p><p>通过<code>npm start</code>就可以打开我们的项目了</p><p>然后说一下我们的文件结构：</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201128121725164.png" alt=""></p><p>bin里面装的是www（其实还是写的是js代码）</p><p>router中的index.js长啥样：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Express'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>这里的res.render渲染的就是index模块（views中的index.ejs），然后它指定title这个属性名的属性值是Express，index.ejs中的title都会被渲染成Express</strong></p><h2 id="安装nodemon"><a href="#安装nodemon" class="headerlink" title="安装nodemon"></a>安装nodemon</h2><blockquote><p>因为我们每次进行像上面的title值的修改都必须要重启node服务才会看到web网页内容的改变，这极为不方便，于是就有了nodemon</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i nodemon -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后我们去package.json修改start</p><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"nodemon ./bin/www"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><em>于是就实现了类似热加载的功能</em></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201128200211588.png" alt=""></p><h1 id="Express各种方法讲解"><a href="#Express各种方法讲解" class="headerlink" title="Express各种方法讲解"></a>Express各种方法讲解</h1><blockquote><p>首先我们再次看一看开头写过的<code>app.js</code>文件代码</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The example app is listening on port 3000!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><p>第二行是<code>require</code>引用就不多说了</p></li><li><p><strong><code>express()</code>是express上的顶级方法，作用是create一个express实例，于是我们利用这一点来创建了一个叫app的express实例</strong></p></li><li><p>第五行利用实例对象上的<code>get</code>方法来创建服务器上的一个路由<em>（相应的就有<code>post</code>等方法）</em>，这个方法的第二个参数是一个函数（传参分别是请求对象和响应对象），请求和响应上又有诸多的方法，比如这个上面的就是一个send方法，传送HTTP响应。</p><p>拓展一波：<code>res.sendFile(path,[,options][,fn])</code>又是一个可以传送文件的方法。</p></li><li><p>然后express对象上的<code>listen</code>方法就是用来定义端口的，它监听我们定义好的端口，然后在此端口上建立服务器连接。</p><p>第二个参数是最开始建立连接时在控制台打印的信息。</p></li></ul><h2 id="静态文件的使用"><a href="#静态文件的使用" class="headerlink" title="静态文件的使用"></a>静态文件的使用</h2><p>Express提供了内置的中间件express.static<em>（你问我<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BB%B6">中间件</a>是啥，我也不知道，反正感觉和api很像)</em>来设置静态文件。</p><p>eg：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 比如你有一个图片在public文件夹下</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><strong>这样你就可以通过<code>/public</code>这个路由来查看你每一个public文件夹下的静态文件。</strong><br><em>比如你想要看public下的logo.png，路由到<code>/public/logo.png</code>即可</em>（当然，你也可以把路由定为<code>/myrouter</code>，就是可以自定义路由名）</p><h2 id="get方法详解"><a href="#get方法详解" class="headerlink" title="get方法详解"></a>get方法详解</h2><p>我们暂时通过一个栗子来看看</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1:3000/process_get<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        First Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        Last Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/index.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/process_get'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"first_name"</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>        <span class="token string">"last_name"</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>last_name    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the app is listening to the port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>在这里我们通过<code>res.sendFile()</code>方法将<code>index.html</code>文件传送到了路由为<code>/index.html</code>的页面中，然后通过form表单的跳转功能将数据传入到了<code>/process_get</code>中（json格式）</em></p><h2 id="post方法详解"><a href="#post方法详解" class="headerlink" title="post方法详解"></a>post方法详解</h2><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1:3000/process_post<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        First Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        Last Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 application/x-www-form-urlencoded 编码解析</span><span class="token keyword">var</span> urlencodedParser <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extended<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/index.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span> __dirname <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token string">"index.html"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/process_post'</span><span class="token punctuation">,</span> urlencodedParser<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 输出 JSON 格式</span>   <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">&#123;</span>       <span class="token string">"first_name"</span><span class="token operator">:</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>       <span class="token string">"last_name"</span><span class="token operator">:</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>last_name   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>   res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the app is listening to the port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="拓展bodyParser"><a href="#拓展bodyParser" class="headerlink" title="拓展bodyParser"></a>拓展bodyParser</h3><blockquote><p>这里又出现了一个常用的中间件<code>bodyParser</code>，这个是用来对post请求的请求体进行解析。使用非常简单，一般用以下两行代码：</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParse<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extended<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="入门基础"><a href="#入门基础" class="headerlink" title="入门基础"></a>入门基础</h4><p><strong>这里得讲几个基础知识，比如post请求的报文格式。</strong></p><div class="code-wrapper"><pre class="line-numbers language-reStructuredText" data-language="reStructuredText"><code class="language-reStructuredText">POST &#x2F;test HTTP&#x2F;1.1Host: 127.0.0.1:3000Content-Type: text&#x2F;plain; charset&#x3D;utf8Content-Encoding: gzipchyingp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>其中需要我们注意的有<code>Content-Type</code>、<code>Content-Encoding</code>以及报文主体：</p><ul><li>Content-Type：请求报文主体的类型、编码。常见的类型有<code>text/plain</code>、<code>application/json</code>、<code>application/x-www-form-urlencoded</code>。常见的编码有<code>utf8</code>、<code>gbk</code>等。</li><li>Content-Encoding：声明报文主体的压缩格式，常见的取值有<code>gzip</code>、<code>deflate</code>、<code>identity</code>。</li><li>报文主体：这里是个普通的文本字符串<code>chyingp</code>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>js相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docsify网站搭建</title>
    <link href="/2020/11/08/docsify%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/11/08/docsify%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="docsify网站搭建教程（已完结）"><a href="#docsify网站搭建教程（已完结）" class="headerlink" title="docsify网站搭建教程（已完结）"></a>docsify网站搭建教程（已完结）</h1><h2 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h2><blockquote><p>有人会说了：搞什么搞什么！你这个网站不是用hexo搭的么！？<br>好吧我承认这个博客是用hexo搭建的 ( •̀ ω •́ )✧，但是不得不说hexo的坑实在是太多了，我曾一度想要放弃这个hexo的网站而只去捣鼓docsify╰(<em>°▽°</em>)╯。鉴于我对docsify的经验了解（反正我对hexo的了解还很少），再加上有朋友要求我写一个docsify的教程（话说<a href="https://docsify.js.org/#/">官方文档</a>有那么难看懂吗），于是我就写下这篇文章（可能会断更），希望帮助一些小伙伴少踩一些坑。</p></blockquote><p><em>ps：我这篇教程还是基于<a href="https://docsify.js.org/#/">官方文档</a>的，所以索引顺序啥的还是会按照官方来。但是，本教程并非按官方照抄不误，有些官方的解释说明在教程中不会重复提及，本教程秉持着对于官方的补充以及对官方中一些坑的解决。当然，要是觉得我讲解的太low了，可以直接去看<a href="https://docsify.js.org/#/">官方文档</a>。</em></p><h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><blockquote><p>还是先看看官方怎么介绍docsify的吧：docsify 可以快速帮你生成文档网站。不同于 GitBook、Hexo 的地方是它不会生成静态的 <code>.html</code> 文件，所有转换工作都是在运行时。如果你想要开始使用它，只需要创建一个 <code>index.html</code> 就可以开始编写文档并直接<a href="https://docsify.js.org/#/zh-cn/deploy">部署在 GitHub Pages</a>。</p></blockquote><p><em>其实官网上还介绍了它的一些特性，有兴趣的可以去看看。</em></p><h2 id="即刻开始"><a href="#即刻开始" class="headerlink" title="即刻开始"></a>即刻开始</h2><p>安装docsify-cli工具</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i docsify-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>ps：</em></p><ul><li><em>这里使用npm安装，所以你首先要有安装node.js</em></li><li><em><code>-g</code>是全局安装（推荐），你也可以在单个项目中安装docsify-cli工具</em></li></ul><h2 id="clone项目"><a href="#clone项目" class="headerlink" title="clone项目"></a>clone项目</h2><p><strong>从github上拉取你的用来搭网站的仓库到本地</strong></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后你得到了你的本地仓库，譬如名如yourname.github.io（<font color=brown>这个仓库必须要是以.github.io结尾的</font>）的仓库，接下来就是初始化的步骤了。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>直接在这个仓库下输入初始化指令</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docsify init ./docs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这样会在根目录下创建一个名为docs的文件夹，<strong>下面会自动生成一些文件（都不要删）</strong></p><p>然后命令行会有如下提示<br><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201108201507457.png" alt=""></p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docsify serve docs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这样就可以实时查看预览效果。</p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>在docs文件夹下的index.html中</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-app</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>加载中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#main'</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>window.$docsify</code>对象就是我们将来的配置项的重要对象。</p><h1 id="Write-Docs"><a href="#Write-Docs" class="headerlink" title="Write Docs"></a>Write Docs</h1><blockquote><p>浅谈一下docsify的基本原理</p></blockquote><p>好吧也没什么高深的，就是在<code>index.html</code>的</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>也就是说docsify的精髓就是在这个docsify.min.js这个文件中，<u>有了这个文件docsify的强大功能和配置才能有效果。</u></p><h2 id="多页文档"><a href="#多页文档" class="headerlink" title="多页文档"></a>多页文档</h2><blockquote><p> 我们写出来的文档肯定必须是要有层次和结构的，即得是多页文档。<br> 如果是多页文档，那咱们就得定制一个有层级结构的侧边栏。</p></blockquote><p><em>其实<a href="https://docsify.js.org/#/">官方文档</a>已经把结构讲的很详细了，即</em></p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#x2F;└── docs    ├── README.md    ├── guide.md    └── zh-cn        ├── README.md        └── guide.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>那么docs文件夹下的<code>docs/README.md</code>就是/#/展示的内容，而<code>docs/guide.md</code>就是/#/guide展示的内容，<code>docs/zh-cn/READMD.md</code>就是/#/zh-cn/展示的内容。</p><p><strong>这一部分要深刻理解，因为要是没有对docsify的层级结构的清楚认识，我们就会不知道怎么将这一个个文档正确归类来形成一个清晰的结构（不管是对读者还是作者，会造成阅读困难）</strong></p><p>我个人是这么安排的：<strong><font color=#34b>每个README.md就设置成这一个部分或版块的介绍页，因为点击一个版块的时候是默认跳转到READ.md文件，所以正好就可以直接跳转到这个部分的介绍或简介。</font></strong></p><h2 id="定制侧边栏"><a href="#定制侧边栏" class="headerlink" title="定制侧边栏"></a>定制侧边栏</h2><p>定制侧边栏很简单，只需在同级的版块中创建一个<code>_sidebar.md</code>（<em>由此我们可以知道docsify的文件几乎就是由md文件组成</em>），然后再在<code>index.html</code>中开启</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    loadSidebar<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>_sidebar.md</code>的格式如下：</p><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">首页</span>](<span class="token url">/</span>)</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">指南</span>](<span class="token url">/guide</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><strong>于是乎你点击侧边栏的首页就会跳转到<code>/zh-cn/READMD.md</code>的内容中去，点指南就会跳转到<code>/zh-cn/guide.md</code>的内容中去。（请一定要把这个关系理清楚！）</strong></p><h2 id="嵌套侧边栏"><a href="#嵌套侧边栏" class="headerlink" title="嵌套侧边栏"></a>嵌套侧边栏</h2><blockquote><p>说实话我都不知道官方在这部分在说啥，感觉有点没讲到点子上</p></blockquote><p>说到底就是你每点击一个子级版块docsify会自动跳转到这个版块的README.md（要是我的话就是这个板块的介绍页），此时侧边栏也会跳转，会变成这个版块中的<code>_sidebar.md</code>中的层级内容。</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#x2F;└── docs    ├── README.md    ├── _sidebar.md    ├── guide.md    └── zh-cn        ├── README.md        ├── _sidebar.md        └── guide.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong><font color=#34b>也就是说你点击了zh-cn所在的锚点，docsify就会跳转到/zh-cn/README.md，然后侧边栏就会改为加载/zh-cn/_sidebar.md</font></strong></p><h3 id="一个坑"><a href="#一个坑" class="headerlink" title="一个坑"></a>一个坑</h3><blockquote><p> 在多级的<code>_sidebar.md</code>中，我们可能会不知道怎么去设置文件中的链接（<em>反正我是踩进坑了的</em>）</p></blockquote><p>假如我有一个第三级的_sidebar.md，其中的内容就该这么写</p><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">介绍</span>](<span class="token url">/zh-cn/son</span>)</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">第一个内容</span>](<span class="token url">/zh-cn/son/content</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><em>反正一定要把层级结构理清楚</em></p><h3 id="又一个坑"><a href="#又一个坑" class="headerlink" title="又一个坑"></a>又一个坑</h3><blockquote><p>当我们最开始接触<code>_sidebar.md</code>中的链接时，有可能会感到疑惑，不知道它自己的url链接规则</p></blockquote><p>其实docsify的url是用一个起始hash锚点来规划的，先是一个<code>#</code>，然后再是我们要写的链接，eg：</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">(&#x2F;zh-cn&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这个链接就会转到<u>yourname.github.io/#/zh-cn/</u></p><h1 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h1><h2 id="通过HTML"><a href="#通过HTML" class="headerlink" title="通过HTML"></a>通过HTML</h2><blockquote><p>也没啥多说的：就像官方给的那样增加<code>&lt;nav&gt;</code>标签</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>EN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/zh-cn/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>还是要提一嘴：<em>这里的链接和之前的都不一样，是以<code>#/</code>开头的</em></p><h2 id="通过配置文件"><a href="#通过配置文件" class="headerlink" title="通过配置文件"></a>通过配置文件</h2><blockquote><p>这里的配置方法官方已经讲的很详细了，我在这里就不再重复了。<br>为什么不重复（lian dei shuo）了，因为这种方法感觉效果和html差不多，但是步骤又有点麻烦了。</p><p>嵌套啥的也不说了吧，反正也很简单，官方也讲的很详细了<br>这里就放个图意思意思吧。</p></blockquote><p><img src="https://docsify.js.org/_images/zh-cn/nested-navbar.png" alt=""></p><p><em>但是要注意的是：嵌套式的导航必须得是用配置文件配置</em></p><h1 id="CoverPage"><a href="#CoverPage" class="headerlink" title="CoverPage"></a>CoverPage</h1><blockquote><p>终于要讲封面了，毕竟这个docsify的美化效果基本上就是这个封面来撑场子了o(￣▽￣)ｄ</p></blockquote><h2 id="basic-usage"><a href="#basic-usage" class="headerlink" title="basic usage"></a>basic usage</h2><p>得先在<code>index.html</code>中设置配置项：</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    coverpage<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后就可以在<code>_coverpage.md</code>中写入你想要的内容：<br><em>这里官网已经讲的很好了，其中的代码也写得很详细，直接按照官网的样子来就好了。</em></p><h1 id="主题（theme）"><a href="#主题（theme）" class="headerlink" title="主题（theme）"></a>主题（theme）</h1><blockquote><p>第二个对美化有撑场子作用的东西（这里我特意更改了官方顺序）</p></blockquote><p><strong>怎么用咧？</strong></p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify/themes/vue.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong><em>这个link就是你应用的主题的地址，当你修改其中的href值就可以更换主题了。</em></strong></p><p>目前<code>docsify</code>官方中列出来的所有支持主题和预览效果如下：</p><p><code>Vue</code>（默认主题）：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify/themes/vue.css&quot;&gt;</code><br><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/d-o-c-g-10.png" alt=""><code>Buble</code>：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify/themes/buble.css&quot;&gt;</code> <img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/d-o-c-g-11.png" alt=""></p><p><code>Dark</code>：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify/themes/dark.css&quot;&gt;</code></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/d-o-c-g-12.png" alt=""></p><p><code>Pure</code>：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify/themes/pure.css&quot;&gt;</code></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/d-o-c-g-13.png" alt=""></p><p><code>Dolphin</code>：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify/themes/dolphin.css&quot;&gt;</code></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/d-o-c-g-14.png" alt=""></p><p><code>Docsify-Themeable-Default</code>：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/docsify-themeable@0/dist/css/theme-defaults.css&quot;&gt;</code></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/d-o-c-g-15.png" alt=""></p><p><code>Docsify-Themeable-Sample</code>：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/docsify-themeable@0/dist/css/theme-simple.css&quot;&gt;</code></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/d-o-c-g-16.png" alt=""></p><p><code>Docsify-Themeable-Sample-Dark</code>：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/docsify-themeable@0/dist/css/theme-simple-dark.css&quot;&gt;</code></p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/d-o-c-g-17.png" alt=""></p><p><em>主题不多，且用且珍惜吧（或者你可以自己写一个）</em></p><h1 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h1><blockquote><p>还是那句话，<a href="https://docsify.js.org/#/">官方文档</a>中的配置项写得详细且全面，建议直接去看官方的说明。我在本教程中只介绍几个我用上的配置项（个人认为比较常用的），以便缩短你的阅读时间。</p></blockquote><h2 id="el"><a href="#el" class="headerlink" title="el"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=el">el</a></h2><p>docsify 初始化的挂载元素，可以是一个 CSS 选择器，默认为 <code>#app</code> 如果不存在就直接绑定在 <code>body</code> 上。</p><p><em>初始化项目之后最初就会有的配置项，默认是<code>&#39;#app&#39;</code>,即绑定了<code>div#app</code>这个元素。</em></p><h2 id="repo"><a href="#repo" class="headerlink" title="repo"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=repo">repo</a></h2><p>配置仓库地址或者 <code>username/repo</code> 的字符串，会在页面右上角渲染一个 <a href="http://tholman.com/github-corners/">GitHub Corner</a> 挂件。</p><p><em>这个repo建议配置（能够美化你的docsify，配置后会在coverpage上显示Github挂件。</em></p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  repo<span class="token operator">:</span> <span class="token string">'docsifyjs/docsify'</span><span class="token punctuation">,</span>  <span class="token comment">// or</span>  repo<span class="token operator">:</span> <span class="token string">'https://github.com/yourname/yourrepo/'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="maxLevel"><a href="#maxLevel" class="headerlink" title="maxLevel"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=maxlevel">maxLevel</a></h2><p>默认情况下会抓取文档中所有标题渲染成目录，可配置最大支持渲染的标题层级。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  maxLevel<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><em>因为这个的<u>默认值是6</u>，所以要是不进行设置的话，可能会对侧边栏层级结构造成影响进而影响美观，设置为较小的值则对侧边栏的展开效果会更好（比如4）</em></p><h2 id="relativePath"><a href="#relativePath" class="headerlink" title="relativePath"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=relativepath">relativePath</a></h2><p>如果该选项设为 <strong>true</strong> ，那么链接会使用相对路径。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 启用相对路径</span>  relativePath<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 禁用相对路径（默认值）</span>  <span class="token comment">// relativePath: false,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>将必须写成绝对路径改成允许写入相对路径并可识别，这种好处就不用多说了吧||ヽ(<em>￣▽￣</em>)ノ</strong></p><p>eg：<em>我有一个三个层级的目录结构，然后我要在<code>_sidebar.md</code>中写绝对路径，可能需要这样：</em></p><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">爬虫</span>](<span class="token url">/zh-cn/notes/python/spider</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>但是我用绝对路径只需要这样：</em></p><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">爬虫</span>](<span class="token url">spider</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>当多个层级中有多个文档时，相对路径简直不要太香。</strong></p><h2 id="name"><a href="#name" class="headerlink" title="name"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=name">name</a></h2><p>文档标题，会显示在侧边栏顶部。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'docsify'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><em>这个可以用来展示你的大名，配合<code>nameLink</code>之后点击这个名字之后跳转到docsify的首页。</em></p><h2 id="logo"><a href="#logo" class="headerlink" title="logo"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=logo">logo</a></h2><blockquote><p>可以和name配置项配套使用，也可以单独使用，也相当于是展示个人信息的方式</p></blockquote><p>在侧边栏中出现的网站图标，你可以使用<code>CSS</code>来更改大小</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  logo<span class="token operator">:</span> <span class="token string">'/_media/icon.svg'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><em>其实我还不知道怎么用CSS更改大小，知道的大佬还请在评论区指教我一下</em></p><h2 id="nameLink"><a href="#nameLink" class="headerlink" title="nameLink"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=namelink">nameLink</a></h2><p>点击文档标题<code>name</code>后跳转的链接地址。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  nameLink<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token comment">// 按照路由切换</span>  nameLink<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'/zh-cn/'</span><span class="token operator">:</span> <span class="token string">'/zh-cn/'</span><span class="token punctuation">,</span>    <span class="token string">'/'</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>就是和<code>name</code>配置项配合使用的。</em></p><h2 id="routerMode"><a href="#routerMode" class="headerlink" title="routerMode"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=routermode">routerMode</a></h2><p>可以用这个配置项更改url的路由模式（默认的是hash）</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  routerMode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span> <span class="token comment">// default: 'hash'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><em>其实我也不太清楚history和hash路由的原理区别，我知道的是改用history模式的话url就不会有hash路由特有的<code>#</code>，而是直接是<code>/.../...</code>这种样子。</em></p><p>ps：<font color=#34b>要是改成了history，因为没有了<code>#</code>，有些在链接中写入了<code>#</code>的地方就得修改一下（去掉<code>#</code>）</font></p><h2 id="notFoundPage"><a href="#notFoundPage" class="headerlink" title="notFoundPage"></a><a href="https://docsify.js.org/#/zh-cn/configuration?id=notfoundpage">notFoundPage</a></h2><p>在找不到指定页面时加载<code>_404.md</code>:</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  notFoundPage<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>加载自定义404页面:</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  notFoundPage<span class="token operator">:</span> <span class="token string">'my404.md'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><blockquote><p><strong>docsify</strong>内置的代码高亮工具是 <a href="https://github.com/PrismJS/prism">Prism</a>。Prism 默认支持的语言基本有：markup，html，xml，svg，mathml，css，js（反正其他的我也不认识😜）。说到底，它默认支持的语言还是很有限的（python啥的后端语言都没高亮），于是我们需要额外的代码高亮。</p></blockquote><p><a href="https://prismjs.com/#supported-languages">添加额外的语法支持</a>需要通过CDN添加相应的<a href="https://cdn.jsdelivr.net/npm/prismjs@1/components/">语法文件</a>来配置高亮显示，eg：</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/prismjs@1/components/prism-php.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>这样我们就有了bash和php的语法高亮。</p><p><em><font color=brown>ps：这些语法文件和docsify的库文件一样，都得放到body中，而不是head标签。（我反正之前有掉到坑里）</font></em></p><h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><blockquote><p>鉴于插件这个部分的安装都很简单（只需要引入文件并修改配置项就行），而且<a href="https://docsify.js.org/#/zh-cn/plugins">官方文档</a>讲得都还不错，我在这里就不细细介绍了，就只对几个我认为比较好比较必要的插件做一个推荐。</p></blockquote><ul><li><h2 id="全文搜索-Search"><a href="#全文搜索-Search" class="headerlink" title="全文搜索 - Search"></a><a href="https://docsify.js.org/#/zh-cn/plugins?id=全文搜索-search">全文搜索 - Search</a></h2><p>会在侧边栏中出现一个搜索框，实现一个还不错的全局搜索功能。但是配置项还有一点麻烦。</p></li><li><h2 id="复制到剪贴板"><a href="#复制到剪贴板" class="headerlink" title="复制到剪贴板"></a><a href="https://docsify.js.org/#/zh-cn/plugins?id=复制到剪贴板">复制到剪贴板</a></h2><p>顾名思义，实现复制markdown中代码的功能。</p><p>详情可参考 <a href="https://github.com/jperasmus/docsify-copy-code/blob/master/README.md">README.md</a> 。</p></li><li><h2 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a><a href="https://docsify.js.org/#/zh-cn/plugins?id=pagination">Pagination</a></h2><p>docsify的一个分页导航插件。</p></li><li><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a><a href="https://docsify.js.org/#/zh-cn/plugins?id=字数统计">字数统计</a></h2><p>它提供了统计中文汉字和英文单词的功能，并且排除了一些markdown语法的特殊字符例如*、-等</p><p>相关配置项可参考<a href="https://github.com/827652549/docsify-count">document</a>。</p><p><em>这个插件的阅读时长的估计感觉很离谱，目前我还没找到解决的方法。。</em></p></li><li><h2 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a><a href="https://docsify.js.org/#/zh-cn/plugins?id=emoji">emoji</a></h2><p>默认是提供 emoji 解析的，​但是它不是精准的，因为没有处理非 emoji 的字符串。如果你需要正确解析 emoji 字符串，你可以引入这个插件。</p></li><li><h2 id="图片缩放-Zoom-image"><a href="#图片缩放-Zoom-image" class="headerlink" title="图片缩放 - Zoom image"></a><a href="https://docsify.js.org/#/zh-cn/plugins?id=图片缩放-zoom-image">图片缩放 - Zoom image</a></h2><p>顾名思义，实现图片查看和图片缩放功能。</p></li><li><h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a><a href="https://docsify.js.org/#/zh-cn/plugins?id=gitalk">Gitalk</a></h2><blockquote><p>如果你想要你的docsify网站拥有评论功能，你可以安装这个插件</p></blockquote><p>这个插件是一个现代化的，基于Preact和Github Issue的评论系统。（相信很多人都用过Github Issue评论系统并在里面发布过评论吧）</p><p><em>ps：有可能会不稳定，或者是同步不及时的情况，可以酌情考虑安装。</em></p><p><em>注意：docsify还提供了<a href="https://docsify.js.org/#/zh-cn/plugins?id=disqus">Disqus</a>评论系统。但是为什么我没有介绍呢，很简单——这玩意需要翻墙。</em></p></li></ul><h1 id="小白向（初识git）"><a href="#小白向（初识git）" class="headerlink" title="小白向（初识git）"></a>小白向（初识git）</h1><blockquote><p>如果你很熟悉git操作，那么你不用往下看了（相当于这篇教程你已经看完了）；如果你完全不知道怎么用git推代码，或者你会问我git是神马东西，你可以选择往下看了（或者在网上随便找一篇写得好的git入门文章）</p></blockquote><p>你可能会问了：我这都搞了这么半天了，但是还是只能在本地上看到我的文档网站，我怎么通过网络访问到我的docsify网站呢？</p><p>A：使用git。</p><p>步骤：</p><ol><li><p>在你用于编辑代码的编辑器中（不管你是vscode还是sublime还是webstorm），打开终端，进入到你的docsify仓库的根目录，然后。。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">'first push'</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><em>这样你的docsify项目的代码就同步到了你的github云仓库中</em></p></li><li><p>然后登录你的github账号，进入到你的那个有docsify代码的仓库中。点击Settings</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/20201110204042.png" alt=""></p><p>然后转到GitHub Pages那一项，将Source的root目录改成docs目录</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201110204430056.png" alt=""></p><p>点击save之后就可以看到<code>Your site is published at http://yourname.github.io</code>，然后按照这个网址进行访问，就是你搭好的docsify文档网站。</p></li></ol><h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><p>我的这篇教程有少部分是借鉴了<a href="https://www.cnblogs.com/throwable/p/13605289.html">Throwable的教程</a>，在此将他的链接放出，大家要是想看那篇教程可以直接点进去（其实确实写的挺不错的）。</p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docsify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Screep教程</title>
    <link href="/2020/10/24/Screep%E6%95%99%E7%A8%8B/"/>
    <url>/2020/10/24/Screep%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Screeps教程（已断更）"><a href="#Screeps教程（已断更）" class="headerlink" title="Screeps教程（已断更）"></a>Screeps教程（已断更）</h1><blockquote><p>Screeps 是一款面向编程爱好者的开源 MMO RTS 沙盒游戏，其核心机制是为您的单位编写 AI。您可以通过编写 JavaScript 来控制自己的殖民地。您的代码将 24/7 全天候不间断地运行在一个庞大世界中。不仅如此，这个世界同时也容纳了许许多多和您一样的玩家。<font color=#34b>——来自steam页面介绍原文</font></p></blockquote><p>嗯，既然是用JS游玩，那就太符合我现阶段研究JS的需求了😁。但是这个游戏有点需要记忆的东西（况且教程又是英文常规操作），于是就先写下了这篇教程（可能还能帮助到其他人吧）——说干就干。</p><h1 id="GET-START"><a href="#GET-START" class="headerlink" title="GET START"></a>GET START</h1><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><ul><li><font size=4>Room</font><p>这是你的大本营，你的前期开荒操作都在这里</p></li><li><font size=4>spawn</font><p>你最开始产生unit（我个人理解为最初劳动力）的地方</p><p><strong>每一把开局时room里就会有一个spawn，一般默认名字是Spawn1</strong></p></li><li><font size=4>creeps</font><p>那些个units在游戏中被称作为”creeps”</p></li></ul><h2 id="Create-your-first-creep"><a href="#Create-your-first-creep" class="headerlink" title="Create your first creep"></a>Create your first creep</h2><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201024224511345.png" alt=""></p><p>通过Game这个对象（全局对象？）我们可以定位到一个spawn（<strong>使用Game下的<code>spawns[]</code>方法，传入一个spawn的名字</strong>）</p><p>然后我们就可以用spawn下面的<code>spawnCreep()</code>方法创建一个creep了！（这里面有点对象迭代的思想）</p><p><em><code>spawnCreep()</code>中有几个参数，主要定义了这个creep的名字和它的一些属性</em></p><p>比如你要是想要一个叫Harvester1的矿工work creep，你可以用以下代码：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">spawnCreep</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token constant">WORK</span><span class="token punctuation">,</span> <span class="token constant">CARRY</span><span class="token punctuation">,</span> <span class="token constant">MOVE</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Harvester1'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201025114350517.png" alt=""></p><p>在游戏窗口的最顶部，有四个可点击按钮，<strong>view（视窗模式）是初始默认选中的，在此模式下你可以查看你的spawn，creeps等的属性信息，也可以查看地形、坐标等简单信息。</strong></p><p><strong><font color=#34b>通过在view下选中一个spawn或creep就可以查看这个元素的基本信息。</font></strong>（信息会出现在右边栏）</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201025115525143.png" alt=""></p><h1 id="Get-Resource"><a href="#Get-Resource" class="headerlink" title="Get Resource"></a>Get Resource</h1><blockquote><p>当你制造出了第一个worker creep的时候，恭喜你，你可以开始挖矿了！</p></blockquote><h2 id="Do-it-in-script"><a href="#Do-it-in-script" class="headerlink" title="Do it in script"></a>Do it in script</h2><p>如果你想要你的creep一直不停歇的挖矿，你要是还是用console显然是不够了的，这时候就得用上Script区域。</p><p><strong>Script区域里是你写好的script代码，当你运行代码时，它就会一直运行下去。</strong></p><blockquote><p>正式开始了编程的旅程</p></blockquote><h2 id="Go-to-work！"><a href="#Go-to-work！" class="headerlink" title="Go to work！"></a>Go to work！</h2><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/QQ截图20201025121306.png" alt=""></p><p>使用Game对象下的<code>creeps[]</code>来定位到一个creep（通过名字定位）</p><p>接着使用Room对象下的<code>find()</code>方法来找到一个资源点</p><h3 id="FIND-SOURCES"><a href="#FIND-SOURCES" class="headerlink" title="FIND_SOURCES"></a><code>FIND_SOURCES</code></h3><p>这是一个查找资源的一个内置常量，和之后的<code>ERR_NOT_IN_RANGE</code>一样。</p><p><strong>要是将这个常量写到<code>find()</code>方法中，则会选定到所有room中的资源<font color=#34b>（返回的是一个数组，索引值越大资源越远）</font></strong></p><p>然后在module.exports.loop这个全局方法中，我们的creep会按照代码一直loop执行。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> creep <span class="token operator">=</span> Game<span class="token punctuation">.</span>creeps<span class="token punctuation">[</span><span class="token string">'Harvester1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sources <span class="token operator">=</span> creep<span class="token punctuation">.</span>room<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">FIND_SOURCES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span><span class="token function">harvest</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Carry-and-come-back"><a href="#Carry-and-come-back" class="headerlink" title="Carry and come back"></a>Carry and come back</h2><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/QQ截图20201025132346.png" alt=""></p><p>想要满载的creep返回到spawn里去，我们可以用Creep下的<code>transfer()</code>方法</p><p>然后通过Creep下的<code>.store.getFreeCapacity()</code>我们可以判断它到底还能不能装下去，即用<code>.store.getFreeCapacity() &gt; 0</code>。</p><p>最后我们的代码会变成这样：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> creep <span class="token operator">=</span> Game<span class="token punctuation">.</span>creeps<span class="token punctuation">[</span><span class="token string">'Harvester1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">getFreeCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> sources <span class="token operator">=</span> creep<span class="token punctuation">.</span>room<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">FIND_SOURCES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span><span class="token function">harvest</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> creep<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">RESOURCE_ENERGY</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>稍微提一嘴，<code>moveTo()</code>方法可以让creep移动到参数中指定的地点。</em></p><blockquote><p>在去每一个地点时，我们都用到了常量<code>ERR_NOT_IN_RANGE</code>，这是为了判断这个资源或地点是否就在跟前。（<u>建议每次有移动时判断一下是否在附近，不然就移动不了了</u>）</p></blockquote><h1 id="awsl"><a href="#awsl" class="headerlink" title="awsl"></a>awsl</h1><blockquote><p>不要以为你的creep就会一直这么卖力的工作下去，它也会累死的！(ToT)/~~~</p></blockquote><p><strong>每个creep都有一个生命周期：1500 game ticks</strong></p><h1 id="I-need-More"><a href="#I-need-More" class="headerlink" title="I need More!"></a>I need More!</h1><blockquote><p>既然知道你的creep会die，那么我们只能不停地制造新的creep了</p></blockquote><p>还是熟悉的配方：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">spawnCreep</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token constant">WORK</span><span class="token punctuation">,</span> <span class="token constant">CARRY</span><span class="token punctuation">,</span> <span class="token constant">MOVE</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Harvester2'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>warning：<font color=brown>你得首先攒足200能量点，不然只会返回ERR_NOT_ENOUGH_ENERGY（-6）</font></p><p><em>当我们的第二个creep被创造出来之后，我们的代码也要改改了</em></p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> Game<span class="token punctuation">.</span>creeps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> creep <span class="token operator">=</span> Game<span class="token punctuation">.</span>creeps<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">getFreeCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> sources <span class="token operator">=</span> creep<span class="token punctuation">.</span>room<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">FIND_SOURCES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span><span class="token function">harvest</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">RESOURCE_ENERGY</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>用for in循环实现了所有的creeps都去搬矿了</p></blockquote><h1 id="Improve-the-code"><a href="#Improve-the-code" class="headerlink" title="Improve the code"></a>Improve the code</h1><h2 id="Create-module"><a href="#Create-module" class="headerlink" title="Create module"></a>Create module</h2><p>首先创建一个module来分开管理我们的代码，取名为<code>roleHarvester</code>（则它在script中的模块名为role.harvester）</p><p>里面有一个属性名为<code>run</code>，这个属性（其实是一个方法）可以放入入我们之前写好的代码块，之后在模块导入时我们就用这个<code>run</code>方法中的代码来执行。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> roleHarvester <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** @param &#123;Creep&#125; creep **/</span>    <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">creep</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">getFreeCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> sources <span class="token operator">=</span> creep<span class="token punctuation">.</span>room<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">FIND_SOURCES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span><span class="token function">harvest</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">RESOURCE_ENERGY</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> roleHarvester<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>记住，要创建模块就要在main方法下面输入module的名字，然后在这个模块里面写上如上的代码</em></p><h2 id="Use-the-Module"><a href="#Use-the-Module" class="headerlink" title="Use the Module"></a>Use the Module</h2><p><strong>在主模块（main module）之外，我们得建立一个用来引入模块的变量，用<code>require()</code>全局方法可以指明是哪个模块。</strong></p><p>之后我们就可以在主模块中用这个模块变量来省去很多工作量了：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> roleHarvester <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'role.harvester'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> Game<span class="token punctuation">.</span>creeps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> creep <span class="token operator">=</span> Game<span class="token punctuation">.</span>creeps<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>        roleHarvester<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>creep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><blockquote><p>通过controller，我们可以建造更多的建筑或工具，但是前提是你controller的level足够高。。</p></blockquote><h2 id="upgrade-it"><a href="#upgrade-it" class="headerlink" title="upgrade it"></a>upgrade it</h2><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201025202115487.png" alt=""></p><p>首先咱们还是得创建一个用来升级controller的creep，就先叫做Upgrader1</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">spawnCreep</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token constant">WORK</span><span class="token punctuation">,</span> <span class="token constant">CARRY</span><span class="token punctuation">,</span> <span class="token constant">MOVE</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Upgrader1'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>但是这个Upgrader1被产出之后，他还是做着和harvester一样的事。</p></blockquote><font size=4>new concept: Memory</font><p>通过Memory，我们可以自定义每个creep的角色（role），然后使其做不同的工作。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">Game<span class="token punctuation">.</span>creeps<span class="token punctuation">[</span><span class="token string">'Harvester1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>memory<span class="token punctuation">.</span>role <span class="token operator">=</span> <span class="token string">'harvester'</span><span class="token punctuation">;</span>Game<span class="token punctuation">.</span>creeps<span class="token punctuation">[</span><span class="token string">'Upgrader1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>memory<span class="token punctuation">.</span>role <span class="token operator">=</span> <span class="token string">'upgrader'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><strong>你可以在每一个creep的状态页查看memory，也可以直接在下方的Memory栏中查看</strong></p><p>现在我们再定义一个module来使Upgrader1真正工作起来，发挥它本应的作用。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> roleUpgrader <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** @param &#123;Creep&#125; creep **/</span>    <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">creep</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span>store<span class="token punctuation">[</span><span class="token constant">RESOURCE_ENERGY</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> sources <span class="token operator">=</span> creep<span class="token punctuation">.</span>room<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">FIND_SOURCES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span><span class="token function">harvest</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span><span class="token function">upgradeController</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span>room<span class="token punctuation">.</span>controller<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ERR_NOT_IN_RANGE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                creep<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span>room<span class="token punctuation">.</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> roleUpgrader<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>这里我们用到了creep的<code>upgradeController</code>方法，用这个方法去升级controller</strong></p><p>接着咱们把模块导入到main模块中去：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> roleHarvester <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'role.harvester'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> roleUpgrader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'role.upgrader'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> Game<span class="token punctuation">.</span>creeps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> creep <span class="token operator">=</span> Game<span class="token punctuation">.</span>creeps<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>role <span class="token operator">==</span> <span class="token string">'harvester'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            roleHarvester<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>creep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>creep<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>role <span class="token operator">==</span> <span class="token string">'upgrader'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            roleUpgrader<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>creep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong><font color=brown>每过20000 ticks，controller会自动掉一级，掉完到0级你的room就没了</font>，所以至少确保有一个creep进行升级工作。</strong></p><h1 id="Build-Structure"><a href="#Build-Structure" class="headerlink" title="Build Structure"></a>Build Structure</h1><font size=4>new concept: Extension</font><p>Extension是建造更大的creep的必需品，但是你得先扩展spawn，<u>不然300能量点的储量怎么够呢</u></p><h2 id="create-Extension"><a href="#create-Extension" class="headerlink" title="create Extension"></a>create Extension</h2><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201026213743220.png" alt=""></p><p>首先，你必须要创建一个creep用来专门搞出extension，我们暂时就把这种creep叫做builder了，<strong>然后直接在产生creep的命令中写上它的memory（其实之前的creep都可以这么做）</strong></p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">Game<span class="token punctuation">.</span>spawns<span class="token punctuation">[</span><span class="token string">'Spawn1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">spawnCreep</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token constant">WORK</span><span class="token punctuation">,</span> <span class="token constant">CARRY</span><span class="token punctuation">,</span> <span class="token constant">MOVE</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Builder1'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> memory<span class="token operator">:</span> <span class="token punctuation">&#123;</span> role<span class="token operator">:</span> <span class="token string">'builder'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="Create-Builder-Role"><a href="#Create-Builder-Role" class="headerlink" title="Create Builder Role"></a>Create Builder Role</h2><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/image-20201026222017249.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>games</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>steam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canvas细节讲解</title>
    <link href="/2020/10/23/canvas%E7%BB%86%E8%8A%82%E8%AE%B2%E8%A7%A3/"/>
    <url>/2020/10/23/canvas%E7%BB%86%E8%8A%82%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Canva的细节讲解（已断更）"><a href="#Canva的细节讲解（已断更）" class="headerlink" title="Canva的细节讲解（已断更）"></a>Canva的细节讲解（已断更）</h1><h2 id="canva上下文"><a href="#canva上下文" class="headerlink" title="canva上下文"></a>canva上下文</h2><blockquote><p>首先你得搞清楚CanvasRenderingContext2D（即上下文对象）和canvas的DOM对象是两个不一样的东西</p></blockquote><p><strong>通过canvas的<code>getContext()</code>方法，我们可以获取一个canvas的上下文对象（<font color=#34b>注意，我没有说是一个上下文对象</font>）</strong></p><p><em>而我们能不能再创建一个上下文对象呢？（在原有创建的基础上）</em></p><p>warning：<strong>坑来了，<font color=brown>每个<code>&lt;canvas&gt;</code>元素只有一个上下文对象</font>，我们每次调用<code>getContext()</code>方法都会返回相同的上下文对象</strong></p><blockquote><p>我们再来说说第二个坑：<br>canvasDOM元素和上下文对象傻傻分不清</p></blockquote><p>warning：<em>我们每次都是用ctx（个人取名习惯，<u>下文皆用此名</u>）去绘制图形，而<code>canvas</code>只是跟其字面意思一样——“画布”罢了</em></p><hr><h2 id="绘制图形三部曲（入门级）"><a href="#绘制图形三部曲（入门级）" class="headerlink" title="绘制图形三部曲（入门级）"></a>绘制图形三部曲（入门级）</h2><ol><li><code>beginPath()</code>：新建路径</li><li><code>moveTo()</code>：开始子路径</li><li><code>lineTo()</code>：开始绘制</li></ol><blockquote><p>嗯嗯，别忘了他们都是ctx的方法。。。</p></blockquote><hr><h2 id="当你想要闭合图形时"><a href="#当你想要闭合图形时" class="headerlink" title="当你想要闭合图形时~"></a>当你想要闭合图形时~</h2><p>一般来说，我们可以不用刻意的去用<code>lineTo()</code>来闭合图形，<strong>因为当你使用<code>fill()</code>方法之后，图形的看上去就已经闭合上了</strong>（<em>然而轮廓没有闭合）</em></p><p>但事实上，不管你用<code>lineTo()</code>还是<code>fill()</code>都是没有真正意义上闭合上的<strong>（<code>lineTo()</code>只是表现出几条线段共用了一个起点和一个终点）</strong></p><p>所以：<strong><font color=#34b>当你想闭合图形时，用<code>closePath()</code>方法吧</font></strong></p><hr><h2 id="图形属性"><a href="#图形属性" class="headerlink" title="图形属性"></a>图形属性</h2><blockquote><p>个人认为这个部分比较重要，就列出了以下的表格<br>（都是一些常用的）</p></blockquote><div class="table-container"><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>fillStyle</td><td>设置填充颜色和渐变，图案</td></tr><tr><td>font</td><td>设置文本时的CSS字体</td></tr><tr><td>globalAlpha</td><td>设置全局透明度</td></tr><tr><td>lineWidth</td><td>外框线的宽度</td></tr><tr><td>textAlign</td><td>文本水平对齐方式</td></tr><tr><td>textBaseLine</td><td>文本垂直对齐方式</td></tr><tr><td>shadwoColor</td><td>下拉阴影的颜色</td></tr><tr><td>strokeStyle</td><td>勾勒线的颜色，渐变，图案</td></tr></tbody></table></div><p><strong><font color=brown>看清楚，这些个都是属性，而不是ctx的方法！</font></strong></p><p>eg:</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token comment">// 而不是</span>ctx<span class="token punctuation">.</span><span class="token function">fillStyle</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这锅是错滴</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><hr><h2 id="圆弧的部分细节"><a href="#圆弧的部分细节" class="headerlink" title="圆弧的部分细节"></a>圆弧的部分细节</h2><h3 id="关于arc"><a href="#关于arc" class="headerlink" title="关于arc()"></a>关于<code>arc()</code></h3><p><u>六个参数：圆心x，圆心y，radius，起始弧度，结束弧度，是否顺时针（false/true）</u></p><p><em>除了参数难记，很多情况下会忘记以下这点：</em></p><p><strong><font color=brown>它会首先将当前点和弧形的起点用一条直线连接</font></strong>，要是不注意这点，可能会变成这样：</p><p><img src="https://gitee.com/rogerskelamen/mdpic/raw/master/img/arc.png" alt=""></p><p>所以可以直接用</p><ul><li><code>moveTo</code>移到起始点，或者</li><li>干脆<code>beginPath</code>重开一局</li></ul><h3 id="弧度制？角度制？"><a href="#弧度制？角度制？" class="headerlink" title="弧度制？角度制？"></a>弧度制？角度制？</h3><blockquote><p>好吧，你稍微看一下文档就知道<code>arc()</code>的第四五个参数是弧度制<br>但是我们总是钟爱角度制一样想都不想就用角度制😂</p></blockquote><p>所以，我们有必要整一个工具函数（<font color=#34b>极度推荐在用canvas画图时提前把这个函数写上去</font>）</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">rads</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><em>之后就可以直接调用<code>rads()</code>。</em></p><h3 id="rads-0-究竟在哪？"><a href="#rads-0-究竟在哪？" class="headerlink" title="rads(0)究竟在哪？"></a><code>rads(0)</code>究竟在哪？</h3><p><strong>A：<u>位于圆心x轴正方向与圆弧的交点</u></strong></p><hr><h2 id="矩形部分细节"><a href="#矩形部分细节" class="headerlink" title="矩形部分细节"></a>矩形部分细节</h2><blockquote><p>矩形四大方法：<code>fillRect()</code>、<code>strokeRect()</code>、<code>clearRect()</code>、<code>rect()</code>(这个用到的极少)</p></blockquote><ul><li><p><code>fillRect()</code>和<code>strokeRect()</code></p><p>两者很相似，参数都是：前两个指定矩形的左顶点，后两个指定矩形的宽和高。</p><p><strong>前者使用<u>当前的<code>fillStyle</code>属性来填充矩形</u>，而后者使用<u>当前的<code>strokeStyle</code>属性来勾勒外边框</u></strong></p></li><li><p><code>clearRect()</code></p><p>参数也是一样的，但是使用<u>透明的空画布</u>来填充矩形。</p></li><li><p><code>rect()</code></p><p>warning；<em>前几个方法都不会修改当前的路径，但是这个会改变</em></p><p><em>而且它就是只有改变路径这一个功能了（你无法直观的从canvas上看出效果），着实鸡肋。</em></p></li></ul><hr><h2 id="关于背景图片"><a href="#关于背景图片" class="headerlink" title="关于背景图片"></a>关于背景图片</h2><blockquote><p>要使用背景图片的图案而不是颜色来填充或勾勒（有勾勒这种操作么），可以将<code>fillStyle</code>或者<code>strokeStyle</code>属性设置成<code>CanvasPattern</code>对象，该对象可以通过调用ctx的<code>createPattern()</code>方法返回相应的值</p></blockquote><p>eg：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myimage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">'repeat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>注意：<strong><code>createPattern()</code>的第一个参数必须是一个<code>&lt;img&gt;</code>元素，<code>&lt;canvas&gt;</code>元素或<code>&lt;video&gt;</code>元素（<font color=#34b>或者是通过<code>Image()</code>构造出的图片元素</font>）</strong></p><hr><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><blockquote><p>如果你用的是vscode编辑器来编写的这些和canvas有关的代码，你会发现vscode默认不会提供代码补全，这里讲一个方法：</p></blockquote><p><strong>在获取canvas元素的前一行写上如下注释：</strong></p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** @type &#123;HTMLCanvasElement&#125; */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><em>则在之后vscode就能识别出是canvas元素并给出代码补全了</em></p><hr>]]></content>
    
    
    <categories>
      
      <category>js相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编入门篇</title>
    <link href="/2020/10/21/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <url>/2020/10/21/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="汇编入门篇"><a href="#汇编入门篇" class="headerlink" title="汇编入门篇"></a>汇编入门篇</h1><blockquote><p>在8086CPU中，任意时刻， <u>CPU将CS：IP所指向的内容全部当成指令来执行。</u></p></blockquote><p><strong><em>在内存中，指令和数据是没有区别的， <u>都是二进制信息</u>。</em></strong><br><strong><em>只有在工作中，CPU才将有的信息当作指令，有的信息当作数据，</em></strong><br><strong>硬要说的话，<font color=orange>CPU将CS:IP指向的内存单元中的内容当作指令。</font></strong></p><blockquote><p>在8086CPU中，所有寄存器的初始值是啥样的？<strong>AX ~ DX中的值都是0，<br>而ES、CS、SS、DS都是一个特定的基址值（好像是07CFH），其他寄存器中的值也是置为0</strong></p></blockquote><p><strong>DS和数据段有关，而CS和代码段有关，修改DS可以改变数据从哪里开始读（基址），修改CS可以改变指令从哪里开始读</strong></p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><ul><li><p><code>-r</code></p><p>查看改变CPU寄存器的内容</p></li><li><p><code>-d</code></p><p>查看内存中的内容</p></li><li><p><code>-e</code></p><p>改变内存中的内容</p></li><li><p><code>-u</code></p><p>将内存中的机器指令翻译成汇编指令</p></li><li><p><code>-a</code></p><p>将汇编指令写入内存中</p></li><li><p><code>-t</code></p><p>单行执行每一行的指令</p></li></ul><h3 id="r指令"><a href="#r指令" class="headerlink" title="r指令"></a>r指令</h3><blockquote><p>怎么改变寄存器的值？</p></blockquote><p>eg:<code>-r ax</code></p><p><strong>之后会显示ax原本的值，然后会提示你输入新的值。</strong></p><h3 id="d指令"><a href="#d指令" class="headerlink" title="d指令"></a>d指令</h3><blockquote><p>查看指定的内存地址，直接在指令之后写上地址就行</p></blockquote><p>eg：<code>-d 0760:0000</code></p><h3 id="a指令"><a href="#a指令" class="headerlink" title="a指令"></a>a指令</h3><blockquote><p>a指令的话必须要先指定存入的内存地址（当然最好是cs：ip等代码段地址）</p></blockquote><p>eg：<code>-a 0770:0000</code></p><p><strong>然后就可以输入指令的代码了，如果空着不输就直接退出了</strong></p><h3 id="q指令"><a href="#q指令" class="headerlink" title="q指令"></a>q指令</h3><blockquote><p>被忽视的指令，就是用来退出debug的</p></blockquote><p>eg：<code>-q</code></p><h2 id="指令的执行过程："><a href="#指令的执行过程：" class="headerlink" title="指令的执行过程："></a>指令的执行过程：</h2><ol><li>CPU从所指向的内存单元读取指令，存放到<strong>指令缓存器中</strong>。</li><li>IP = IP + <strong>所读指令的长度</strong>，从而指向下一条指令</li><li>执行指令缓存器中的内容，回到第一步</li></ol><h2 id="转移指令（jump）的底层原理"><a href="#转移指令（jump）的底层原理" class="headerlink" title="转移指令（jump）的底层原理"></a>转移指令（jump）的底层原理</h2><blockquote><p>转移指令——可以通过修改CS和IP这两个寄存器，于是决定了CPU从哪里读取代码</p></blockquote><p>eg：</p><div class="code-wrapper"><pre class="line-numbers language-ASM" data-language="ASM"><code class="language-ASM">JMP 2000:0;这个编译器是不认识的，此处只是演示<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>于是CS被修改为2000，IP被修改为0000（<em>注意：0被自动转换为了16进制的0000</em>）</p><blockquote><p>于是你会问了：你傻不傻啊，为啥不直接<br>MOV CS,2000<br>MOV IP,0</p></blockquote><p>warning:因为这种方式是错误的（<strong>8086CPU禁止这么做</strong>）</p><h3 id="误区："><a href="#误区：" class="headerlink" title="误区："></a>误区：</h3><blockquote><p>你可能会这样想：当我执行JMP指令时，我IP尽管被修改了，但是还是要<br>IP = IP + 指令长度的啊！</p></blockquote><p>warning：<em>请你牢记指令执行的顺序——<font color=brown>是先IP自加，然后才是执行指令（即修改IP和CS的值）</font>，IP自加时指令还在指令缓存器里睡着呢！</em></p><h3 id="更底层的步骤"><a href="#更底层的步骤" class="headerlink" title="更底层的步骤"></a>更底层的步骤</h3><p>在IP将指令压入指令缓冲器之后，(IP) = (IP) + 所读指令的长度，<u>而jmp就是更改了读取的指令的长度，从而实现指令跳转</u></p><font color=#34b>当然，jmp这一条指令不会进行任何操作（而jz之类的可能会执行jmp这条操作）</font><h2 id="8位寄存器的算术问题"><a href="#8位寄存器的算术问题" class="headerlink" title="8位寄存器的算术问题"></a>8位寄存器的算术问题</h2><blockquote><p>我们知道，所有的<strong>8086CPU</strong>都是<strong>16位的寄存器</strong>（不包括分开来的8位），而要是涉及到<strong>8位寄存器</strong>，则可能会产生意想不到的结果</p></blockquote><p>eg:</p><div class="code-wrapper"><pre class="line-numbers language-ASM" data-language="ASM"><code class="language-ASM">MOV AL,C5HADD AL,93H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><em>这时，AL会从C5H变成158H，然而我们知道AL是8位寄存器，所以158H会溢出成58H</em><br><em>有人会认为：那个进位的1跑到了AH中去了，然而我们一看AX，其值为0058H</em></p><p>warning：<u>8位寄存器相加，计算机会仅仅认为是两个8位数相加了，所以AL上的溢出和其他溢出一样，不会算到AH中去。</u></p><h2 id="8086CPU的设计缺陷"><a href="#8086CPU的设计缺陷" class="headerlink" title="8086CPU的设计缺陷"></a>8086CPU的设计缺陷</h2><ul><li><p>不能够将立即数直接送给段寄存器</p><p>eg：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov ds, 1000h   ;这会报错<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>其实也可以理解，毕竟段地址这么重要。。</p></blockquote></li><li><p><strong>IP是千万改不了的</strong></p><blockquote><p>这里的改不了是指用mov啥的指令去更改IP的地址</p><p>唯一能改的是其<u>自身的自增机制和jmp类指令的跳转</u></p></blockquote></li></ul><h2 id="与栈相关的寄存器"><a href="#与栈相关的寄存器" class="headerlink" title="与栈相关的寄存器"></a>与栈相关的寄存器</h2><blockquote><p>和stack有关的寄存器有两个：SS 和 SP</p></blockquote><ul><li><font size=5>SS</font><p>栈段寄存器：存放栈顶的段地址</p></li><li><font size=5>SP</font><p>栈顶指针寄存器：存放栈顶的偏移地址</p></li></ul><p><strong>于是，在任何时刻，SS: SP都指向栈顶的元素，<u>栈的存入和导出数据本质上就是SS:SP的移动</u></strong></p><p><em>即使是这样，我们仍然能够更改SS和SP的值，于是实现栈内存空间的转移（了解就好）</em></p><h3 id="Question："><a href="#Question：" class="headerlink" title="Question："></a>Question：</h3><blockquote><p>栈的push和pop都是根据栈顶指针（即SS:SP）的移动来获取和存入数据的，那我没有push数据而是直接pop数据，能否取出内存中的野数据呢？</p></blockquote><p><em>答案是：可以的，这就要涉及到之后要讲的栈顶超界问题。</em></p><h3 id="栈顶超界问题"><a href="#栈顶超界问题" class="headerlink" title="栈顶超界问题"></a>栈顶超界问题</h3><blockquote><p>栈空间默认是16个字节的空间，如果我不加限制地一直push会怎么样？</p></blockquote><p><strong>会超界，push的数据会覆盖掉原先的内存数据。同样，一直pop也会造成超界问题。</strong></p><font size=4>**解决办法？**</font><p>没得😂，你得自求多福（好吧，注意编程的思路就好了）</p><h2 id="除了代码的那些东西"><a href="#除了代码的那些东西" class="headerlink" title="除了代码的那些东西"></a>除了代码的那些东西</h2><h3 id="段定义"><a href="#段定义" class="headerlink" title="段定义"></a>段定义</h3><blockquote><p>To begin, you have to know something.</p></blockquote><ul><li>一个汇编程序是由多个段组成的，这些个段用来存放<strong>代码</strong>，<strong>数据</strong>或<strong>当作栈空间</strong>来使用。</li><li>一个程序至少一个段（<em>你至少要代码吧</em>）</li><li>每个段得有名字（<em>不然谁分得清啊</em>）</li><li>求你哥，千万别把这个概念和内存中段搞混了。。</li></ul><p>formate：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">段名 segment...段名 ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="end（不是ends）"><a href="#end（不是ends）" class="headerlink" title="end（不是ends）"></a>end（不是ends）</h3><p><strong><u>这玩意是必写的，作为程序的结束标示。</u></strong></p><p>一般格式为：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">code segmentstart:...code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="assume"><a href="#assume" class="headerlink" title="assume"></a>assume</h3><p><strong>这玩意是将某一段寄存器和程序中的某个段联系到一起</strong></p><p>eg:</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">assume cs:codesg;codesg是一个段的名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="loop底层原理"><a href="#loop底层原理" class="headerlink" title="loop底层原理"></a>loop底层原理</h2><blockquote><p>我们经常会用到loop这个指令，即循环指令，但仅仅就只是循环吗？或者说它会有其他条件来控制循环吗？</p></blockquote><font size=4>**原理**</font><ol><li>(CX) = (CX) - 1</li><li><strong>判断CX中的值，不为零则继续循环，为零则跳出循环向下执行。</strong>（<em>也就是说它是有循环条件的</em>）</li></ol><p>看个东西：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这个python程序不跟</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov cx,10L1: ...loop L1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>这个一样的么？</p><p><strong>相信懂的都已经懂了（￣︶￣）↗</strong></p><h2 id="实现大写小写字母互转"><a href="#实现大写小写字母互转" class="headerlink" title="实现大写小写字母互转"></a>实现大写小写字母互转</h2><blockquote><p>原理</p></blockquote><p>大小写的字母其实差别就是一个20H，eg：</p><div class="table-container"><table><thead><tr><th>字母</th><th>HEX</th><th>BIN</th></tr></thead><tbody><tr><td>B</td><td>42H</td><td>0100 0010B</td></tr><tr><td>b</td><td>62H</td><td>0110 0010B</td></tr></tbody></table></div><p>所以可以巧用and（与运算）<br><strong>比如说可以与上1101 1111，于是正好就可以改变第六位上的二进制</strong><br><em>或者用或，或上0010 0000</em></p><h2 id="SI和DI"><a href="#SI和DI" class="headerlink" title="SI和DI"></a>SI和DI</h2><blockquote><p>之前已经弄清楚了SS, CS, DS, IP, SP（几乎就是几个常用的几个寄存器），那SI和DI到底是干啥的？</p></blockquote><ul><li><font size=4>**和地址的操作有关**</font></li><li><font size=4>**和BX功能相近**</font></li></ul><p>像这种：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov bx,0mov ax,[bx]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>其中的BX都可以换成SI或者DI</p><blockquote><p>到底有什么区别？</p></blockquote><p><em>我们其实可以看到BX实际上是在单打独斗的，而SI和DI时常是成双出现的，这就解决了一些需要在一个逻辑中同时操作两个数据的尴尬局面（而这种局面又时常发生），比如字符串的向后复制问题</em></p><blockquote><p>而且我们的寻址方式又增加了（老折磨人了）</p></blockquote><ul><li><code>[bx + si]</code>和<code>[bx + di]</code></li><li><code>[bx + si + 立即数]</code>和<code>[bx + di + 立即数]</code></li></ul><h2 id="DUP详解"><a href="#DUP详解" class="headerlink" title="DUP详解"></a>DUP详解</h2><blockquote><p>其实我们写了很多的程序之后，都知道了用dup和缓存有关<br>但是我们真正了解dup吗？</p></blockquote><ul><li><strong>首先你得知道，dup是duplication（复制品）的缩写</strong></li><li><strong>其次，它通常和db，dw，dd等伪指令相配合</strong></li></ul><div class="table-container"><table><thead><tr><th>指令</th><th>功能</th><th>相当于</th></tr></thead><tbody><tr><td>db 3 dup(0)</td><td>定义了3个字节，它们的值都是0</td><td>db 0,0,0</td></tr><tr><td>db 3 dup(0,1,2)</td><td>定义了9个字节，由0，1，2重复3次构成</td><td>db 0,1,2,0,1,2,0,1,2</td></tr><tr><td>db 3 dup(‘abc’,’ABC’)</td><td>定义了18个字节，构成’abcABCabcABCabcABC’</td><td>db ‘abcABCabcABCabcABC’</td></tr></tbody></table></div><blockquote><p>这里声明一下</p></blockquote><p>db不是database，而是指字节型<br>dw是指字型数据，dd是指双子数据</p><p><strong>ps：看到这里，你或许就已经知道了我们之前定义的buf其实是假的缓冲区😂，事实上，<font color=#34b>他除了名字和缓存有关，其他的实际上就是我们开辟的一个普通内存空间。</font></strong></p><h2 id="lea和offset"><a href="#lea和offset" class="headerlink" title="lea和offset"></a>lea和offset</h2><blockquote><p>有时候我们会用到取出变量（这里一般指的是变量名）的地址来放入寄存器中（比如ax，bx），lea和offset就经常出现了</p></blockquote><p>首先我们看一下这个为啥是错的：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov ax,string;这里的string是我们定义好的变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>肯定是错的啊，这个string不能代表任何的地址含义</strong></p><p>而：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">lea ax,stringmov ax,offset string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><strong>这两行的意思是一样的，而且都是正确的。</strong></p><blockquote><p>详解</p></blockquote><ul><li><p>lea是将变量的物理地址送到前面一个寄存器中</p></li><li><p>offset则是一个操作符，它将取得标号的偏移地址</p><p><strong>偏移地址再加上默认的段地址，他不就变成物理地址了吗</strong></p></li></ul><h2 id="call和ret原理"><a href="#call和ret原理" class="headerlink" title="call和ret原理"></a>call和ret原理</h2><p><em>当CPU执行call指令时，会进行两步操作：</em></p><ol><li>将当前的IP或CS和IP压入栈中</li><li>转移到标号处执行指令</li></ol><p>然后在遇到ret指令时，再将IP啥的pop出栈，转移到下一条指令去执行。</p><p>warning：需要注意的一点是，<font color=brown>没有call指令也可以执行ret指令，这就相当于将ret指令单独执行，即将栈顶pop出数据到ip</font></p><h3 id="call的段间转移"><a href="#call的段间转移" class="headerlink" title="call的段间转移"></a>call的段间转移</h3><p>指令为：call far ptr</p><p><strong>这事实上是将sp-2之后先将cs压入栈中，然后再将ip压入栈，<u>其中的转移过程和jmp far ptr类似</u></strong></p><h2 id="方向标志位和串传送指令"><a href="#方向标志位和串传送指令" class="headerlink" title="方向标志位和串传送指令"></a>方向标志位和串传送指令</h2><blockquote><p>你是否有这样的苦恼：当你在执行操作时只能够一个一个字节的进行处理，而这种执行的效率显然是低效的，你会想有没有一种可以一次执行一串的指令呢？</p></blockquote><h3 id="DF（Direction-Flag）"><a href="#DF（Direction-Flag）" class="headerlink" title="DF（Direction Flag）"></a>DF（Direction Flag）</h3><p>功能：<strong>在串处理指令中，控制每次操作后SI, DI的增减。<font color=brown>（也就是说必须得配合串处理指令才会有奇效）</font></strong></p><ul><li>DF = 0：每次操作后si，di递增</li><li>DF = 1；每次操作后si，di递减</li></ul><h3 id="串处理指令"><a href="#串处理指令" class="headerlink" title="串处理指令"></a>串处理指令</h3><p>串传送指令：movsb</p><blockquote><p>它怎能做到串（string）的传送？</p></blockquote><p>((es) x 16 + (di)) = ((ds) x 16 + (si))，之后si和di同时+1就行了</p><p><em>这里终于用到了es（extra segment），也就是说它经常和串处理有关系（当然要和ds相互配合），然后再利用si和di这对就能完成传操作了。</em></p><p>当然，还有其他的串传送指令：movsw（传送字节单位），这只需要将+1改成+2即可。</p><blockquote><p>通过上述描述，我们肯定知道DF有多重要了（直接决定了si和di是加是减），有没有对DF进行操作的指令？</p></blockquote><p>cld指令：将DF置为0（clear）<br>std指令：将DF置为1（setup）</p><h3 id="rep指令"><a href="#rep指令" class="headerlink" title="rep指令"></a>rep指令</h3><blockquote><p>我们的串传送指令也只是一次的执行，它也得配合loop循环使用（假的串指令？），而一直写loop也有点麻烦。</p></blockquote><p>rep指令能够根据cx的值，重复执行之后的指令（<u>通常和串传送指令配合</u>）</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">rep movsb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>等同于：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">s:  movsbloop s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="位移指令"><a href="#位移指令" class="headerlink" title="位移指令"></a>位移指令</h2><blockquote><font size=4>首先介绍一下SHL</font></blockquote><p>SHL OPR,CNT    将OPR逻辑左移CNT位</p><ol><li>将寄存器或内存单元中的数据向左移位</li><li>将溢出的一位写入CF中</li><li>最低位用0补充</li></ol><p><em>warning：这里有一点需要注意的是，执行shl时，如果移动的位数大于一，必须用cl来控制循环</em></p><h2 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h2><ul><li><strong>在调用9号中断（即字符串输出）时，字符串会不停的读取字符，直到碰到$</strong></li><li><strong>调用2号中断（即单个字符输出）时，会自动输出一个字符（只是想说明和9号的终止符不同）</strong></li><li><strong>调用10号中断（即字符串输入）时，存入的第一个字符<font color=brown>可能</font>不在变量的偏移地址处（按常识应该在的位置），而是在偏移地址向后+2字节的地址处。</strong></li></ul><h3 id="子程序坑"><a href="#子程序坑" class="headerlink" title="子程序坑"></a>子程序坑</h3><p><strong>想要正确调用，格式是这样的：</strong></p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">codes segmentassume: ...start:main proc farmov ax,datasmov ds,ax    ;此处输入代码    call ...    mov ah,4ch    int 21hmain ENDP... proc near...... endpcodes endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="输出数组的坑"><a href="#输出数组的坑" class="headerlink" title="输出数组的坑"></a>输出数组的坑</h3><blockquote><p>当你想要利用一个定义好的变量进行输入后，你可能会纠结于怎么去得到这个数组变量里的每一个值。<em>（因为一不留神就是一个报错）</em></p></blockquote><p>个人建议的输出方式：</p><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov dl,arr[bx+2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong><em>因为这种方法很像C语言中的指针，所以容易记忆</em></strong></p><p>但是注意的是，可能有如下报错：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">must be base or index registor<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong><em>这通常是你使用了<code>arr[cx+2]</code>等方式，这里的base registor只有两个：<code>ax</code>和<code>bx</code>！</em></strong>（index registor就不用说了吧）</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>masm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/18/hello-world/"/>
    <url>/2020/10/18/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><blockquote><p>现在是2020年12月3号，距离小破站建立时已有46天了。你可能会问为神马我现在才去更改Hello World的页面，其实是因为这段时间我还（lan）很（dei）忙（xie）。</p></blockquote><p><strong>现在决定这个Hello World的文档就用于记录本站的大事件了！</strong></p><h2 id="Big-Event"><a href="#Big-Event" class="headerlink" title="Big Event"></a>Big Event</h2><ul><li>小破站诞生于2020年10月18号</li></ul>]]></content>
    
    
    <categories>
      
      <category>first</category>
      
    </categories>
    
    
    <tags>
      
      <tag>start</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
